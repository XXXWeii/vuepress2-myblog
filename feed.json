{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "XXXWeii",
  "home_page_url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/",
  "feed_url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/feed.json",
  "description": "XXXWeii的博客",
  "icon": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/logo.jpg",
  "authors": [
    {
      "name": "XXXWeii",
      "url": "https://github.com/XXXWeii/vuepress2-myblog"
    }
  ],
  "items": [
    {
      "title": "关于我的故事",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/intro.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/intro.html",
      "summary": "关于我的故事 大家好，我是XXXWeii!👋 -🔭 我目前正在研究睡觉。 -👨‍💻 我负责吃喝玩乐的推广和维护。 -🏓 爱好:编程，玩游戏，听音乐 -👋 我的个人博客",
      "content_html": "<h1> 关于我的故事</h1>\n<p>大家好，我是<a href=\"https://github.com/XXXWeii\" target=\"_blank\" rel=\"noopener noreferrer\">XXXWeii</a>!👋</p>\n<p>-🔭 我目前正在研究<a href=\"\">睡觉</a>。</p>\n<p>-👨‍💻 我负责<a href=\"\">吃喝玩乐</a>的推广和维护。</p>\n<p>-🏓 爱好:编程，玩游戏，听音乐</p>\n<p>-👋 我的个人<a href=\"https://www.zhangshuqi.com\" target=\"_blank\" rel=\"noopener noreferrer\">博客</a></p>\n<p>欢迎来到我的博客！我是一名热爱分享、记录和创造的人，我喜欢用文字、图片和代码来表达自己的想法和感受。在我的博客里，你可以看到我分享的关于技术等各种各样的话题。我希望我的博客能够给你带来启发、乐趣和收获，也欢迎你留言交流和分享你的想法。让我们一起探索这个丰富多彩的世界吧！</p>\n",
      "date_published": "2022-01-01T00:00:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": []
    },
    {
      "title": "前端学习路线",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/learning.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/learning.html",
      "summary": "一、编辑器： VSCode (推荐使用) Visual Studio Code - Code Editing. Redefinedcode.visualstudio.com/",
      "content_html": "<h2> 一、编辑器：</h2>\n<hr>\n<ol>\n<li><strong>VSCode (推荐使用)</strong></li>\n</ol>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio Code - Code Editing. Redefinedcode.visualstudio.com/<img src=\"https://pic4.zhimg.com/v2-beaba009c542a9f6fe1d2034a7ed568b_180x120.jpg\" alt=\"img\" loading=\"lazy\"></a></p>\n<p>2.WebStorm</p>\n<p>3.Atom</p>\n<p>4.Sublime</p>\n<hr>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV14J4114768%3Ffrom%3Dsearch%26seid%3D7000402704669507889\" target=\"_blank\" rel=\"noopener noreferrer\">黑马程序员 pink 老师前端入门教程，零基础必看的 h5(html5)+css3+移动端前端视频教程_哔哩哔哩_bilibiliwww.bilibili.com/video/BV14J4114768?from=search&amp;seid=7000402704669507889</a></p>\n<hr>\n<h2> 二、HTML</h2>\n<hr>\n<ul>\n<li>常用标签</li>\n<li>表单</li>\n<li>HTM</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.runoob.com/html/html-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTML 教程 | 菜鸟教程</a></p>\n<h2> 三、CSS</h2>\n<hr>\n<ul>\n<li><strong>基本语法</strong></li>\n<li><strong>布局（<strong>浮动<code>float</code>、定位<code>position</code>、盒模型、<code>flex</code>、<code>grid/layout</code></strong>)</strong></li>\n<li><strong>响应式布局</strong></li>\n<li>viewport（用户网页的可视区域）</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>流动布局（fluid grid）</li>\n<li>媒体监听<code>@media</code></li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>移动端适配</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.runoob.com/css/css-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 教程 | 菜鸟教程</a></p>\n<hr>\n<h2> 四、JS(特别重要，将时间多花点在 JS 上)</h2>\n<hr>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1YW411T7GX%3Ffrom%3Dsearch%26seid%3D10104038366788666376\" target=\"_blank\" rel=\"noopener noreferrer\">尚硅谷 JS 入门 视频 B 站</a></p>\n<ul>\n<li><strong>基本语法</strong></li>\n<li><strong>函数</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023021087191360\" target=\"_blank\" rel=\"noopener noreferrer\">函数定义和调用</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023021187855808\" target=\"_blank\" rel=\"noopener noreferrer\">变量作用域与解构赋值</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023023754768768\" target=\"_blank\" rel=\"noopener noreferrer\">方法</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023021271742944\" target=\"_blank\" rel=\"noopener noreferrer\">高阶函数</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023021250770016\" target=\"_blank\" rel=\"noopener noreferrer\">闭包</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1031549578462080\" target=\"_blank\" rel=\"noopener noreferrer\">箭头函数</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023024381818112\" target=\"_blank\" rel=\"noopener noreferrer\">generator</a></li>\n</ol>\n<ul>\n<li><strong>标准对象</strong></li>\n<li><strong>面向对象编程</strong></li>\n</ul>\n<ol>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023022043494624\" target=\"_blank\" rel=\"noopener noreferrer\">创建对象</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1023021997355072\" target=\"_blank\" rel=\"noopener noreferrer\">原型继承</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312/1072866346339712\" target=\"_blank\" rel=\"noopener noreferrer\">class 继承</a></li>\n</ol>\n<ul>\n<li><strong>ES6+</strong></li>\n<li><strong>this、call、apply</strong></li>\n<li><strong>异步（</strong><code>Ajax</code><strong>、</strong><code>promise</code><strong>、</strong><code>async/await</code><strong>）</strong></li>\n<li>**设计模式（<strong>推荐看书</strong>《JavaScript 设计模式与开发实践》）,**将 js 都学完再来看设计模式</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//zh.javascript.info/\" target=\"_blank\" rel=\"noopener noreferrer\">现代 JavaScript 教程 zh.javascript.info/<img src=\"https://pic4.zhimg.com/v2-371dd24f02bbb7f17ea00a910ff8f70b_180x120.jpg\" alt=\"img\" loading=\"lazy\"></a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ES6 入门教程 es6.ruanyifeng.com/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.runoob.com/js/js-variables.html\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 变量 | 菜鸟教程 www.runoob.com/js/js-variables.html</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/1022910821149312\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 教程 www.liaoxuefeng.com/wiki/1022910821149312<img src=\"https://pic4.zhimg.com/v2-94d0707719a0e1571384a066f4d90b7b_180x120.jpg\" alt=\"img\" loading=\"lazy\"></a></p>\n<blockquote>\n<p>目前很多公司都使用了 Typescript，面试的时候大都会问你会不会 ts,所以伙伴们也要学习起来了。</p>\n</blockquote>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/primitive-data-types.html\" target=\"_blank\" rel=\"noopener noreferrer\">原始数据类型 · TypeScript 入门教程 ts.xcatliu.com/basics/primitive-data-types.html</a></p>\n<hr>\n<blockquote>\n<p>在你学习完 HTML+CSS+JS 后，还没有学框架（react、vue、angular），但是又想练练手，做些小 demo，此时有一个开源库会适合你：<strong><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bradtraversy/50projects50days\" target=\"_blank\" rel=\"noopener noreferrer\">50 个 demo</a></strong> ，当然工作了或者学完框架后的小伙伴如果感觉基础没有学好，也可以回来练练这个。</p>\n</blockquote>\n<h2> 五、版本管理工具 Git</h2>\n<hr>\n<h3> 推荐使用软件（Tower/sourcetree)</h3>\n<figure><img src=\"https://pic4.zhimg.com/80/v2-1a5a78ba5e4bcdbe5a0fff4089dc568f_1440w.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<figure><img src=\"https://pic2.zhimg.com/80/v2-3d524f26970613e71e2ced426db80d2d_1440w.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<p>快捷方便，commit 、push、 pull、 checkout 、merge、 restore、 rename 等等，一键搞定</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/github.com/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Mf4y117f3%3Ffrom%3Dsearch%26seid%3D10987880512517365800\" target=\"_blank\" rel=\"noopener noreferrer\">2020 最新 Git 教程（2 小时从入门到精通）_哔哩哔哩 (゜-゜)つロ 干杯~</a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ef0971a5fa2a32d472ef30b4a8533f40_180x120.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//backlog.com/git-tutorial/cn/intro/intro1_1.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://backlog.com/git-tutorial/cn/intro/intro1_1.htmlbacklog.com/git-tutorial/cn/intro/intro1_1.html</a></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-dfbbbdd0d8696de4d5e77fd2ecfeecf3_180x120.jpg\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<ul>\n<li>工作流程</li>\n</ul>\n<figure><img src=\"https://pic4.zhimg.com/80/v2-4da51a165e7fbeba06f782eed69dd94b_1440w.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<ul>\n<li><strong>创建仓库</strong></li>\n</ul>\n<p>git init</p>\n<ul>\n<li>基<strong>本操作</strong></li>\n</ul>\n<ol>\n<li>git clone</li>\n<li>git add</li>\n<li>git diff</li>\n<li>git commit</li>\n<li>git rm</li>\n<li>git reset HEAD</li>\n</ol>\n<ul>\n<li><strong>分支管理</strong></li>\n</ul>\n<ol>\n<li>git branch (branchname)</li>\n<li>git merge</li>\n<li>git rebase (branchname)</li>\n</ol>\n<blockquote>\n<p>这是本人记录的比较常用的一些指令</p>\n</blockquote>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.yuque.com/u2417328/rlt5do/nmgh6x\" target=\"_blank\" rel=\"noopener noreferrer\">Git 指令 牢记 · 语雀</a></p>\n<ul>\n<li><strong>使用 github 搭建个人博客，可用以下</strong></li>\n</ul>\n<ol>\n<li>hexo</li>\n<li>gatsby</li>\n<li>vuePress</li>\n</ol>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener noreferrer\">Git 教程 www.liaoxuefeng.com/wiki/896043488029600</a></p>\n<blockquote>\n<p>很多公司都实行 Code Review， 排查问题，提高代码质量、统一风格，团队合作建议实施 code review，可以多参考借鉴成熟并且有效的 code review 规范。</p>\n</blockquote>\n<hr>\n<h2> 六、Node(不用学太深)</h2>\n<hr>\n<p><strong>包管理</strong></p>\n<ul>\n<li><strong>npm （相当于手机里的应用商店，可以下载很多软件包）</strong></li>\n</ul>\n<ol>\n<li><code>npm install &lt;package-name&gt; </code>(安装单个软件包)</li>\n<li><code>npm update &lt;package-name&gt;</code> (更新软件包)</li>\n<li><code>npm run &lt;task-name&gt; </code>(运行任务)</li>\n<li><code>npm uninstall &lt;package-name&gt;(</code>卸载 npm 软件包)</li>\n<li><code>-g</code>标志可以执行全局安装</li>\n<li><code>-S</code>就是<code>--save</code>的简写</li>\n<li><code>-D</code>就是<code>--save-dev</code> 这样安装的包的名称及版本号就会存在<code>package.json</code>的<code>devDependencies</code>这个里面，而--save 会将包的名称及版本号放在<code>dependencies</code>里面。</li>\n</ol>\n<ul>\n<li><strong>yarn</strong></li>\n<li><strong>npx</strong></li>\n</ul>\n<p>常用包</p>\n<ul>\n<li>文件读写 fs</li>\n<li>路径查找 path</li>\n<li>网络 http</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//nodejs.cn/learn\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 简介 nodejs.cn/learn</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">七天学会 NodeJSnqdeng.github.io/7-days-nodejs/</a></p>\n<hr>\n<blockquote>\n<p><em>相关</em></p>\n</blockquote>\n<h3> express.js (node.js 的优化版）</h3>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.expressjs.com.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Express - 基于 Node.js 平台的 web 应用开发框架 - Express 中文文档 www.expressjs.com.cn/</a></p>\n<p><strong>koa</strong> <strong>(基于 node.js 的 web 开发框架)</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//koa.bootcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Koa (koajs) -- 基于 Node.js 平台的下一代 web 开发框架 koa.bootcss.com/</a></p>\n<h2> 七、构建工具</h2>\n<hr>\n<h3> 自动化构建</h3>\n<ol>\n<li><code>npm script</code></li>\n</ol>\n<p>npm 允许在 <code>package.json</code> 文件里面，使用 <code>scripts</code> 字段定义脚本命令</p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2016/10/npm_scripts.html\" target=\"_blank\" rel=\"noopener noreferrer\">npm scripts 使用指南</a></p>\n<blockquote>\n<p>相关</p>\n</blockquote>\n<ul>\n<li><strong>gulp</strong></li>\n<li><strong>模块化打包</strong></li>\n<li><strong>webpack(推荐)</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.webpackjs.com/concepts/\" target=\"_blank\" rel=\"noopener noreferrer\">概念 | webpack 中文网 www.webpackjs.com/concepts/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ruanyf/webpack-demos\" target=\"_blank\" rel=\"noopener noreferrer\">ruanyf/webpack-demosgithub.com/ruanyf/webpack-demos</a></p>\n<ul>\n<li><strong>Vite (推荐)</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//cn.vitejs.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Vite 官方中文文档 cn.vitejs.dev/</a></p>\n<ul>\n<li><strong>Rollup</strong></li>\n<li><strong>Snowpack</strong></li>\n<li><strong>Parcel</strong></li>\n<li><strong>grunt</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//grunt.docschina.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Grunt: The JavaScript 世界的构建工具 - Grunt 中文 grunt.docschina.org/</a></p>\n<hr>\n<h2> 八、CSS 预处理</h2>\n<hr>\n<ul>\n<li>Sass(推荐）</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.sass.hk/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Sass 教程 Sass 中文文档 | Sass 中文网 www.sass.hk/docs/</a></p>\n<ul>\n<li>PostCss</li>\n<li>Stylus</li>\n<li>Less</li>\n</ul>\n<p>转载</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/9d84bb5043bb\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 预处理器 sass,less,stylus 优缺点</a></p>\n<hr>\n<h2> 九、JS 框架(没有好与不好，只有适不适合)</h2>\n<hr>\n<ul>\n<li><strong>React(推荐）</strong></li>\n</ul>\n<blockquote>\n<p><strong>官方文档 一定一定 要仔细的 从头到尾 多看 几遍 ！！！！</strong></p>\n</blockquote>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//react.docschina.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">开始 – Reactreact.docschina.org/docs/getting-started.html</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//jspang.com/detailed%3Fid%3D56\" target=\"_blank\" rel=\"noopener noreferrer\">技术胖-React 学习路线-按此路线学习顺畅无比 jspang.com/detailed?id=56!</a></p>\n<ol>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux</a>(<a href=\"https://link.zhihu.com/?target=https%3A//redux-toolkit-cn.netlify.app/introduction/quick-start/\" target=\"_blank\" rel=\"noopener noreferrer\">redux-toolkit</a>)</li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">React Hooks</a></li>\n<li>Mobx</li>\n<li>React-router</li>\n</ol>\n<blockquote>\n<p>想学习源码的 1.<a href=\"https://link.zhihu.com/?target=https%3A//react.iamkasong.com/\" target=\"_blank\" rel=\"noopener noreferrer\">React 技术揭秘</a> 2. <a href=\"https://link.zhihu.com/?target=https%3A//bogdan-lyashenko.github.io/Under-the-hood-ReactJS/stack/languages/chinese/book/Intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">Under-the-hood-ReactJS</a> 3. <a href=\"https://link.zhihu.com/?target=https%3A//pomb.us/build-your-own-react/\" target=\"_blank\" rel=\"noopener noreferrer\">Build your own React</a></p>\n</blockquote>\n<ul>\n<li><strong>Vue（推荐）</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cn.vuejs.org/ </a></p>\n<ol>\n<li>Vuex</li>\n<li>Vue-router</li>\n</ol>\n<blockquote>\n<p>学习源码<a href=\"https://link.zhihu.com/?target=https%3A//vue-js.com/learn-vue/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 源码系列-Vue 中文社区</a></p>\n</blockquote>\n<ul>\n<li><strong>Angular</strong></li>\n</ul>\n<ol>\n<li>RxJS （异步优化）</li>\n<li>NgRx</li>\n</ol>\n<hr>\n<h2> 十、CSS 框架</h2>\n<hr>\n<ul>\n<li>\n<p><strong>Antd(推荐)</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//ant.design/index-cn\" target=\"_blank\" rel=\"noopener noreferrer\">Ant Design - 一套企业级 UI 设计语言和 React 组件库 ant.design/index-cn</a></p>\n</li>\n<li>\n<p><strong>Element UI（推荐）</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//element.eleme.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">The world's most popular Vue UI frameworkelement.eleme.cn/</a></p>\n</li>\n<li>\n<p>Material UI</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//material-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Material-UI: A popular React UI frameworkmaterial-ui.com/</a></p>\n</li>\n<li>\n<p>Bootstrap</p>\n</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bootcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Bootstrap 中文网 www.bootcss.com/)</a></p>\n<ul>\n<li>semantic UI</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//semantic-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Semantic UIsemantic-ui.com/</a></p>\n<p>vant (移动端）</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//youzan.github.io/vant/%23/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">https://youzan.github.io/vant/#/zh-CN/youzan.github.io/vant/#/zh-CN/</a></p>\n<p>Mobile UI</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//youzan.github.io/vant/%23/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">Mobile UI Components built on Vueyouzan.github.io/vant/#/zh-CN/</a></p>\n<p>目前 Vant 官方提供了<a href=\"https://link.zhihu.com/?target=https%3A//vant-contrib.gitee.io/vant\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 版本</a>和<a href=\"https://link.zhihu.com/?target=http%3A//vant-contrib.gitee.io/vant-weapp\" target=\"_blank\" rel=\"noopener noreferrer\">微信小程序版本</a>，并由社区团队维护<a href=\"https://link.zhihu.com/?target=https%3A//github.com/mxdi9i7/vant-react\" target=\"_blank\" rel=\"noopener noreferrer\">React 版本</a>。</p>\n<hr>\n<h2> 十一、CSS 优化方案</h2>\n<hr>\n<ul>\n<li><strong>Styled-Component(推荐)</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//styled-components.com/\" target=\"_blank\" rel=\"noopener noreferrer\">styled-components</a></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>CSS Modules（推荐）</strong></li>\n</ul>\n<p>Styled JSX</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//emotion.sh/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">emotion</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//glamorous.rocks/\" target=\"_blank\" rel=\"noopener noreferrer\">glamorous</a></li>\n</ul>\n<hr>\n<h2> 十二、性能</h2>\n<hr>\n<p>白屏、卡顿、页面加载失败、页面跳转慢、图片空窗、崩溃、耗电等问题一直都是用户频繁舆情反馈的痛点。</p>\n<ul>\n<li><strong>性能指标</strong></li>\n</ul>\n<ol>\n<li>白屏时间</li>\n<li>首屏时间</li>\n<li>用户可操作时间</li>\n<li>页面总下载时间</li>\n<li>请求数量</li>\n</ol>\n<ul>\n<li><strong>RAIL 模型</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000010512899\" target=\"_blank\" rel=\"noopener noreferrer\">人类身份验证 - SegmentFaultsegmentfault.com/a/1190000010512899</a></p>\n<ul>\n<li><strong>LightHouse 指标</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/Napoleonxxx/article/details/85077418\" target=\"_blank\" rel=\"noopener noreferrer\">玩转 Lighthouse-全方位提高网站各项指标的实践_辰辰沉沉大辰沉-CSDN 博客_lighthouse 报告 blog.csdn.net/Napoleonxxx/article/details/85077418</a></p>\n<ul>\n<li><strong>DevTools</strong></li>\n<li><strong>PWA</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/098af61bbe04\" target=\"_blank\" rel=\"noopener noreferrer\">2019 前端必会黑科技之 PWAwww.jianshu.com/p/098af61bbe04<img src=\"https://pic1.zhimg.com/v2-b8214676408fdcfe922afef51ef51414_180x120.jpg\" alt=\"img\" loading=\"lazy\"></a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1wt411E7QD%3Ffrom%3Dsearch%26seid%3D7258704753153037754\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.bilibili.com/video/BV1wt411E7QD?from=search&amp;seid=7258704753153037754www.bilibili.com/video/BV1wt411E7QD?from=search&amp;seid=7258704753153037754</a></p>\n<ul>\n<li><strong>Service Worker</strong></li>\n<li><strong>骨架屏</strong>（骨架屏(Skeleton Screen)是指在页面数据加载完成前，先给用户展示出页面的大致结构（灰色占位图），在拿到接口数据后渲染出实际页面内容然后替换掉。）</li>\n</ul>\n<figure><img src=\"https://pic1.zhimg.com/80/v2-c5707217415ba67d2dbd7097bed28278_1440w.webp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<ul>\n<li><strong>gzip</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000012571492\" target=\"_blank\" rel=\"noopener noreferrer\">https://segmentfault.com/a/1190000012571492segmentfault.com/a/1190000012571492</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000012571492\" target=\"_blank\" rel=\"noopener noreferrer\">前端性能优化之 gzip_个人文章 - SegmentFault 思否</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000012571492\" target=\"_blank\" rel=\"noopener noreferrer\">前端性能优化之 gzip_个人文章 - SegmentFault 思否 segmentfault.com/a/1190000012571492</a></p>\n<ul>\n<li><strong>懒加载和预加载</strong></li>\n<li>**包分析工具（**构建代码之后，明白到底是什么占用了那么多空间？可以使用 webpack-bundle-analyzer）</li>\n<li><strong>防抖、节流</strong>（优化高频率执行 js 代码的一种手段，js 中的一些事件如浏览器的<code>resize</code>、<code>scroll</code>，鼠标的<code>mousemove</code>、<code>mouseover</code>，<code>input</code>输入框的<code>keypress</code>等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。）</li>\n</ul>\n<hr>\n<h2> 十三、数据可视化</h2>\n<hr>\n<ul>\n<li><strong>ECharts(推荐)</strong></li>\n</ul>\n<p>实例</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//echarts.apache.org/examples/zh/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Examples - Apache ECharts (incubating)echarts.apache.org/examples/zh/index.html</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//echarts.apache.org/zh/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache ECharts (incubating)echarts.apache.org/zh/index.html<img src=\"https://pic4.zhimg.com/v2-31b0d704161201f76e38d07c7be2ffcf_180x120.jpg\" alt=\"img\" loading=\"lazy\"></a></p>\n<ul>\n<li><strong>AntV</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//antv.vision/zh\" target=\"_blank\" rel=\"noopener noreferrer\">AntVantv.vision/zh<img src=\"https://pic3.zhimg.com/v2-c9a2f86510c6800e2564bd3da07e7be2_ipico.jpg\" alt=\"img\" loading=\"lazy\"></a></p>\n<ul>\n<li><strong>HighChat</strong></li>\n<li><strong>ucharts(小程序)</strong></li>\n</ul>\n<hr>\n<h2> 十四、移动端应用（Android Studio / XCode）</h2>\n<hr>\n<ul>\n<li><strong>React Native(推荐)</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//reactnative.cn/docs/getting-started\" target=\"_blank\" rel=\"noopener noreferrer\">搭建开发环境 · React Native 中文网 reactnative.cn/docs/getting-started</a></p>\n<blockquote>\n<p><strong>*React Native 插件汇总：*</strong></p>\n</blockquote>\n<ul>\n<li>\n<p>react-native-linear-gradient 颜色渐变处理</p>\n</li>\n<li>\n<p>react-native-login 视频界面登录</p>\n</li>\n<li>\n<p>react-native-keyboard-aware-scroll-view 键盘显示处理</p>\n</li>\n<li>\n<p>react-native-popup-dialog 弹窗</p>\n</li>\n<li>\n<p>react-native-dropdownalert 一种非常漂亮的 alert 弹窗方式，从状态栏往下弹窗；</p>\n</li>\n<li>\n<p>react-native-simple-radio-button 单选按钮；</p>\n</li>\n<li>\n<p>react-native-swiper</p>\n</li>\n<li>\n<p>react-native-macos macos 桌面应用</p>\n</li>\n<li>\n<p>react-native-wechat 集成微信相关 SDK</p>\n</li>\n<li>\n<p>react-native-modalbox 模态弹窗</p>\n</li>\n<li>\n<p>react-native-touch-id 指纹登录</p>\n</li>\n<li>\n<p>react-native-prompt 可输入文字的弹窗</p>\n</li>\n<li>\n<p>react-native-sqlite-storage sqlite 数据库存储</p>\n</li>\n<li>\n<p>react-native-permissions 权限检查</p>\n</li>\n<li>\n<p>react-native-progress-hud loading 圈</p>\n</li>\n<li>\n<p>react-native-snackbar 类似 toast 的弹窗模式</p>\n</li>\n<li>\n<p>react-native-qrcode-svg 二维码生产工具</p>\n</li>\n<li>\n<p>native-base UI 组件</p>\n</li>\n<li>\n<p>react-native-busy-indicator loading 圈</p>\n</li>\n<li>\n<p>react-native-fit-image 图片展示优化</p>\n</li>\n<li>\n<p>react-native-timer 定时器管理</p>\n</li>\n<li>\n<p>react-native-scrollable-tab-view 可以左右滑动的 tab</p>\n</li>\n<li>\n<p>react-native-zip-archive 解压工具</p>\n</li>\n<li>\n<p>react-native-xml2js</p>\n</li>\n<li>\n<p>react-native-spinkit 好看的 loading 圈</p>\n</li>\n<li>\n<p>react-native-interactable 有很强交互效果的 table 视图</p>\n</li>\n<li>\n<p>react-native-pull-to-refresh 下拉刷新效果</p>\n</li>\n<li>\n<p>react-native-deck-swiper 不错的 swiper 效果</p>\n</li>\n<li>\n<p>react-native-prefix-picker select 效果</p>\n</li>\n<li>\n<p>react-native-gesture-helper 手势 向上还是向下 还是向左</p>\n</li>\n<li>\n<p>react-native-drawer-layout 抽屉效果</p>\n</li>\n<li>\n<p>react-native-sortable-listview 可拖拽排序的列表视图</p>\n</li>\n<li>\n<p>react-native-progress 进度条 长方形 圆形</p>\n</li>\n<li>\n<p>react-native-splash-screen 启动屏处理</p>\n</li>\n<li>\n<p>react-native-masked-text 指定格式的输入框</p>\n</li>\n<li>\n<p>react-native-keyboard-manager 针对 IOS 键盘遮挡的问题 俺可以这么用 android:windowSoftInputMode=\"adjustResize\"</p>\n</li>\n<li>\n<p>react-native-beacons-manager 蓝牙处理</p>\n</li>\n<li>\n<p>react-native-fetch-blob 文件获取</p>\n</li>\n<li>\n<p>react-native-popup-menu 弹出菜单</p>\n</li>\n<li>\n<p>react-native-pathjs-charts 图表</p>\n</li>\n<li>\n<p>react-native-dates 日历日期选择工具</p>\n</li>\n<li>\n<p>react-native-calendar-strip 一种简单的日历处理</p>\n</li>\n<li>\n<p>react-native-simple-markdown 简单的 markdown 文本编辑器</p>\n</li>\n<li>\n<p>react-native-image-progress 进度条</p>\n</li>\n<li>\n<p>react-native-img-cache 图片缓存技术</p>\n</li>\n<li>\n<p>rn-placeholder 在展示具体的文字和图片之前有个加载样式处理</p>\n</li>\n<li>\n<p>react-native-pie-chart 饼状图</p>\n</li>\n<li>\n<p>react-native-maps 地图</p>\n</li>\n<li>\n<p>react-native-loading-overlay loading 圈加载遮罩</p>\n</li>\n<li>\n<p>react-native-progress 圆形进度条 <a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/d0742d421b7c\" target=\"_blank\" rel=\"noopener noreferrer\">react-native 圆形进度条</a></p>\n</li>\n<li>\n<p>react-native-modal 弹窗插件 <a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/react-native-modal\" target=\"_blank\" rel=\"noopener noreferrer\">react-native-modal</a></p>\n</li>\n<li>\n<p>react-native-extra-dimensions-android 安卓水滴屏获取屏幕高度 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Sunhat/react-native-extra-dimensions-android\" target=\"_blank\" rel=\"noopener noreferrer\">Sunhat/react-native-extra-dimensions-android</a></p>\n</li>\n<li>\n<p><strong>Weex(<strong>阿里巴巴旗下的跨平台移动开发解决方案</strong>)</strong></p>\n</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1Wx411s7PC%3Ffrom%3Dsearch%26seid%3D7952335917735607106\" target=\"_blank\" rel=\"noopener noreferrer\">技术胖的 WEEX 入门到实战视频教程_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/BV1Wx411s7PC?from=search&amp;seid=7952335917735607106</a></p>\n<ul>\n<li><strong>Flutter</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//flutterchina.club/get-started/install/\" target=\"_blank\" rel=\"noopener noreferrer\">起步:安装 Flutter - Flutter 中文网 flutterchina.club/get-started/install/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//jspang.com/detailed%3Fid%3D58\" target=\"_blank\" rel=\"noopener noreferrer\">技术胖-Flutter 学习路线-按次路线学习顺畅无比 jspang.com/detailed?id=58</a></p>\n<hr>\n<h2> 十五、小程序</h2>\n<hr>\n<h3> 原生</h3>\n<p>1)微信</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//developers.weixin.qq.com/miniprogram/dev/framework/\" target=\"_blank\" rel=\"noopener noreferrer\">微信开放文档</a></p>\n<p>2)支付宝</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//opendocs.alipay.com/mini/developer\" target=\"_blank\" rel=\"noopener noreferrer\">支付宝开放平台文档</a></p>\n<p>3)抖音</p>\n<p><a href=\"https://developer.open-douyin.com/docs/resource/zh-CN/mini-app/introduction/usage-guide\" target=\"_blank\" rel=\"noopener noreferrer\">抖音开放平台文档</a></p>\n<h3> 跨端</h3>\n<ul>\n<li><strong>Taro</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//taro-docs.jd.com/taro/docs/README/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Taro 介绍 | Taro 文档 taro-docs.jd.com/taro/docs/README/index.html</a></p>\n<blockquote>\n<p><em>基于 Taro 框架开发的多端 UI 组件库:</em></p>\n</blockquote>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//taro-ui.jd.com/%23/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">Taro UI | O2Teamtaro-ui.jd.com/#/docs/introduction</a></p>\n<ul>\n<li><strong>uni-app</strong></li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//uniapp.dcloud.io/\" target=\"_blank\" rel=\"noopener noreferrer\">uni-app 官网 uniapp.dcloud.io/</a></p>\n<blockquote>\n<p>扩展组件市场：</p>\n</blockquote>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//ext.dcloud.net.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">DCloud 插件市场 ext.dcloud.net.cn/</a></p>\n<h2> 十六：桌面开发</h2>\n<hr>\n<p><strong>Electron （推荐）</strong></p>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//www.electronjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Electron | Build cross-platform desktop apps with JavaScript, HTML, and CSS.www.electronjs.org/</a></p>\n<h2> <strong>十七：扩展学习</strong></h2>\n<hr>\n<ul>\n<li>rxjs</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//cn.rx.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">RxJS 中文文档 cn.rx.js.org/</a></p>\n<ul>\n<li>JavaScript Promise 迷你书:</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=http%3A//liubin.org/promises-book/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript Promise 迷你书（中文版）</a></p>\n<ul>\n<li>正则表达式：</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/cdoco/learn-regex-zh\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/cdoco/learn-regex-zhgithub.com/cdoco/learn-regex-zh</a></p>\n<hr>\n<h2> 十八、代码检查</h2>\n<hr>\n<blockquote>\n<p><strong>解决代码质量问题！</strong></p>\n</blockquote>\n<p>eslint(<a href=\"https://link.zhihu.com/?target=https%3A//www.zoo.team/article/eslint-rules\" target=\"_blank\" rel=\"noopener noreferrer\">自定义 ESLint 规则，让代码持续美丽</a>)</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//cn.eslint.org/\" target=\"_blank\" rel=\"noopener noreferrer\">ESLint - Pluggable JavaScript lintercn.eslint.org/</a></p>\n<p>stylelint:</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//stylelint.docschina.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://stylelint.docschina.org/stylelint.docschina.org/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//stylelint.docschina.org/\" target=\"_blank\" rel=\"noopener noreferrer\">stylelint</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//stylelint.docschina.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://stylelint.docschina.org/stylelint.docschina.org/</a></p>\n<hr>\n<h2> 十九、调试工具</h2>\n<hr>\n<h3> <a href=\"https://link.zhihu.com/?target=https%3A//jestjs.io/\" target=\"_blank\" rel=\"noopener noreferrer\">jest</a></h3>\n<h3> <a href=\"https://link.zhihu.com/?target=https%3A//mochajs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Mocha</a></h3>\n<h2> 二十：前端周刊</h2>\n<hr>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//docschina.org/weekly/react/\" target=\"_blank\" rel=\"noopener noreferrer\">Hello from React Status | React Statusdocschina.org/weekly/react/</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//weekly.75.team/\" target=\"_blank\" rel=\"noopener noreferrer\">奇舞周刊</a></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ascoders/weekly%3Futm_source%3Dgold_browser_extension\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/ascoders/weekly?utm_source=gold_browser_extensiongithub.com/ascoders/weekly?utm_source=gold_browser_extension</a></p>\n<p>早早鸟</p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//www.yuque.com/zaotalk/worm\" target=\"_blank\" rel=\"noopener noreferrer\">早早鸟日刊 · 语雀 www.yuque.com/zaotalk/worm</a></p>\n<h2> 二十一：可以逛逛，我收集的好用网站</h2>\n<hr>\n<p><a href=\"https://zhuanlan.zhihu.com/p/166266724\" target=\"_blank\" rel=\"noopener noreferrer\">前端好用网站推荐 39 赞同 · 0 评论文章</a></p>\n<blockquote>\n<p>建议勤记笔记，多复习，多积累，温故而知新。</p>\n</blockquote>\n",
      "image": "https://pic4.zhimg.com/v2-beaba009c542a9f6fe1d2034a7ed568b_180x120.jpg",
      "date_published": "2022-01-01T12:12:22.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": []
    },
    {
      "title": "纯 CSS 飞行直升机动画制作指南",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/CSS/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/CSS/1.html",
      "summary": "纯 CSS 飞行直升机动画制作指南 今天，我们来学习如何仅用 HTML 和 CSS 来构建一个漂亮的动画项目。这里假设大家都是中级 CSS 开发人员。 在这个项目中将用到的以下 CSS3 动画属性： CSS 转换 3D 变换 CSS 过渡效果 动画 自定义动画帧 兴奋吗？让我们开始吧！ 使用 HTML 定义直升机结构 首先让我们在main元素中定义一个容器，命名为helicopter，接着在这个容器中按顺序写入 4 个div元素，每个div元素的class属性值如下：",
      "content_html": "<h2> 纯 CSS 飞行直升机动画制作指南</h2>\n<hr>\n<p>今天，我们来学习如何仅用 HTML 和 CSS 来构建一个漂亮的动画项目。这里假设大家都是中级 CSS 开发人员。</p>\n<p>在这个项目中将用到的以下 CSS3 动画属性：</p>\n<ul>\n<li>CSS 转换</li>\n<li>3D 变换</li>\n<li>CSS 过渡效果</li>\n<li>动画</li>\n<li>自定义动画帧</li>\n</ul>\n<p>兴奋吗？让我们开始吧！</p>\n<h2> 使用 HTML 定义直升机结构</h2>\n<hr>\n<p>首先让我们在<code>main</code>元素中定义一个容器，命名为<code>helicopter</code>，接着在这个容器中按顺序写入 4 个<code>div</code>元素，每个<code>div</code>元素的<code>class</code>属性值如下：</p>\n<ul>\n<li>cockpit</li>\n<li>tail</li>\n<li>main</li>\n<li>rotor</li>\n</ul>\n<p>在<code>rotor</code>类中，你需要添加一个具有<code>rotator</code>类的<code>div</code>，然后在这个<code>rotator</code>类内部再添加两个空<code>div</code>。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 直升机结构设计</h2>\n<hr>\n<p>现在让我们来设计 HTML 结构，使其变成直升机形状。</p>\n<p><code>body</code></p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>.cockpit</code>类</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><img src=\"https://i.postimg.cc/7ZNWJzbk/image.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>现在为这个<code>cockpit</code>类添加玻璃。在<code>.cockpit</code>的<code>:before</code>和<code>:after</code>上定义玻璃形状：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<figure><img src=\"https://i.postimg.cc/QdP0Tqsv/image.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p><code>.tail</code>类</p>\n<p>将样式应用于<code>.tail</code>类：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<figure><img src=\"https://i.postimg.cc/QNbmbDhQ/image.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p><code>.main</code>类</p>\n<p>这个类是直升机的旋转体：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<figure><img src=\"https://i.postimg.cc/htH1jP1B/image.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p><code>.rotor</code>类</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<figure><img src=\"https://i.postimg.cc/y6vhRTyn/image.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p>在设计完直升机螺旋桨的样式后，为了使该旋翼更逼真，现在定位到该<code>rotor</code>内的两个空<code>div</code>。这样当我们在下个部分应用<code>rotate</code>动画时，你将会看到漂亮的动画。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：CS</p>\n<figure><img src=\"https://i.postimg.cc/q7syvc7s/image.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 那么怎么让直升机飞起来呢？</h2>\n<hr>\n<p>到目前为止，我们已创建了直升机的形状和外观样式。但是没有动画制作和关键帧，那就不是动画。所以，使用 CSS animation 属性来赋予这个直升机飞行的力量。</p>\n<h2> 定义@Keyframes</h2>\n<hr>\n<p>在使用<code>animation</code>属性之前，我们需要创建关键帧。对于这个项目，我们创建两个<code>@keyframes</code>：</p>\n<ul>\n<li>bounce</li>\n<li>rotate</li>\n</ul>\n<p><code>bounce</code></p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>rotate</code></p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 使用动画属性</h2>\n<hr>\n<p>现在，将这两个<code>@keyframes</code>添加到<code>.helicopter</code>和<code>.rotator</code>类中。</p>\n<p><code>.helicopter</code>类</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>.rotator</code>类</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>输出：</p>\n<figure><img src=\"https://i.postimg.cc/jdDf7Y5d/image.gif\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 结语</h2>\n<hr>\n<p>到这里，我们知道了如何仅使用 CSS 来创建复杂的形状和动画。你甚至都不必接触 JavaScript。希望你喜欢这个项目。</p>\n<p>感谢大家的阅读。编码快乐</p>\n",
      "image": "https://i.postimg.cc/7ZNWJzbk/image.png",
      "date_published": "2022-10-04T09:43:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "CSS实现一个让面试官眼前一亮的故障风格文字动画",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/CSS/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/CSS/2.html",
      "summary": "成品效果 今天分享一个用 css3 来实现一个最近特别流行的故障风格的文字展示动画，我敢说，只要你在你的项目中用到这个动画，面试官看到了一定会眼前一亮。下面先来看一下成品图： 该动画效果就比较复杂了，用到的知识比较多，例如 「css 伪元素 、元素自定义属性 、蒙版属性 、animation 动画等等」 标签元素部分 &lt;body&gt; &lt;div class=\"txt\" data-text=\"我是故障风格的文字\"&gt;我是故障风格的文字&lt;/div&gt; &lt;/body&gt;",
      "content_html": "<h2> 成品效果</h2>\n<hr>\n<p>今天分享一个用 css3 来实现一个最近特别流行的故障风格的文字展示动画，我敢说，只要你在你的项目中用到这个动画，面试官看到了一定会眼前一亮。下面先来看一下成品图：</p>\n<figure><figcaption></figcaption></figure>\n<p>该动画效果就比较复杂了，用到的知识比较多，例如 <strong>「css 伪元素 、元素自定义属性 、蒙版属性 、animation 动画等等」</strong></p>\n<h2> 标签元素部分</h2>\n<hr>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里我们使用了自定义属性，即 <strong>「data-」</strong> 加上我们自定义的属性名，我们将我们的文字内容作为该属性的值，方便之后伪元素获取到对应的文字</p>\n<h2> @keyframes 部分</h2>\n<hr>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里我们设置了两个 keyframes，分别为 <strong>「animation-before」</strong> 、<strong>「animation-after」</strong></p>\n<p>想必已经很明显了，前者是准备给我们后面的伪元素 before 使用的 ；后者是给我们后面的伪元素 after 使用的</p>\n<p>那么其中用到的 clip-path 是干什么用的呢？这个是 css3 的一个新属性，叫做「蒙版」，而其中的 inset() 值表示的是蒙版形状为矩形</p>\n<p>我们来看一下它的用法</p>\n<p>首先 inset() 接收四个长度参数，分别表示蒙版距离元素标签的「上侧」、「右侧」、「下侧」 、「左侧」的距离，从而决定了蒙版的大小</p>\n<p>当我们设置为 inset(0 0 0 0)时，表示蒙版作用区域大小跟元素标签一样大，如下图所示（红色边框表示蒙版的作用区域）</p>\n<figure><figcaption></figcaption></figure>\n<p>此时我们的文字是可以完全展示出来的，因为蒙版的作用区域就是我们标签元素的大小</p>\n<p>然后我们再来看一下，如果我们的设置为 inset(30px 0 0 0) ，则测试表示，蒙版的作用区域距离标签元素的上侧 30px，距离其它的边 0px，如图所示</p>\n<figure><figcaption></figcaption></figure>\n<p>图中蓝色边框的部分不是蒙版的作用区域，因此我们无法看到该区域的内容，真实情况如下图所示</p>\n<figure><figcaption></figcaption></figure>\n<p>在了解了蒙版的使用情况了以后，我们就通过 @keyframes 来设置逐帧动画，使蒙版的作用区域在垂直方向一直变化，实现上下抖动的效果，代码就如上所述</p>\n<h2> <strong>具体样式</strong></h2>\n<hr>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里，我们设置了两个伪元素 before 和 after，分别定位到跟父元素同样的位置，然后分别向左、右侧移一点点的距离，制作一个错位的效果，然后都将背景色设置为与父元素背景色一样的颜色，用于遮挡父元素。</p>\n<p>然后设置了蒙版垂直变化动画以后，被蒙版遮挡的部分虽然看不到了，但是会露出下面一层的父元素内容，这样就可以实现了一个完美的故障风格的文字展示动画了。</p>\n",
      "date_published": "2022-05-26T07:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "纯 CSS3 卡通小火车行驶动画",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/CSS/3.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/CSS/3.html",
      "summary": "效果预览 代码实现 HTML 代码 &lt;div class=\"center\"&gt; &lt;div class=\"mountains\"&gt;&lt;/div&gt; &lt;div class=\"train\"&gt; &lt;div class=\"engine-front\"&gt; &lt;div class=\"chimney\"&gt; &lt;div class=\"smoke\"&gt;&lt;/div&gt; &lt;div class=\"smoke smoke-2\"&gt;&lt;/div&gt; &lt;div class=\"smoke smoke-3\"&gt;&lt;/div&gt; &lt;div class=\"smoke smoke-4\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"engine-body\"&gt;&lt;/div&gt; &lt;div class=\"compartment\"&gt; &lt;div class=\"compartment-window\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"compartment compartment-two\"&gt; &lt;div class=\"compartment-window\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"compartment compartment-three\"&gt; &lt;div class=\"compartment-window\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"wheel-holder\"&gt; &lt;div class=\"wheel\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-2\"&gt; &lt;div class=\"wheel-joint\"&gt;&lt;/div&gt; &lt;div class=\"wheel-joint wheel-joint-2\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"wheel wheel-3\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-4\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-5\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-6\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-7\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-8\"&gt;&lt;/div&gt; &lt;div class=\"wheel wheel-9\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"bridge\"&gt;&lt;/div&gt; &lt;/div&gt;",
      "content_html": "<h2> 效果预览</h2>\n<hr>\n<figure><img src=\"https://s2.loli.net/2022/10/04/fNRBLuaT4OqV3XJ.gif\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h2> 代码实现</h2>\n<hr>\n<p><strong>HTML 代码</strong></p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>HTML 代码的结构非常清晰，总体来讲分两部分，一部分是作为背景的明月、高山以及星空，对应的 CSS 类为<code>mountains</code>；另一部分则是行驶的火车，对应的 CSS 类为<code>train</code>。</p>\n<p>对于火车部分则相对比较复杂，有车头、引擎、轨道、车轮、车厢等元素，下面的 CSS 代码中会一一讲解。</p>\n<p><strong>CSS 代码</strong></p>\n<p>背景部分绘制了两座高山，一轮明月以及清澈的星空。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>然后就是火车轨道的桥梁部分，也十分简单。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在后面就是本动画的主体部分小火车了，其每一部分都有对应的 CSS 类来描述，请看代码：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>到这里为止，我们已经用 HTML 和 CSS 代码将整个小火车以及周围的环境都绘制出来了。</p>\n<p>那么最重要的一步便是让这辆小火车在桥梁上行驶起来，这就要用到 CSS3 的一些动画属性了，CSS3 的动画帧闪亮登场</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这些动画中做了几件事情。</p>\n<p>第一，让车厢盖子上下拍动，让动画小火车行驶的样子更加逼真。</p>\n<p>第二，利用滤镜，非常生动地描绘出了小火车行驶过程中蒸汽机引擎冒出的蒸汽。</p>\n<p>第三，让小火车整体在桥梁上周而复始地行驶，车轮也不停的转动。</p>\n",
      "image": "https://s2.loli.net/2022/10/04/fNRBLuaT4OqV3XJ.gif",
      "date_published": "2022-10-04T09:19:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Nginx常用的基础配置（web前端相关方面）",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Nginx/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Nginx/1.html",
      "summary": "基础配置 user root; worker_processes 1; events { worker_connections 10240; } http { log_format '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent ' '\"$http_referer\" \"$http_user_agent\"'; include mime.types; default_type application/octet-stream; sendfile on; #autoindex on; #autoindex_exact_size off; autoindex_localtime on; keepalive_timeout 65; gzip on; gzip_disable \"msie6\"; gzip_min_length 100; gzip_buffers 4 16k; gzip_comp_level 1; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; gzip_types \"*\"; gzip_vary off; server_tokens off; client_max_body_size 200m; server { listen 80 default_server; server_name _; return 403 /www/403/index.html; } include ../serve/*.conf; }",
      "content_html": "<h2> 基础配置</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 隐藏 Nginx 版本信息</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 禁止 ip 直接访问 80 端口</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 启动 web 服务 (vue 项目为例)</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> PC 端和移动端使用不同的项目文件映射</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 一个 web 服务，配置多个项目 (location 匹配路由区别)</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 配置负载均衡</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> SSL 配置 HTTPS</h2>\n<hr>\n<div class=\"language-nginx line-numbers-mode\" data-ext=\"nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-04-20T11:22:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Nginx"
      ]
    },
    {
      "title": "前端必备知识之Nginx复盘总结",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Nginx/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Nginx/2.html",
      "summary": "作为一个前端开发，我们可能平时或多或少的都接触过Nginx，但是可能也因为平时我们并不需要自己去对他进行一些必要的配置导致我们需要对其进行深入了解，但是实际如果你在工作的业余时间也会开发自己的项目，你会发现，在很多场景下，nginx 对于我们有非常多的遍历，同时其性能比较高效，在国内的很多网站中实际都有使用，在了解他之前，我们需要对其有一些基本的认知，首先，我们需要知道 Nginx 是什么 首先Nginx是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。其是一款轻量级的 web 服务器、反向代理服务器、电子邮件服务器，实际在在设计之初Nginx的产品目的就是为了邮件服务而诞生的，特点是占有内存少、体积小、并发能力强、性能高，在日常开发过程中，很多场景下都使用到了他。",
      "content_html": "<p>作为一个前端开发，我们可能平时或多或少的都接触过<strong>Nginx</strong>，但是可能也因为平时我们并不需要自己去对他进行一些必要的配置导致我们需要对其进行深入了解，但是实际如果你在工作的业余时间也会开发自己的项目，你会发现，在很多场景下，nginx 对于我们有非常多的遍历，同时其性能比较高效，在国内的很多网站中实际都有使用，在了解他之前，我们需要对其有一些基本的认知，首先，我们需要知道</p>\n<h2> Nginx 是什么</h2>\n<hr>\n<p>首先<strong>Nginx</strong>是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。其是一款<strong>轻量级的 web 服务器</strong>、<strong>反向代理服务器</strong>、<strong>电子邮件服务器</strong>，实际在在设计之初<strong>Nginx</strong>的产品目的就是为了邮件服务而诞生的，特点是占有内存少、体积小、并发能力强、性能高，在日常开发过程中，很多场景下都使用到了他。</p>\n<h2> Nginx 有什么用</h2>\n<hr>\n<p>从大的地方来看，总结下来有三个特点：<strong>反向代理</strong>、<strong>负载均衡</strong>、<strong>动静分离</strong></p>\n<h4> 反向代理</h4>\n<p>反向代理是<strong>Nginx</strong>使用最多的一种场景了，假如我们开发的一个服务请求量较大，一台服务器已经无法承载了，我们需要扩容使用多台服务器，那么这个时候我么就需要加一层<strong>中间件</strong>来分配用户的请求，把用户的请求下发到不同的服务器，这个时候我们就可以使用<strong>Nginx</strong>来完成，当然这只是他的一个作用，在了解反向代理之前我们再来说说<strong>正向代理</strong>，有反必然有正。</p>\n<p>先说说反向代理，假设我们是一个用户，在上述场景中，不然增加多少台服务器，我们用户始终访问一个相同的域名，对于用户而言，其做的反向代理对用户是无感知的，这里的代理是<strong>Nginx</strong>中间件这一层把用户的请求代理到了我们的服务器上，同时他也是在服务端完成的，<strong>反向代理的过程，隐藏了真实的客户端。客户端请求的服务都被代理服务器代替来请求。</strong></p>\n<p>再说说正向代理，假设这样一个场景，在我们日常开发中应该经常会使用到 vpn 吧，公司的一些项目或者私有 git 或者一些内部的网站，我么需要登录 vpn 才能访问，其基本原理呢就是一个位于客户端和原始服务器之前的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并且指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端才能使用正向代理，我们登录 vpn 之后所有的请求将会通过 vpn 的这台服务器代理客户去访问某些资源或者网站，那么这台代理服务器将会是公司内部的白名单 ip，这样所有的请求都统一从这里进入，就实现了一个正向代理。如此一来呢，<strong>正向代理的过程呢就隐藏了真实的客户端，客户端请求的服务都被代理服务器代替来请求。</strong></p>\n<p>当然这里是在大型项目中才会用到的，对于我本人而言，作为一个个人开发者，我并没有多台服务器供其进行负载均衡或者去反向代理，那么对于我们用什么用呢？</p>\n<h4> 隐藏服务端口号</h4>\n<p>首先呢，我们有了自己的一台服务器后，大概率你也会有自己的域名，这个时候，我们假如有多个网站，那么大概率你会去创建自己的二级域名，这个时候我们想要部署多个网站的时候，很可能变成了*<strong>*192.xx.xx.xx:888</strong>[1]<strong>、 ***<strong>192.xx.xx.xx:999</strong>[2]<strong>这样，假如你是一个前端，还部署了多个</strong>Node</strong>这样的项目的时候，那么你肯定会遇到这样的问题，我们知道一个服务器，正常每一个端口都是单独的，不能共享【也有特殊场景，比如 socketio 提供的双工通讯可以让 http 和 ws 使用同一个端口】，我们想要通过二级域名去区分不同的服务就需要将其解析到不同的二级域名中，我们知道默认打开一个网站的时候不加端口的情况下、<strong>http 对应 80 端口</strong>、<strong>https 对应 443 端口</strong>，正常情况下云厂商也都是默认开启这两个端口的，所以我们在使用<strong>Nginx</strong>的时候，只需要监听<strong>80 和 443 端口</strong>，判断访问的域名地址，将其转发到不同的端口下面（具体配置最后放上），那么我们作为一个个人用户，就可以在这种场景下实现不需要加上难看的端口号了，所有的请求都会通过<strong>80、443</strong>代理到我们真实的服务端口。</p>\n<h4> 部署前端项目</h4>\n<p>因为其也是一个静态 web 服务器，部署我们前端的项目非常简单，相信很多人如果尝试自己去部署，使用<strong>Nginx</strong>是十分简单的，下载，安装，运行，指定默认目录，前端项目拖进去就能访问了，这个步骤比较简单，就不过多说明了，这也是我们前端可以用到的一种场景。</p>\n<h4> 负载均衡</h4>\n<p>说完反向代理，我们再来看看负载均衡就很好理解了，在上述场景中，假如我们使用了三台服务器，客户端发送来请求之后我们把请求发给谁呢，总不能虽然有三台服务器，我们都转给其中一台吧，明显很不合理，为了保证我们的性能最大化，负载均衡的意思呢就是会合理的把客户端的请求分配给服务器，我们默认呢就等比例分配，可以理解为 1:1:1，但是实际场景中，我们的服务器配置可能不同，可能有好有坏，所以这里有一个权重的概率，可以有我们自己配置哪台服务器多分配请求，哪一台少一点请求，这样的配置可以让服务器的性能得到最大化，合理分配请求将会使系统更为健壮稳固。</p>\n<h4> 动静分离</h4>\n<p>在我们的开发过程中呢，有的请求是需要动态的计算的，比如需要连接<strong>mysql</strong>数据库去增删查改，这些属于<strong>动</strong>，而对于前端的一些文件<strong>html、css、js</strong>等这些文件呢，实际并不需要后台处理，那么我们就可以通过<strong>动静分离的模式将其区分开</strong>，就可以将这些静态文件进行缓存操作，这样就可以提高效率了，当然在现在<strong>前后端分离的场景下</strong>这一点的实用性目前对我个人而言似乎还并不高，使用场景相对上面两点比较有限，这三点是其比较大的三点，小的地方还有很多细节，我们来通过配置来具体看看吧</p>\n<h2> Nginx 实战分析</h2>\n<hr>\n<p>在要使用前我们需要先进行下载，下载呢非常简单，如果您是<em>windows</em>，那么前去官网下载解压直接打开<em>exe</em>即可，<em>mac</em>的用户大多都有<strong>brew 包管理</strong>，我们只需要<code>brew search nginx</code>一行即可下载完成。</p>\n<p>使用呢非常简单，只需要在终端输入<code>nginx</code>即可启动成功，他默认使用的是<strong>8080 端口</strong>，所以我们启动成功后访问<strong>127.0.0.1:8080</strong>就可以看到经典的<strong>welcome nginx</strong>了，首先看到这个页面的时候我们作为前端的第一印象是什么呢，这个地址显示了一个网页，那么肯定这个网页是他自带的，其此，如果我们改了内容是不是就会显示自己的东西了呢，再者那么我们把自己的项目替换成他的这个文件是不是就可以访问我们自己项目了呢，当然如此，前端的很多项目部署其实非常简单，我们把自己项目拖到这个文件的地址就覆盖掉他了，但是我们怎么知道这个文件在什么目录，什么地址呢，那我们就得看看配置信息了。</p>\n<p>在终端输入 <code>nginx -t</code>就可以显示具体信息了</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样我们可以看到<strong>nginx 的配置文件地址已经当前的配置文件是否合规可以使用</strong>如果你的配置文件有错误，这里也会提示你，那么我们可以<strong>cd 到配置目录</strong>然后看看它的默认配置，我们可以直接<code>open .</code>或者<code>cat nginx.conf</code>都可以查看默认配置，如下，</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里的配置太多了，为了简单点，删除了一部分我们暂时不需要的配置，然后我们来分析一下，</p>\n<h4> 监听端口 8080</h4>\n<p>首先我们知道其默认端口是<strong>8080</strong>同时呢我们刚也说了，浏览器只有<strong>80 和 443 端口才是不需要我们拼接的</strong>，所以正常情况我们也不想要端口号，所以，我们就只需要找到<strong>8080 将其替换成 80 即可</strong>，所以我们现在就知道了<strong>listen</strong>这个配置就是指我们要监听哪个端口号，改为<strong>80 之后</strong>我们访问服务就不需要再加端口了，可以直接访问<strong>127.0.0.1</strong>即可，当然我们现在访问是不可以的，<strong>因为 Nginx 修改完配置之后需要重载</strong>，我们可以停止再启动，或者更简单的<code>nginx -s reload</code>重载即可，具体的更多命令我们后面再说，重载完成之后我们访问就会发现是同样的效果，如果是在我们的服务器上，安装这里就不说了，去官网或者随便百度都可以找到，我们把域名解析到自己服务器，这个时候访问自己的域名不加端口就能访问到项目了，如果你还是个初学者，不太会<strong>linux</strong>的一系列命令，那么我推荐你使用<strong>xshell</strong>和<strong>sftp</strong>使用可视化工具直接对文件进行拖拽操作即可晚上上述步骤，那么第一步我们的网站其实这样就可以部署完成了，如果你没有域名，那么直接输入你的<strong>服务器 ip</strong>同样可以访问成功。</p>\n<h4> 如何一台服务器部署多个网站</h4>\n<p>作为我们个人开发者来说，我们大多数情况下只有一个服务器，但是我们还想部署多个项目，这个时候该怎么办呢，我们就需要下一项配置呢，为了让很多同学更方便理解，我们以前端来举例，我们在自己电脑下开发项目的时候，我们同时启动了前端项目假如在<strong>8080 端口</strong>，同时启动了后端<strong>node 项目的 3000</strong>端口，那么我们是不是就可以通过两个端口启动了两个服务，那么在我们的服务端也是同理，多个服务只需要运行在不同端口即可，在<strong>Nginx</strong>的配置中，我们只需要根据用户访问的地址来指向不同的端口就行，那么这个怎么配置呢，以我个人的网站来一段基本配置：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们发现如此简单，两行即可，监听 80 端口，当访问的域名是<strong><a href=\"http://chat.jiangly.com\" target=\"_blank\" rel=\"noopener noreferrer\">chat.jiangly.com</a></strong>的时候指向我们的 7000 端口，那么 7000 端口就是我们项目运行的真实端口，很明显呢这是一个后端<strong>node</strong>服务，这时候小伙伴有疑问了，如果我们是前端静态项目怎么办，我打了包了啊，好像没有端口了，直接访问了啊，那我哪来的这个<strong>proxy_pass 呢</strong>，也很简单：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们发现<strong>proxy_pass</strong>变成了<strong>root</strong>，<strong>root</strong>呢指向了一个地址，那么我们就把自己项目放这个地址就行了，原来前端的项目这么简单啊，这一下，我们就可以一下部署好多网站啦，既可以访问前端这种静态网站，也可以配置<strong>node 项目这种带端口的啦</strong>，这下服务器想部署多少项目不是都可以了么。如果小伙伴没有域名的话呢 <strong>server_name</strong>就需要变成<strong>127.0.0.1 加上端口号或者项目地址</strong>了，比如<strong>127.0.0.1:7000</strong>、<strong>127.0.0.1/project1</strong>这样来区分项目。同时需要注意的是，这里使用的是相对路径<strong>是以我们 nginx -t 那里的配置文件 nginx.conf 那一层为对比的路径</strong>，记住地址别放错了文件，否则找不到哟</p>\n<h4> 使用 Https 服务</h4>\n<p>这个时候有兴趣的同学发现，那我这个没有<strong>https 认证好丑啊</strong>，还提示不安全，我也想要一个<strong>Https</strong>，那我们怎么办呢，前面说到，<strong>Https 对应的是 443 的端口</strong>，那我们直接监听 443 不就可以了么，在默认配置中，我们看见有监听<strong>443 端口但是注释了</strong>，我们之间打开，配置和<strong>80</strong>完全一样没有区别，我们直接三下五初二，保存，重载，发现，咦报错了，原来说我们没有证书啊，没错，<strong>Https 是需要证书的</strong>，这个证书呢需要收费，但是作为卑微的开发仔当然不愿意去花这个钱了呗，我个人呢是使用的<strong>腾讯云</strong>,小伙伴们可能使用的是其他厂商，但是肯定都会提供免费的证书供大家使用，<strong>去到域名管理的地方</strong>找到申请免费的<strong>Https 证书</strong>，<strong>腾讯云</strong>在我个人使用每次申请最多一分钟非常的快，完了之后下载会发现里面有很多的格式。我么要下载<strong>Nginx</strong>的格式，下载之后呢，打开里面会有很多文件，但我们只需要两个，<strong>crt 格式的和 key 格式的</strong>，然后我先放一个个人的基本配置</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>别的地方都是一样的我们不用关心，我们看到两个配置项，<strong>ssl_certificate_key</strong>、<strong>ssl_certificate</strong>后面分别对应了两个地址，那么这个地址呢就是我们刚下载的两个文件的地址，/对应的相对地址呢和上面相同，只需要配置这两个文件，其他地方都不用改变，然后重载，这个时候就可以访问<strong>https 服务了</strong>，这样一看我们的网站就很正规了呢，我们通过这么几个基础功能就实现了自己的网站部署，并且可以多网站、多域名、没端口、带证书等等功能，当然这还不够，我们还可以做更多的事情</p>\n<h4> Websocket 服务</h4>\n<p>我们去开发项目的时候可能会经常使用到<strong>websocket</strong>服务，如果还是这样的配置呢，我们会发现，请求被拦截掉了，这是为什么呢？其实是因为我们使用<strong>ws 服务</strong>的时候需要告诉<strong>nginx</strong>我们需要对协议进行升级，所以当你遇到这个问题的时候只需要增加两行配置即可</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果遇到这个问题，加上重载即可。</p>\n<h4> server 匹配规则</h4>\n<p>我们上面看到我们可以写很多组的<strong>server</strong>，那么<strong>Nginx</strong>是从上往下匹配的，当匹配到第一个之后就会立即退出，所以如果你遇到当你的配置怎么也不生效的时候，先看看是不是在上面被其他规则匹配到了。</p>\n<h4> history 路由模式、跨域、缓存、反向代理</h4>\n<p>当我们开发的前端项目例如<strong>vue</strong>时，路由通常会有两个选项，一个带**#<strong>的哈希路由一个不带，同时文档中还说了我们要使用，<strong>history</strong>就需要后端去改配置，实际这个在</strong>nginx<strong>就是简简单单的几行而已，我们只需要添加下面这几行，就可以使用</strong>history 路由了**，同时还有设置一些静态格式文件的缓存，设置跨域访问等等都是简单的配置就可以了</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 负载均衡</h4>\n<p>我们可以基于<strong>upstream 模块</strong>来做负载均衡，也就是设置权重以及配置地址</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们可以看到四个服务都是我们本机，正式的生产场景中呢，我们其实应该是别的服务器的<strong>ip 地址</strong>，一般<strong>nginx 会独立部署到一台服务器</strong>，其他的服务会部署在其他服务器，所以在这样的场景下，我们需要这多台服务器在一个内网环境中，否则如果走公网，那么就会白白增加耗时，这里是我们需要了解的点。</p>\n<p>上述场景呢是我为大家总结的一些常用场景，其实<strong>Nginx</strong>还有其他许许多多的更细致的功能，例如，压缩，服务错误的优雅降级等等功能，如果有兴趣或者真实需要用到的时候再去查阅文档吧，毕竟这玩意儿记太多配置可就有点占用咱们大脑的宝贵内存了。</p>\n<h2> 常用指令</h2>\n<hr>\n<p>说了上面那么多了，为大家总结几个常用指令供大家使用吧</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">nginx -s reopen</td>\n<td style=\"text-align:left\">重启 Nginx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nginx -s reload</td>\n<td style=\"text-align:left\">重新加载配置文件，优雅重启 推荐使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nginx -s stop</td>\n<td style=\"text-align:left\">强制停止</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nginx -s quit</td>\n<td style=\"text-align:left\">安全退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nginx -t</td>\n<td style=\"text-align:left\">检测配置文件地址 以及检测配置是否正常</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nginx -v</td>\n<td style=\"text-align:left\">显示版本信息并退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">killall nginx</td>\n<td style=\"text-align:left\">杀死所有 nginx 进程</td>\n</tr>\n</tbody>\n</table>\n<p>上述呢就是一些常用的基本命令了，更多命令呢平时用的较少了，需要再去查询吧，大部署的后端指令呢都是 -s 表示发射命令的意思，记住这些常用命令就足够我们日常使用了。</p>\n<h2> 总结</h2>\n<hr>\n<p>这里为大家从 0 开始分析了一些<strong>Nginx</strong>的具体使用场景和操作，省略了一些较为基础的部分，这是一份保姆级教程，如果你正想使用或对其有兴趣不妨自己动手试试吧。</p>\n",
      "date_published": "2023-04-07T11:22:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Nginx"
      ]
    },
    {
      "title": "8个你可能不知道的 HTML 实用技巧",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/HTML/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/HTML/1.html",
      "summary": "今天要介绍的这些 HTML 技巧，绝对会让你大吃一惊！ 1. 使用 capture 属性打开设备摄像头 正如input标签具有email、text和password属性一样，我们也可以通过一些属性打开移动设备的摄像头以捕获图像。 那就是capture属性，属性值有两个： user用于前置摄像头 environment用于后置摄像头",
      "content_html": "<p>今天要介绍的这些 HTML 技巧，绝对会让你大吃一惊！</p>\n<h2> 1. 使用 capture 属性打开设备摄像头</h2>\n<hr>\n<p>正如<code>input</code>标签具有<code>email</code>、<code>text</code>和<code>password</code>属性一样，我们也可以通过一些属性打开移动设备的摄像头以捕获图像。</p>\n<p>那就是<code>capture</code>属性，属性值有两个：</p>\n<ul>\n<li><code>user</code>用于前置摄像头</li>\n<li><code>environment</code>用于后置摄像头</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 2. 网站自动刷新</h2>\n<hr>\n<p>你可以在<code>head</code>标签中将网站设置为定时刷新！</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此代码段可以实现每 10 秒刷新一次网站。</p>\n<h2> 3. 激活拼写检查</h2>\n<hr>\n<p>你可以使用 HTML 的<code>spellcheck</code>属性并将其设置为<code>true</code>以激活拼写检查。使用<code>lang</code>属性指定待检查的语言。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>这是一个标准属性，得到了大多数浏览器的支持。</p>\n<figure><figcaption></figcaption></figure>\n<h2> 4. 指定要上传的文件类型</h2>\n<hr>\n<p>你可以使用<code>accept</code>属性在<code>input</code>标签中指定允许用户上传的文件类型。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 5. 阻止浏览器翻译</h2>\n<hr>\n<p>将<code>translate</code>属性设置为<code>no</code>会阻止浏览器翻译该内容。如果你不想翻译某个短语或单词，例如 logo、公司或品牌名称，那就可以应用这个属性。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 6. 在 input 标签中输入多个项目</h2>\n<p>这可以通过<code>multiple</code>属性来完成。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>适用于文件和电子邮件。如果是电子邮件，则可以用逗号分隔。</p>\n<h2> 7. 为视频创建海报（缩略图）</h2>\n<hr>\n<p>使用<code>poster</code>属性，我们可以在视频加载时，或者在用户点击播放按钮之前，显示指定的缩略图。</p>\n<p>如果不指定图片，则默认使用视频的第一帧作为缩略图。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 8. 点击链接自动下载</h2>\n<hr>\n<p>如果你希望在单击目标资源的链接时下载特定资源，那就添加<code>download</code>属性。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-28T12:12:22.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "超酷的HTML5 3D旋转相册动画",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/HTML/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/HTML/2.html",
      "summary": "今天来教大家实现一个非常炫酷但又比较实用的 HTML5 3D 相册轮播动画。该相册动画有以下几个特点： 相册中的图片围成一个立体圆，并且沿着顺时针方向不停地循环转动。 每一张图片都有一个倒影的效果，更好地为相册呈现了 3D 视觉效果。 你也可以拖拽鼠标，实现相册的 360 度全景查看。 不仅支持图片，而且还支持 mp4 视频。 支持背景音乐播放。 先来看看最终效果吧！ 效果预览",
      "content_html": "<p>今天来教大家实现一个非常炫酷但又比较实用的 HTML5 3D 相册轮播动画。该相册动画有以下几个特点：</p>\n<ul>\n<li>相册中的图片围成一个立体圆，并且沿着顺时针方向不停地循环转动。</li>\n<li>每一张图片都有一个倒影的效果，更好地为相册呈现了 3D 视觉效果。</li>\n<li>你也可以拖拽鼠标，实现相册的 360 度全景查看。</li>\n<li>不仅支持图片，而且还支持 mp4 视频。</li>\n<li>支持背景音乐播放。</li>\n</ul>\n<p>先来看看最终效果吧！</p>\n<h2> 效果预览</h2>\n<hr>\n<figure><figcaption></figcaption></figure>\n<h2> 代码实现</h2>\n<p><strong>HTML 代码</strong></p>\n<p>HTML 中并不需要复杂的元素，总的来说，页面上构建一个容器，这个容器中用来定义相册中的图片以及视频元素，干净利落，代码如下：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>CSS 代码</strong></p>\n<p>对于 CSS 代码，我们不做太多的解释，这里最主要的就是对图片或者视频元素的样式渲染，特别是实现了阴影的 3D 效果以及鼠标滑过时的发光特效：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>JavaScript 代码</strong></p>\n<p>这个相册插件有一个比较好的是，你可以在 JS 中定义部分全局参数，从而更好地做一些个性化配置，例如相册圆半径大小、旋转速度等等：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>相册初始化时候的动画特效：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>鼠标拖拽相册时，需要 360 度全景查看，这里对鼠标事件进行了处理，主要是 mousedown、mousemove 和 mouseup：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后，我们还得要支持鼠标滚轮缩放，当我们滚动鼠标滚轮时，相册的半径会随着改变：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>到这里为止，我们的 HTML5 3D 相册的制作过程就全部完成了。</p>\n",
      "date_published": "2023-04-17T12:12:22.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "仅用 1 个标签，实现抖音 Logo~",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/HTML/3.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/HTML/3.html",
      "summary": "先上结果，最终实现效果如下： 还原度应该还可以吧？ 抖音 Logo 结构 想要用 CSS 来画抖音的 Logo，前提要先了解它的构造，一定是一些几何图形的拼接组合，因为之前很多业界大佬已经扒过抖音的 Logo 的结构了，我就拿来借用一下： 好的，有点复杂，简化一下，其实就是 4 个部分",
      "content_html": "<p>先上结果，最终实现效果如下：</p>\n<figure><figcaption></figcaption></figure>\n<p>还原度应该还可以吧？</p>\n<h2> 抖音 Logo 结构</h2>\n<hr>\n<p>想要用 CSS 来画抖音的 Logo，前提要先了解它的构造，一定是一些几何图形的拼接组合，因为之前很多业界大佬已经扒过抖音的 Logo 的结构了，我就拿来借用一下：</p>\n<figure><figcaption></figcaption></figure>\n<p>好的，有点复杂，简化一下，其实就是 <code>4</code> 个部分</p>\n<figure><figcaption></figcaption></figure>\n<p>每个颜色划出来的区域代表一个部分，所以最后是：<code>1/4圆环</code> + <code>半圆</code> + <code>长条矩形</code> + <code>半径略大一些的1/4圆环</code></p>\n<h2> 制作思路</h2>\n<hr>\n<p>回到本文标题，有人要说我标题党了，这 <code>logo</code> 都划分成四个部分了，你怎么用一个标签搞定呢？就算你用 <code>::before</code> 和 <code>::after</code>，也加上标签本体一共也就三个部分</p>\n<p>而且！抖音的 <code>logo</code> 是有两层的：</p>\n<figure><figcaption></figcaption></figure>\n<p>​ 抖音 logo</p>\n<p>可以看到，是一个青色的音符和一个红色的音符叠加的</p>\n<p>所以！ 这么多元素，你怎么用一个标签完成呢？而且还说带动画，是不是逗我们玩呢？</p>\n<p>好了，别急，咱们先捋一下思路哈：</p>\n<ul>\n<li>\n<p>先从元素的大方向开始思考：</p>\n</li>\n<li>\n<ul>\n<li>需要实现一个黑色背景（需要一个标签）</li>\n<li>两个音符叠加（\"黑色背景\"已经是一个标签了，那两个音符只能是两个伪元素）</li>\n</ul>\n</li>\n<li>\n<p>再从元素的小细节着手突破：</p>\n</li>\n<li>\n<ul>\n<li>需要在一个伪元素中一笔画出整个音符图案（容我思考一下...）</li>\n</ul>\n</li>\n</ul>\n<p>如何在一个伪元素中一笔画出整个音符图案呢？</p>\n<p>💡 想到办法了，超级简单，给大家演示一下</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption></figcaption></figure>\n<p>别骂了，别骂了，刚刚跟大家开了个小玩笑，正文走起！</p>\n<p>我们肯定是要用到 <code>background</code> 属性的，不然哪来的色块啊，去扒一下 MDN 文档：</p>\n<figure><figcaption></figcaption></figure>\n<p>都不用想了，只有一个 <code>background-image</code> 有用，那再具体看看：</p>\n<figure><figcaption></figcaption></figure>\n<p>划重点了！同学们，<code>background-image</code> 支持为一个元素设置一个或多个图像，来看一下其支持哪些图像类型：</p>\n<figure><figcaption></figcaption></figure>\n<p>看了语法，发现基本上 <code>&lt;image&gt;</code> 类型支持的都是直接设置图片的，唯独有一个支持渐变函数的，例如：<code>linear-gradient</code>、<code>repeating-linear-gradient</code>、<code>radial-gradient</code>、<code>conic-gradient</code> ...</p>\n<p>什么是渐变函数呢？根据它们的单词名字可以知道，支持了 线性、径向（其实就是圆）、锥形 的颜色渐变。我们用前两个就可以满足抖音 <code>logo</code> 的构造了</p>\n<p>因为根据 MDN 上的解释，我们是可以使用多个渐变函数来控制元素的背景图像的，多个值用 <code>,</code> 隔开，例如官方的例子：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>用个比较形象的比喻，<code>background-image</code> 就像我们写字一样，写字需要一笔一划写，而 <code>background-image</code> 中 <code>,</code> 隔开的每一个值就像每一个笔画，这些值共同组成了一个 \"图像\"</p>\n<p>那我们就可以借助这些函数来画出抖音的 logo 了</p>\n<h2> 开搞开搞</h2>\n<hr>\n<p>先来测量一下抖音 logo 中 音符 的长宽比，为了等会给音符留出一定的空间</p>\n<figure><figcaption></figcaption></figure>\n<p>​ 音符宽高比</p>\n<p>特地用截图工具圈出了红色音符的部分，得到的宽高是 <code>248 * 285</code>，计算一下宽高比就约等于 <code>248/285 = 0.87</code>，那我们就要在中间留出一个宽高比为 <code>0.87</code> 的矩形位置给音符</p>\n<h3> 打地基</h3>\n<hr>\n<p>那就先打地基！</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里需要解释一下 <code>padding</code> 的值的设定，<code>20px</code> 是我随便设置的一个边距大小，既然顶部和底部都是 <code>20px</code>，而且本身整体元素的宽高比又不是 <code>1:1</code>（整体不是正方形），那为了视觉上的居中和整体宽高的 <code>1:1</code>，我们需要将左右边距增大至整体宽度与高度相等</p>\n<p>因此 <code>100px / 0.87</code> 拿到的就是整体的高度，再乘以 <code>0.13</code> 拿到的就是宽高的差值，因为要平均分到两边，所以还要除以 <code>2</code></p>\n<p>现在妥妥是个正方形了，当前的效果：</p>\n<figure><figcaption></figcaption></figure>\n<p>​ 地基打好了</p>\n<p>这里为了让等会的音符只在图中的那块儿区域绘制，我们给外部容器设置一下 <code>display: grid</code>，等会还需要借助 <code>grid</code> 布局的能力</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 画 1/4 圆环</h3>\n<hr>\n<p>如何画圆环？用一个简单的例子来演示一下：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们就得到了一个这样的图形：</p>\n<figure><figcaption></figcaption></figure>\n<p>怎么得到这样的 <code>1/4圆环</code> 的呢？我们把样式拆解一下：</p>\n<h5> <code>100% 100% at 100% 100%</code>：</h5>\n<p>at 的左侧 表示圆（或椭圆）在横向、竖向的半径长度；at 的右侧 表示圆形在坐标轴上的位置</p>\n<p>那对应到这个图上就是：</p>\n<figure><figcaption></figcaption></figure>\n<h5> <code>transparent 0 50%</code></h5>\n<p><code>radial-gradient()</code> 函数除了第一个参数，其余的参数都表示 颜色及渐变程度</p>\n<p>因此 <code>transparent 0 50%</code> 表示从 圆心 开始到 半径为一半长度的位置 颜色为 透明</p>\n<p>这里怕大家看不出来，我把 <code>transparent</code> 改成 <code>blue</code>，放效果图给大家看：</p>\n<figure><figcaption></figcaption></figure>\n<h5> <code>red 50% 100%</code></h5>\n<p>原理同上一个，从半径为 <code>50%</code> 的位置一直到半径为 <code>100%</code> 的部分，显示红色</p>\n<p>效果图为：</p>\n<figure><figcaption></figcaption></figure>\n<p>其实只有 黄色箭头 所指出的这个区域是我们代码造成的，那为什么一直到正方形的左上角都是红色呢？因为<code>radial-gradient()</code> 函数需要最后设置一个 <code>color-stop</code>，请看下面</p>\n<h5> <code>transparent</code></h5>\n<p>这也是函数的最后一个参数，表示渐变以透明色 为结束，即从上一个位置（<code>red 50% 100%</code>）的结束位置开始一直到容器的边缘，都显示为透明</p>\n<p>现在再来看看效果：</p>\n<figure><figcaption></figcaption></figure>\n<p>这样一个 <code>1/4圆环</code> 就画好了</p>\n<p>那么回到我们的正文来</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在咱们存放音符的容器是一个宽高比为 <code>0.87</code> 的长方形，如果按照我们刚刚画矩形的代码来，最后出来的应该是这样的：</p>\n<figure><figcaption></figcaption></figure>\n<p>很明显，圆环的两端宽度不一致，此时我们可以利用 <code>background-size</code> 对其进行压缩，以此得到一个宽度一致的圆环，我摆烂了，懒得计算了，直接控制台微调吧</p>\n<figure><figcaption></figcaption></figure>\n<p>这下差不多等宽了，且大概是一个标准的 <code>1/4圆环</code>，然后咱们要把它放到左侧中间靠下一点的位置，代码如下：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有内味儿了，有没有？</p>\n<figure><figcaption></figcaption></figure>\n<h3> 画半圆</h3>\n<hr>\n<p>原理都相似，就放一个半圆的生成以及位移过程图吧：</p>\n<figure><figcaption></figcaption></figure>\n<p>代码如下，也不过多解释各种数值的意义了，因为我全是微调的：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 画长条</h3>\n<hr>\n<p>长条可能跟圆环和半圆不太一样，它用到的是 <code>linear-gradient()</code> 线性函数，我们也不搞花里胡哨的操作，就直接把整个区域都铺满颜色，然后通过横纵缩放得到一个长方形吧</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果过程动画如下：</p>\n<figure><figcaption></figcaption></figure>\n<h3> 画半径稍大一些的 1/4 圆环</h3>\n<hr>\n<p>再次略过讲解，直接看代码：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果图如下：</p>\n<figure><figcaption></figcaption></figure>\n<p>到此为止，一个音符就画好了，离成功只剩一步之遥</p>\n<h2> 拆分</h2>\n<hr>\n<p>刚刚咱们的代码时把 <code>::before</code> 和 <code>::after</code> 放在一起写的，其实现在是两个一模一样的音符完全重叠，而且现在两个音符的颜色也是一样的，我们来改造一下</p>\n<h3> 颜色通过变量获取</h3>\n<hr>\n<p>为了代码不冗余，咱们把刚才代码中所有的 <code>#08fff9</code> 用变量来获取，即 <code>#08fff9 =&gt; var(--color)</code></p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>并单独给 <code>::before</code> 和 <code>::after</code> 设置颜色变量</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除此之外，我们要移动其中一个音符，让两个音符不再重叠</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>看看效果</p>\n<figure><figcaption></figcaption></figure>\n<p>好了，但两个音符错位了，但是颜色的混合效果好像还没有，这时候要用到 <code>mix-blend-mode</code> 属性了，MDN 的定义就是使当前元素与其父元素的内容和背景以某种方式混合，支持的属性有些多，本文就不跳出去讲太多别的东西了，我直接在控制台一个个试过去，发现 <code>lighten</code>、<code>plus-lighter</code>、<code>screen</code> 都是能达到我们的效果的，不过具体作用我还不是很了解，日后可以学习一下</p>\n<p>请看尝试过程 👇</p>\n<figure><figcaption></figcaption></figure>\n<p>最后我们就设置下 <code>mix-blend-mode: lighten</code>吧</p>\n<p>wow！ 我们的 Logo 制作好啦！</p>\n<figure><figcaption></figcaption></figure>\n<h2> 加个动画</h2>\n<hr>\n<p>抖音怎么不能不抖？</p>\n<p>我们现在设置的是红色的音符向右向上偏移 <code>3%</code>，那我们现在就要这两个音符都抖起来，其实就是修改它们各自的偏移量。又要改造一下代码了！</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>请看效果：</p>\n<figure><figcaption></figcaption></figure>\n<p>​ 抖动效果</p>\n<p>本来还想把我写过的一个 [文字故障风]的效果加到这个 <code>Logo</code> 里的，一定很酷，但是有些无能为力，因为要给音符设置故障风效果，是要用到伪元素的，而现在音符本身已经是伪元素了，我不能脱离了我本文的标题 \"仅用一个 html 标签，实现带动画的抖音 Logo\" ，如果你感兴趣，可以下去自己加上，到时候记得艾特我，我也想看看效果</p>\n<p>想不到什么花里胡哨的动画了，最后再给大家表演一下 抖音 Logo 的 \"异变\" 吧</p>\n<p>准备好了吗？</p>\n<p>3~</p>\n<p>2~</p>\n<p>1~</p>\n<figure><figcaption></figcaption></figure>\n<p>异变的抖音 Logo</p>\n<p>哇！不得不说，太好看了！哈哈哈哈，其实实现原理也不难，我只是给元素加了个 <code>filter: invert(1);</code> 的属性</p>\n<h2> 最后</h2>\n<hr>\n<p>怎么样，我是不是没有标题党？确实是 仅用一个 HTML 标签，实现了一个带动画的抖音 Logo 吧？</p>\n",
      "date_published": "2023-01-28T12:12:22.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "你不知道的4个JavaScript API",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/1.html",
      "summary": "在本文中，将介绍一些鲜为人知但却非常有用的 API，如： Page Visibility API Web Share API Broadcast Channel API Internationalization API 我们将一起看看它们是什么，我们应该在哪里使用它们，以及如何使用它们。 Page Visibility API 这是一个鲜为人知的 web API，在JS 现状调查[1]中，它的认知度排名倒数第四。它可以让你知道用户何时离开了页面。准确地说，只要页面的可见性状态发生变化，无论是用户最小化、最大化窗口还是切换标签页，该 API 都会触发一个事件。",
      "content_html": "<p>在本文中，将介绍一些鲜为人知但却非常有用的 API，如：</p>\n<ul>\n<li><code>Page Visibility API</code></li>\n<li><code>Web Share API</code></li>\n<li><code>Broadcast Channel API</code></li>\n<li><code>Internationalization API</code></li>\n</ul>\n<p>我们将一起看看它们是什么，我们应该在哪里使用它们，以及如何使用它们。</p>\n<h2> Page Visibility API</h2>\n<hr>\n<p>这是一个鲜为人知的 web API，在<strong>JS 现状调查</strong>[1]中，它的认知度排名倒数第四。它可以让你知道用户何时离开了页面。准确地说，只要页面的可见性状态发生变化，无论是用户最小化、最大化窗口还是切换标签页，该 API 都会触发一个事件。</p>\n<p>在过去，你不得不使用一些噱头来了解用户是否切换了标签页或最小化了窗口。最流行的方式是使用<code>blur</code>和<code>focus</code>浏览器事件。使用这些事件会导致类似下面情况的发生：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>前面的代码可以工作，但是不符合预期。因为<code>blur</code>事件是在页面失去焦点时触发的，所以当用户点击搜索栏、<code>alert</code>对话框、控制台或窗口边框时，它就会被触发。所以，<code>blur</code>和<code>focus</code>只告诉我们页面是否被激活，但不告诉我们页面的内容是否被隐藏或显示。</p>\n<h3> 什么时候使用</h3>\n<p>一般来说，我们想要使用<code>Page Visibility API</code>，是希望用来停止不必要的程序。比如说当用户没有看到页面时，或者执行后台操作时。具体的场景可以是：</p>\n<ul>\n<li>当用户离开页面时暂停视频、图像旋转或动画；</li>\n<li>如果页面显示来自 API 的实时数据，在用户离开时暂时停止实时显示的行为；</li>\n<li>发送用户分析报告。</li>\n</ul>\n<h3> 如何使用</h3>\n<p><code>Page Visibility API</code>带来了两个属性和一个事件，用于访问页面可见性状态：</p>\n<ul>\n<li>\n<p><code>document.hidden</code>：该属性是全局可见并且只读。尽量避免使用该属性，因为现在已经被废弃了。当访问该属性时，如果页面是隐藏状态则返回<code>true</code>，如果页面是可见状态则返回<code>false</code>。</p>\n</li>\n<li>\n<p><code>document.visibilityState</code>：该属性是<code>document.hidden</code>更新后的版本。当访问该属性时，会根据页面的可见性状态返回四个可能的值：</p>\n</li>\n<li>\n<ul>\n<li><code>visible</code>：该页面是可见的，或者准确地说，它没有被最小化，也不在另一个标签页。</li>\n<li><code>hidden</code>：该页面不可见，它是最小化的，或者在另一个标签页。</li>\n<li><code>prerender</code>：这是一个可见页面在预渲染时的初始状态。一个页面的可见性状态可以从<code>prerender</code>开始，然后改变到另一个状态，但它不能从另一个状态改变到<code>prerender</code>。</li>\n<li><code>unloaded</code>：该页面正在从内存中卸载。</li>\n</ul>\n</li>\n<li>\n<p><code>visibilitychange</code>：这是一个由<code>document</code>对象提供的事件，当页面的<code>visibilityState</code>发生变化时被触发。</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>为了了解如何使用<code>Page Visibility API</code>，让我们用该特性来实现当用户离开页面时，暂停视频以及停止从 API 获取资源。首先，我将使用<code>vite.js</code>，它是一个快速启动新项目的神奇工具：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>当被要求选择一个框架时，选择<code>vanilla</code>来创建一个<code>vanilla</code>javascript 项目。完成之后，前往新文件夹，安装必要的<code>npm</code>包并启动开发服务器：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>打开<strong>localhost:3000/</strong>[2]，你将看到你的 Vite 项目启动和运行！</p>\n<p>vite-new-project.png</p>\n<p>首先，我们直接跳转到<code>/main.js</code>文件并删除所有样板代码。其次，打开<code>/index.html</code>，在<code>id</code>为<code>#app</code>的<code>div</code>标签内部添加一个<code>video</code>元素，上面可以添加你想添加的任意视频文件。这里我使用了一只正在跳舞的耀西。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>dancing-Yoshi.png</p>\n<p>回到<code>/main.js</code>，我们将向<code>document</code>对象添加一个事件监听器，用来监听<code>visibilitychange</code>事件。然后当页面显示或隐藏时，我们可以访问<code>document.visibilityState</code>属性的值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>你可以前往页面的控制台，当最小化窗口或者切换到另一个标签页时，查看页面可见性状态。现在，在事件监听器内部，我们可以检查<code>document.visibilityState</code>属性，当属性值为<code>hidden</code>时暂停视频，当属性值为<code>visible</code>时播放视频。当然，我们首先要使用<code>document.querySelector()</code>选择<code>video</code>元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，只要用户离开页面，视频就会停止。另一个使用<code>Page Visibility API</code>的场景是，当用户没有查看页面时，停止获取不必要的资源。为了看效果，我们将编写一个函数不间断地从<strong><a href=\"http://quotable.io\" target=\"_blank\" rel=\"noopener noreferrer\">quotable.io</a></strong>[3] API 获取随机引用，并当页面隐藏时暂停该行为。首先，我们将在<code>/index.html</code>创建一个新的<code>div</code>标签来存储引用。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>回到<code>/main.js</code>，我们使用<strong>Fetch API</strong>[4]发起对<code>quotable.io</code>端点**<a href=\"https://api.quotable.io/random**%5B5%5D\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.quotable.io/random**[5]</a> 的调用，然后将结果插入到<code>quote</code>div 中。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>让我们简单地解释一下此处发生了什么。首先我们从 DOM 中选中了<code>quote</code>元素。然后声明<code>getQuote</code>函数，该函数是一个异步函数，允许我们使用<code>await</code>关键字进行等待，直到从 API 中获取到数据。获取的数据是 JSON 格式的，因此我们再次使用<code>await</code>关键字来等待，直到数据被解析为 JavaScript 对象。</p>\n<p><code>quotable.io</code>的 API 为我们提供了<code>content</code>、<code>author</code>和<code>dateAdded</code>等属性，我们把这些属性注入并显示在<code>quote</code>div 中。这样做是没问题的，但是引用只会获取一次，因此我们可以使用<code>setInterval()</code>每 10 秒来调用一次函数。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果用户最小化窗口或者切换标签页，该页面仍然会获取引用，创建没有必要的网络加载。为了解决这个问题，在获取引用之前我们可以检查当前页面是否可见。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，我们只会在页面对用户可见的情况下获取引用。</p>\n<h3> 兼容性</h3>\n<p><strong>广泛支持</strong>[6]</p>\n<h2> Web Share API</h2>\n<hr>\n<h3> 这是什么</h3>\n<p><code>Web Share API</code>也是最不为人所知的 API 之一，但却非常有用。它可以让你访问操作系统的原生分享机制，这对移动端用户特别有用。有了这个 API，你可以分享文本、链接和文件，而不需要创建你自己的分享机制或使用第三方的分享机制。</p>\n<h3> 什么时候使用</h3>\n<p>用途已经不言自明。你可以用它将你的页面内容分享到社交媒体上，或将其复制到用户的剪贴板上。</p>\n<h3> 如何使用</h3>\n<p><code>Web Share API</code>赋予我们两个接口来访问用户的分享系统：</p>\n<ol>\n<li>\n<p><code>navigator.canShare()</code>：接受你想分享的数据作为参数，并根据其是否可分享，来返回一个布尔参数。</p>\n</li>\n<li>\n<p><code>navigator.share()</code>：返回一个<code>promise</code>，如果分享成功的话，该<code>promise</code>将会<code>resolve</code>。该接口会调用原生分享机制，并接收你想分享的数据作为参数。注意，它只能在用户按下链接或按钮时调用。也就是说，它需要<strong>transient activation</strong>[7]（瞬时激活）。分享数据是一个可以具有以下属性的对象：</p>\n</li>\n<li>\n<ul>\n<li><code>url</code>：要分享的链接</li>\n<li><code>text</code>：要分享的文本</li>\n<li><code>title</code>：要分享的标题</li>\n<li><code>files</code>：表示要分享的<code>File</code>对象数组</li>\n</ul>\n</li>\n</ol>\n<p>为了了解如何使用该 API，我们将回收先前的用例，做一个选项使用<code>Web Sharing API</code>来分享我们的引用。首先，我们必须在<code>/index.html</code>新增一个分享按钮：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>前往<code>/main.js</code>从 DOM 中选择分享按钮。然后，创建<code>async</code>函数来分享想要分享的数据。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，我们可以为<code>shareButton</code>元素添加<code>click</code>事件监听器，以此来调用<code>shareQuote</code>函数。<code>shareData.text</code>的值会是<code>quote.textContent</code>属性，<code>shareData.url</code>的值会是页面的 URL，也就是<code>location.href</code>属性。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在你可以通过你的原生操作系统与任何人分享你的引用。然而，需要注意的是，<code>Web Share API</code>只有在上下文安全的情况下才会起作用，也就是说，页面是通过<code>https://</code>或<code>wss://</code> URLs 提供的。</p>\n<h3> 兼容性</h3>\n<p><strong>基本不支持</strong>[8]</p>\n<h2> Broadcast Channel API</h2>\n<hr>\n<h3> 这是什么</h3>\n<p>我想谈论的另一个 API 是<code>Broadcast Channel API</code> 。它允许浏览器上下文互相发送和接收基本数据。浏览器上下文是指标签页、窗口、<code>iframe</code>等元素，或任何可以显示页面的地方。出于安全考量，浏览器上下文之间的通信是不被允许的，除非它们是同源的并使用<code>Broadcast Channel API</code>。对于两个同源的浏览器上下文，它们的 URL 必须有相同的协议（如<code>http/https</code>）、域（如<code>example.com</code>）和端口（如<code>:8080</code>）。</p>\n<h3> 什么时候使用</h3>\n<p><code>Broadcast Channel API</code>通常用于在不同的标签页和窗口之间保持页面状态同步，以提高用户体验或出于安全原因考虑。它也可以用来知道一个服务在另一个标签页或窗口中何时完成。使用场景有：</p>\n<ul>\n<li>在所有标签页上登录或注销用户。</li>\n<li>检测资源何时上传，并在所有页面中展示它。</li>\n<li>指示<code>service worker</code>做一些幕后工作。</li>\n</ul>\n<h3> 如何使用</h3>\n<p><code>Broadcast Channel API</code>涉及一个<code>BroadcastChannel</code>对象，该对象可用于向其他上下文发送信息。构造函数只有一个参数：作为标识符的字符串，该标识符从其他上下文连接到频道。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>一旦我们在两个上下文中创建了具有相同标识符的<code>BroadcastChannel</code>对象，这个新的<code>BroadcastChannel</code>对象将有两个可用的方法来开始进行通信：</p>\n<ul>\n<li>\n<p><code>BroadcastChannel.postMessage()</code>：在所有连接的上下文中发送消息。它接受任意类型的对象作为其唯一的参数，因此你可以发送各种各样的数据。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></li>\n<li>\n<p><code>BroadcastChannel.close()</code>：关闭通道，向浏览器表明它不会再收到任何信息，这样它就可以把这些信息收集到垃圾回收中。</p>\n</li>\n</ul>\n<p>为了接受信息，<code>BroadcastChannel</code>有一个<code>message</code>事件，我们可以使用<code>addEventListener</code>或其<code>onmessage</code>属性来监听。<code>message</code>事件有一个<code>data</code>属性，包含发送的数据和其他属性，以识别发送消息的上下文，如<code>origin</code>、<code>lastEventId</code>、<code>source</code>和<code>ports</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>让我们看看如何通过使用先前的例子来使用<code>Broadcast Channel API</code>。我们的目标是制作另一个具有同源的浏览器上下文，并在两个上下文中展示相同的引用。为了做到这一点，我们将创建一个名为<code>new-origin</code>的新文件夹，里面有一个新的<code>/index.html</code>和<code>/main.js</code>文件。</p>\n<p><code>/new-origin/index.html</code>将是一个新的 HTML 模板，里面有一个<code>#quote</code>div：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在<code>/new-origin/main.js</code>文件中，我们将创建一个新的<code>broadcast channel</code>，并从 DOM 中选择<code>#quote</code>元素：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在先前的<code>/main.js</code>文件中，我们将创建新的<code>BroadcastChannel</code>对象，并连接到<code>\"quote_channel\"</code>。我们还将修改<code>getQuote</code>函数，将引用作为消息发送到其他上下文。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>回到<code>/new-origin/main.js</code>文件，我们将监听<code>message</code>事件并在每次发送新的引用时改变<code>quote.innerHTML</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在你可以看到<code>http://localhost:3000/new-origin/</code>中的引用是如何变化为<code>http://localhost:3000</code>中的引用的。你也可以注意到，当<code>http://localhost:3000</code>标签被隐藏时，引用并没有改变，因为它只在其页面可见性状态为可见时才会去获取引用。</p>\n<h3> 兼容性</h3>\n<p><strong>广泛支持</strong>[9]</p>\n<h2> Internationalization API</h2>\n<hr>\n<h3> 这是什么</h3>\n<p>在开发一个网页或应用程序时，需要将其内容翻译成其他语言以覆盖更广泛的受众是非常常见的。然而，仅仅将你的网页文本翻译成你所需要的任何语言，并不足以使你的内容对讲该语言的人可用，因为像日期、数字、单位等东西在不同国家是不同的，可能会给你的用户带来困惑。</p>\n<p>我们假设你想在你的网页上展示日期\"2022 年 11 月 8 日\"，就像\"11/8/22\"。根据读者所在的国家，这些数据可以用三种不同的方式来阅读：</p>\n<ul>\n<li>\"11/8/2022\"或美国用户的 MM/DD/YY。</li>\n<li>\"8/11/2022\"或欧洲和拉美用户的 DD/MM/YY。</li>\n<li>\"2011/8/22\"或日本、中国和加拿大用户的 YY/MM/DD。</li>\n</ul>\n<p>这就是<code>Internationalization API</code>（或<code>I18n API</code>）来解决不同语言和地区的格式问题的地方。<code>I18n API</code>是一个了不起的工具，有多种用途，但我们不会深入研究，以免使本文过于复杂。</p>\n<h3> 如何使用</h3>\n<p><code>I18n API</code>使用<code>locale</code>标识符来起作用。<code>locale</code>标识符是一个字符串，用来表示用户的语言、城市、地区、方言以及其他偏好。准确的说，<code>locale</code>标识符是一个字符串，由连字符分隔的子标签组成。子标签代表了用户偏好，比如语言、国家、地区或文字，并以以下方式格式化：</p>\n<ol>\n<li><code>\"zh\"</code>：中文（语言）；</li>\n<li><code>\"zh-Hant\"</code>：用繁体字（文字）书写的中文（语言）；</li>\n<li><code>\"zh-Hant-TW\"</code>：在台湾（地区）使用的繁体字（文字）书写的中文（语言）。</li>\n</ol>\n<p>还有更多的子标签来解决更多用户的偏好（如果你想了解更多，你可以查看<strong>RFC</strong>[10]对语言标签的定义），但简而言之，<code>I18n API</code>使用这些<code>locale</code>标识符来知道如何格式化所有语言敏感的数据。</p>\n<p>更确切地说，<code>I18n API</code>提供了一个<code>Intl</code>对象，它带来了一堆专门的构造函数来处理对语言敏感的数据。在我看来，一些对国际化最有用的<code>Intl</code>构造函数是：</p>\n<ul>\n<li><code>Intl.DateTimeFormat()</code>：用于格式化日期和时间。</li>\n<li><code>Intl.DisplayNames()</code>：用于格式化语言、地区和文字显示名字。</li>\n<li><code>Intl.Locale()</code>：用于构建和操作<code>locale</code>标识符标签。</li>\n<li><code>Intl.NumberFormat()</code>：用于格式化数字。</li>\n<li><code>Intl.RelativeTimeFormat()</code>：用于格式化相对时间描述。</li>\n</ul>\n<p>在我们的例子中，我们将重点关注<code>Intl.DateTimeFormat()</code>构造函数，以根据用户的区域设置来格式化引用的<code>dateAdded</code>属性。<code>Intl.DateTimeFormat()</code>构造函数接收两个参数：定义日期格式约定的<code>locale</code>字符串和用于自定义日期格式的<code>options</code>对象。</p>\n<p>创建的<code>Intl.DateTimeFormat()</code>对象有一个<code>format()</code>方法，它接收两个参数：我们要格式化的<code>Date</code>对象和用于自定义如何显示格式化日期的<code>options</code>对象。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意：在<code>Intl.DateTimeFormat</code>构造函数的<code>options</code>参数中，我们将<code>timeZone</code>属性设置为<code>\"UTC\"</code>，这样日期就不会被格式化为用户的当地时间。在我的例子中，没有<code>timeZone</code>的选项，日期被解析为 \"10/23/2022\"。</p>\n<p>正如你所看到的，<code>dateTime.format()</code>根据<code>locale</code>的日期格式约定改变日期。我们可以使用<code>navigator.language</code>全局属性在引用的日期上实现这一行为，该全局属性具有用户的首选<code>locale</code>设置。为此，我们将创建一个新的函数，接收一个日期字符串（YYYY-MM-DD 格式），并根据用户的<code>locale</code>返回格式化的日期。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们可以在<code>getQuote()</code>函数中添加这个函数来解析<code>dateAdded</code>日期。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有了这个，我们的引用就被本地化为用户的首选语言了！在我的例子中，我的<code>navigator.language</code>值是<code>\"en\"</code>，所以我的日期被格式化为 MM/DD/YY。</p>\n<h3> 兼容性</h3>\n<p><strong>广泛支持</strong>[11]</p>\n<h2> 总结</h2>\n<hr>\n<p>读完这篇文章后，你现在可以灵活地了解这些 API 的存在以及如何使用它们。尽管它们在 JS 现状调查中的认知度排名最后，但它们非常有用，知道如何使用它们肯定会提高你的开发经验。这些强大的 API 并不为人所知，这意味着还有一些你我都不知道的有用的 API，所以现在是探索并找到那个可以简化你的代码，并为你节省大量开发时间的 API 的最佳时机。</p>\n<h3> 参考资料</h3>\n<p>[1]JS 现状调查:<a href=\"https://2021.stateofjs.com/en-US/features/\" target=\"_blank\" rel=\"noopener noreferrer\">https://2021.stateofjs.com/en-US/features/</a></p>\n<p>[2]localhost:3000/:<a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3000/</a></p>\n<p>[3]<a href=\"http://quotable.io\" target=\"_blank\" rel=\"noopener noreferrer\">quotable.io</a>:<a href=\"https://github.com/lukePeavey/quotable\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/lukePeavey/quotable</a></p>\n<p>[4]Fetch API:<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API%5B5%5Dhttps://api.quotable.io/random:https://api.quotable.io/random\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API[5]https://api.quotable.io/random:https://api.quotable.io/random</a></p>\n<p>[6]广泛支持:<a href=\"https://caniuse.com/pagevisibility\" target=\"_blank\" rel=\"noopener noreferrer\">https://caniuse.com/pagevisibility</a></p>\n<p>[7]transient activation:<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Transient_activation\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.mozilla.org/en-US/docs/Glossary/Transient_activation</a></p>\n<p>[8]基本不支持:<a href=\"https://caniuse.com/web-share\" target=\"_blank\" rel=\"noopener noreferrer\">https://caniuse.com/web-share</a></p>\n<p>[9]广泛支持:<a href=\"https://caniuse.com/mdn-api_broadcastchannel_name\" target=\"_blank\" rel=\"noopener noreferrer\">https://caniuse.com/mdn-api_broadcastchannel_name</a></p>\n<p>[10]RFC:<a href=\"https://datatracker.ietf.org/doc/html/rfc5646\" target=\"_blank\" rel=\"noopener noreferrer\">https://datatracker.ietf.org/doc/html/rfc5646</a></p>\n<p>[11]广泛支持:<a href=\"https://caniuse.com/internationalization\" target=\"_blank\" rel=\"noopener noreferrer\">https://caniuse.com/internationalization</a></p>\n",
      "date_published": "2023-04-08T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "阿里面试——如何用 js 实现瀑布流布局",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/10.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/10.html",
      "summary": "作者：zt_ever https://juejin.cn/post/7216200378341589052 前言 瀑布流布局，是现在比较流行的一种页面布局方式，即多行等宽元素排列，等宽不等高，后面的元素依次添加到前一行最矮的元素下方。",
      "content_html": "<blockquote>\n<p>作者：zt_ever</p>\n<p><a href=\"https://juejin.cn/post/7216200378341589052\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7216200378341589052</a></p>\n</blockquote>\n<h2> 前言</h2>\n<hr>\n<blockquote>\n<p>瀑布流布局，是现在比较流行的一种页面布局方式，即<code>多行等宽</code>元素排列，<code>等宽不等高</code>，后面的元素<code>依次</code>添加到<code>前一行最矮</code>的元素<code>下方</code>。</p>\n</blockquote>\n<p>它可以有效的降低页面的复杂度，节省很多的空间；并且，瀑布流的参差不齐的排列方式，可以通过界面展示给用户多条数据，并且让用户可以有向下浏览的冲动，提供了很好的用户体验！例如淘宝的页面就采用了这种布局方式，给大家看看<strong>淘宝的瀑布流布局的效果图</strong>（手机端）以及<strong>我们要实现的效果图</strong>（PC 端）吧~</p>\n<figure><figcaption>淘宝的瀑布流布局的效果图（手机端）</figcaption></figure>\n<figure><figcaption>淘宝的瀑布流布局的效果图（PC端）</figcaption></figure>\n<h2> 思路准备</h2>\n<hr>\n<p>通过了解瀑布流布局的方式，我们来梳理一下实现它的步骤，方便我们代码的编写。</p>\n<p>1、首先我们需要准备<strong>很多张图片</strong>（我这准备的是 40 张），还有<strong>vscode</strong>开发工具。</p>\n<p>2、编写<strong>前端</strong>代码，给图片<strong>添加样式</strong>让图片<strong>等宽并同行</strong>显示。</p>\n<p>3、编写<strong>js</strong>代码，要知道<strong>第一行图片数量</strong>，<strong>下一张图片的序号</strong>以及<strong>前一行最矮的元素的序号</strong>，还有<strong>摆放的位置</strong>。</p>\n<h2> 正文</h2>\n<hr>\n<h3> 一、前端代码编写</h3>\n<blockquote>\n<p>1、首先我们定义一个<strong>container</strong>容器来装<strong>所有图片</strong>，在这个容器中用<strong>box</strong>容器装<strong>box-img</strong>容器再装入<strong>每张图片</strong>，这样方便之后样式的编写。</p>\n</blockquote>\n<blockquote>\n<p>2、使图片<strong>同行</strong>显示--给 box 容器使用<strong>float:left;属性</strong>。</p>\n</blockquote>\n<blockquote>\n<p>3、让图片<strong>等宽</strong>显示--给 box-img 容器设置 width:150px;<strong>，img 标签设置</strong>width:100%;继承父容器 box-img 高度的 100%。</p>\n</blockquote>\n<blockquote>\n<p>4、为了使效果更好看，我们给装图片的容器设置<strong>内边距，边框和阴影</strong>的效果。</p>\n</blockquote>\n<p>前端完整代码附上：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 二、js 代码编写</h3>\n<h4> 1、首先用 window.onload=function(){}来实现页面加载完毕后立即执行的功能</h4>\n<p>在这个函数中，我们调用<strong>imgLocation('container','box')函数</strong>来呈现最终效果，传入的实参是<strong>父容器</strong>'container'以及装图片的<strong>子容器</strong>'box'。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2、实现 imgLocation()函数功能</h4>\n<h5> 1）首先我们得<code>获取所有要摆放的图片</code>，并将其存入一个<code>数组</code>中</h5>\n<p>利用 document.getElementById(parent)得到父容器；</p>\n<p>调用<strong>getChildElement(cparent,content)方法</strong>，在这个方法中，先获取<strong>父容器所有标签</strong>，对所有标签<strong>遍历</strong>并用 if 条件语句<strong>得到类名为 box 的容器</strong>（装图片的容器），将其<strong>存入</strong>我们自己构建的一个<strong>数组</strong>中，返回值为这个数组，方便之后通过遍历来操作图片摆放的位置。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 2）得到这个<code>数组</code>后，找出<code>从谁开始</code>是需要<code>被摆放</code>位置的</h5>\n<p>我们采用以下方法：</p>\n<p>首先获取<strong>视窗的宽度</strong>和<strong>每张图片的宽度</strong>，将两者<strong>相除</strong>并<strong>向下取整</strong>可得到<strong>第一行</strong>可以放置图片的数量，自然也就知道了我们需要<strong>操作</strong>的那张图片的<strong>序号</strong>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h5> 3）得到需要<code>被摆放</code>位置的图片序号后，确定其<code>摆放位置</code></h5>\n<p>我们自己定义一个<strong>存储高度的数组</strong>，对前一行元素的<strong>高度</strong>进行<strong>遍历</strong>并<strong>存入</strong>数组，当遍历到需要<strong>被摆放</strong>位置的图片时，用<strong>Math.min()方法</strong>获取前一行高度<strong>最矮</strong>的元素高度，并用<strong>indexOf()方法</strong>获取到其<strong>下标</strong>。</p>\n<p>再对我们<strong>所操作</strong>的这个图片容器的<strong>样式调整</strong>：\nposition：absolute;<strong>绝对定位</strong>， <strong>top 值</strong>设置为前一行高度最矮的图片高度<strong>minHeight</strong>，<strong>left 值</strong>设置为单张图片宽度<strong>乘</strong>这张图片的下标 minIndex。</p>\n<p>最后，不要忘啦，摆放好图片后，还要<strong>更新</strong>摆放的那一列的<strong>高度</strong>哟~</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最终整合一下就可以实现瀑布流的布局效果啦！</p>\n<h2> 最后</h2>\n<hr>\n<p>以上就是瀑布流布局的实现过程，看完本文如果觉得有用，记得支持一下，收藏起来说不定哪天就用上啦～文章可能有一些错误，欢迎评论指出，也欢迎一起讨论。</p>\n",
      "date_published": "2023-05-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "能不能写出这 40 个单行代码， 直接体现一个人的基础水平！！！",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/11.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/11.html",
      "summary": "哈喽,大家好 我是XXXWeii👨🏻‍💻。今天给大家分享 40+ javascript比较好用且实用的一行代码, 让你不再 996. 数组 生成数组 当你需要要生成一个 0-99 的数组 方案 1 const createArr = (n) =&gt; Array.from(new Array(n), (v, i) =&gt; i); const arr = createArr(100); // 0 - 99 数组",
      "content_html": "<blockquote>\n<p>哈喽,大家好 我是<code>XXXWeii👨🏻‍💻。今天给大家分享 40+ </code>javascript<code>比较好用且实用的</code>一行代码, 让你不再 996.</p>\n</blockquote>\n<h2> 数组</h2>\n<hr>\n<h3> 生成数组</h3>\n<p>当你需要要生成一个 0-99 的数组\n方案 1</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>方案 2</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 打乱数组</h3>\n<p>当你有一个数组，你需要打乱这个数组的排序</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 数组去重</h3>\n<p>当你需要将数组中的所有重复的元素只保留一个</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 多数组取交集</h3>\n<p>当你需要取多个数组中的交集</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 查找最大值索引</h3>\n<p>但你需要找到一个数组中的最大值的索引</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 查找最小值索引</h3>\n<p>当你需要找到一个数组中的最小值的索引</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 找到最接近的数值</h3>\n<p>当你需要在一个数组中找到一个最接近的值</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 压缩多个数组</h3>\n<p>当你需要将多个数组压缩成一个数组</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 矩阵交换行和列</h3>\n<p>当你需要将一个矩阵的行和列进行互相交换</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 数字转换</h2>\n<hr>\n<h3> 进制转换</h3>\n<p>将 10 进制转换成 n 进制，可以使用 toString(n)</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>将 n 进制转换成 10 进制，可以使用 parseInt(num, n)</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 正则</h2>\n<hr>\n<h3> 手机号格式化</h3>\n<p>当你需要将手机号码格式化成 xxx-xxxx-xxxx 的形式</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 去除多余空格</h3>\n<p>当你需要将一段文本中的多个空格合并成一个空格</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> web</h2>\n<hr>\n<h3> 重新加载当前页面</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 滚动到页面顶部</h3>\n<p>如果你需要将页面翻到最顶部</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 元素滚动</h3>\n<p>如果你希望将一个元素顺滑的滚动到可视区域的起点</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果你希望将一个元素顺滑的滚动到可视区域的终点</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 检查当前是否 IE 浏览器</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 从给定文本中剥离 html</h3>\n<p>当你需要在某个文本中将里面的标签全部过滤掉</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 重定向</h3>\n<p>当你需要跳转到其他页面</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 文本粘贴</h3>\n<p>当你需要复制文本到粘贴板上</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 日期</h2>\n<hr>\n<h3> 判断日期是否为今天</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 日期转换</h3>\n<p>当你需要将日期转换为为 YYYY-MM-DD 格式</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 秒数转换</h3>\n<p>当你需要将秒数转换为 hh:mm:ss 格式</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 获取某年某月的第一天</h3>\n<p>当你需要获取某年某月的第一天</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 获取某年某月的最后一天</h3>\n<p>当你需要获取某年某月的最后一天</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 获取某年月份天数</h3>\n<p>当你需要获取某年某个月份的总天数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 函数</h2>\n<hr>\n<h3> 异步函数判断</h3>\n<p>判断一个函数是否属于异步函数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 数字</h2>\n<hr>\n<h3> 截断数字</h3>\n<p>当你需要将小数点后的某些数字截断而不取四舍五入</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 四舍五入</h3>\n<p>当你需要将小数点后的某些数字截断，并取四舍五入</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 补零</h3>\n<p>当你需要在一个数字 num 不足 len 位数的时候前面补零操作</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 对象</h2>\n<hr>\n<h3> 删除无效属性</h3>\n<p>当你需要删除一个对象中的属性值为 null 或 undefined 的所有属性</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 反转对象键值</h3>\n<p>当你需要将对象的键值对交换</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 字符串转对象</h3>\n<p>当你需要将一串字符串比如'{name: \"jack\"}'转换成对象时，直接使用 JSON.parse 将会报错。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 其他</h2>\n<hr>\n<h3> 比较两个对象</h3>\n<p>当你需要比较两个对象，js 的等于只能判断对象的地址是否相同，当地址不相同的时候无法判断两个对象的键值对是否一致。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 随机颜色生成</h3>\n<p>当你需要获取一个随机颜色</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 颜色格式转换</h3>\n<p>当你需要将 16 进制的颜色转换成 rgb</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 获取随机 ip</h3>\n<p>当你需要生成一个 ip 地址</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> uuid</h3>\n<p>当你需要生成一个 id</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 获取 cookie</h3>\n<p>当你需要将 cookie 转换成对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 强制等待</h3>\n<p>当你需要等待一段时间，但又不想写在 setTimeout 函数中，造成回调地狱</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>本文转载自：<a href=\"https://juejin.cn/post/7228449980108423224\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7228449980108423224</a> 作者：simple_lau</p>\n</blockquote>\n",
      "date_published": "2023-04-25T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "event loop、宏任务和微任务",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/12.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/12.html",
      "summary": "一、event loop、宏任务和微任务 首先推荐一个可以在线看代码流程的网站：loupe。 然后看下这个视频学习下：到底什么是 Event Loop 呢？",
      "content_html": "<h2> 一、event loop、宏任务和微任务</h2>\n<p>首先推荐一个可以在线看代码流程的网站：<a href=\"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\" target=\"_blank\" rel=\"noopener noreferrer\">loupe</a>。 然后看下这个视频学习下：<a href=\"https://www.bilibili.com/video/BV1oV411k7XY/?spm_id_from=333.788.recommend_more_video.-1\" target=\"_blank\" rel=\"noopener noreferrer\">到底什么是 Event Loop 呢？</a></p>\n<p>简单的例子：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>它的执行过程是这样的：</p>\n<figure><figcaption>event loop、宏任务和微任务</figcaption></figure>\n<p>Web APIs 会创建对应的线程，比如 setTimeout 会创建定时器线程，ajax 请求会创建 http 线程。。。这是由 js 的运行环境决定的，比如浏览器。</p>\n<p>看完上面的视频之后，至少大家画 Event Loop 的图讲解不是啥问题了，但是涉及到宏任务和微任务，我们还得拜读一下这篇文章：<a href=\"https://juejin.cn/post/6844903512845860872\" target=\"_blank\" rel=\"noopener noreferrer\">这一次，彻底弄懂 JavaScript 执行机制</a>。如果意犹未尽，不如再读下这篇非常详细带有大量动图的文章：<a href=\"https://juejin.cn/post/6969028296893792286#comment\" target=\"_blank\" rel=\"noopener noreferrer\">做一些动图，学习一下 EventLoop</a>。想了解事件循环和页面渲染之间关系的又可以再阅读这篇文章：<a href=\"https://juejin.cn/post/6844904165462769678\" target=\"_blank\" rel=\"noopener noreferrer\">深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）</a>。</p>\n<ul>\n<li>\n<p>每次 Call Stack 清空（即每次轮询结束），即同步任务执行完。</p>\n</li>\n<li>\n<p>都是 DOM 重新渲染的机会，DOM 结构有改变则重新渲染。</p>\n</li>\n<li>\n<p>然后再去触发下一次 Event loop。</p>\n</li>\n</ul>\n<p>宏任务：setTimeout，setInterval，Ajax，DOM 事件。 微任务：Promise async/await。</p>\n<p>两者区别：</p>\n<ul>\n<li>\n<p>宏任务：DOM 渲染后触发，如 setTimeout 、setInterval 、DOM 事件 、script 。</p>\n</li>\n<li>\n<p>微任务：DOM 渲染前触发，如 Promise.then 、MutationObserver 、Node 环境下的 process.nextTick 。</p>\n</li>\n</ul>\n<p>从 event loop 解释，为何微任务执行更早？</p>\n<ul>\n<li>\n<p>微任务是 ES6 语法规定的（被压入 micro task queue）。</p>\n</li>\n<li>\n<p>宏任务是由浏览器规定的（通过 Web APIs 压入 Callback queue）。</p>\n</li>\n<li>\n<p>宏任务执行时间一般比较长。</p>\n</li>\n<li>\n<p>每一次宏任务开始之前一定是伴随着一次 event loop 结束的，而微任务是在一次 event loop 结束前执行的。</p>\n</li>\n</ul>\n<h2> 二、Promise</h2>\n<p>关于这一块儿没什么好说的，最好是实现一遍 Promise A+ 规范，多少有点印象，当然面试官也不会叫你默写一个完整的出来，但是你起码要知道实现原理。</p>\n<blockquote>\n<p>关于 Promise 的所有使用方式，可参照这篇文章：<code>ECMAScript 6 入门 - Promise 对象</code>。\n手写 Promise 源码的解析文章，可阅读此篇文章：<code>从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节</code>。\n关于 Promise 的面试题，可参考这篇文章：<code>要就来 45 道 Promise 面试题一次爽到底</code>。</p>\n</blockquote>\n<p>手写 Promise</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实现一个 Promise.all：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、async/await 和 Promise 的关系</h2>\n<ul>\n<li>\n<p>async/await 是消灭异步回调的终极武器。</p>\n</li>\n<li>\n<p>但和 Promise 并不互斥，反而，两者相辅相成。</p>\n</li>\n<li>\n<p>执行 async 函数，返回的一定是 Promise 对象。</p>\n</li>\n<li>\n<p>await 相当于 Promise 的 then。</p>\n</li>\n<li>\n<p>try...catch 可捕获异常，代替了 Promise 的 catch。</p>\n</li>\n</ul>\n",
      "date_published": "2022-05-24T10:38:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "数据类型的判断",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/13.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/13.html",
      "summary": "一、基本数据类型 JS 中七种内置类型（null，undefined，boolean，number，string，symbol，object）又分为两大类型 两大类型： 基本类型：null，undefined,boolean,number,string,symbol 引用类型 Object：Array，Function，Date，RegExp 等 两大基本类型 二、数据类型的判断",
      "content_html": "<h2> 一、基本数据类型</h2>\n<hr>\n<p>JS 中七种内置类型（null，undefined，boolean，number，string，symbol，object）又分为两大类型</p>\n<h3> 两大类型：</h3>\n<ul>\n<li>基本类型：null，undefined,boolean,number,string,symbol</li>\n<li>引用类型 Object：Array，Function，Date，RegExp 等</li>\n</ul>\n<figure><figcaption>两大基本类型</figcaption></figure>\n<h2> 二、数据类型的判断</h2>\n<ul>\n<li>typeof:能判断所有值类型、函数。不可对 null、对象、数组进行精确判断，因为都返回<code>object</code>。</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>instanceof：能判断对象类型，不能判断基本数据类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。比如考虑以下代码：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其实现就是顺着原型链去找，如果能找到对应的 Xxxxx.prototype&nbsp; 即为 true&nbsp;。比如这里的 vortesnail&nbsp; 作为实例，顺着原型链能找到 Student.prototype&nbsp; 及 People.prototype&nbsp;，所以都为 true&nbsp;。</p>\n<ul>\n<li>Object.prototype.toString.call()：所有原始数据类型都是能判断的，还有 Error 对象，Date 对象等。</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在面试中有一个经常被问的问题就是：如何判断变量是否为数组？</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-05-23T13:42:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "原生JS实现轮播图",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/14.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/14.html",
      "summary": "原生 JS 实现轮播图 最近原生 js 都有些生疏了，所以用原生 js 写了个简单的轮播图练练手。 方法一：更改 src 属性 第一种实现方法是只用一个 img 元素，然后动态改变 src 属性实现轮播，轮播的时候只是简单的进行图片切换，没有设置动画。 HTML 代码： &lt;!DOCTYPE html5&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;SowingMap&lt;/title&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;link href=\"./style.css\" type=\"text/css\" rel=\"stylesheet\" /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;div class=\"FigureContainer\" id=\"FigureContainer\"&gt; &lt;ul type=\"none\" id=\"imgList\"&gt; &lt;li&gt;&lt;img id=\"picture\" src=\"imgs/1.jpg\" /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul type=\"none\" id=\"buttonList\"&gt; &lt;li class=\"curIndex\"&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div id=\"prev\"&gt;&lt;img src=\"imgs/icon-arrow-left.png\" /&gt;&lt;/div&gt; &lt;div id=\"next\"&gt;&lt;img src=\"imgs/icon-arrow-right.png\" /&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"sowingMap.js\" type=\"text/javascript\"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;",
      "content_html": "<h2> 原生 JS 实现轮播图</h2>\n<hr>\n<p>最近原生 js 都有些生疏了，所以用原生 js 写了个简单的轮播图练练手。</p>\n<h2> 方法一：更改 src 属性</h2>\n<hr>\n<p>第一种实现方法是只用一个 img 元素，然后动态改变 src 属性实现轮播，轮播的时候只是简单的进行图片切换，没有设置动画。</p>\n<p>HTML 代码：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>CSS 代码：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>js 代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 方法二：计算图片的位置</h2>\n<p>第二种是把所有图片都放在 html 框架中，然后用计算位置进行轮播，这种方法实现了动画切换\nHTML 代码：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>CSS 代码：</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>js 代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-03-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "上拉加载下拉刷新",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/15.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/15.html",
      "summary": "上拉加载下拉刷新 一、前言 下拉刷新和上拉加载这两种交互方式通常出现在移动端中 本质上等同于 PC 网页中的分页，只是交互形式不同 开源社区也有很多优秀的解决方案，如 iscroll、better-scroll、pulltorefresh.js 库等等 这些第三方库使用起来非常便捷 我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用",
      "content_html": "<figure><figcaption>上拉加载下拉刷新</figcaption></figure>\n<h2> 一、前言</h2>\n<hr>\n<p>下拉刷新和上拉加载这两种交互方式通常出现在移动端中</p>\n<p>本质上等同于 PC 网页中的分页，只是交互形式不同</p>\n<p>开源社区也有很多优秀的解决方案，如 <code>iscroll</code>、<code>better-scroll</code>、<code>pulltorefresh.js</code> 库等等</p>\n<p>这些第三方库使用起来非常便捷</p>\n<p>我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用</p>\n<h2> 二、实现原理</h2>\n<hr>\n<p>上拉加载及下拉刷新都依赖于用户交互</p>\n<p>最重要的是要理解在什么场景，什么时机下触发交互动作</p>\n<h3> 上拉加载</h3>\n<p>首先可以看一张图</p>\n<figure><figcaption>上拉加载下拉刷新原理</figcaption></figure>\n<p>上拉加载的本质是页面触底，或者快要触底时的动作</p>\n<p>判断页面触底我们需要先了解一下下面几个属性</p>\n<ul>\n<li><code>scrollTop</code>：滚动视窗的高度距离<code>window</code>顶部的距离，它会随着往上滚动而不断增加，初始值是 0，它是一个变化的值</li>\n<li><code>clientHeight</code>:它是一个定值，表示屏幕可视区域的高度；</li>\n<li><code>scrollHeight</code>：页面不能滚动时是不存在的，<code>body</code>长度超过<code>window</code>时才会出现，所表示<code>body</code>所有元素的长度</li>\n</ul>\n<p>综上我们得出一个触底公式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>简单实现</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 下拉刷新</h3>\n<p>下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作</p>\n<p>关于下拉刷新的原生实现，主要分成三步：</p>\n<ul>\n<li>监听原生 touchstart 事件，记录其初始位置的值，e.touches[0].pageY；</li>\n<li>监听原生 touchmove 事件，记录并计算当前滑动的位置值与初始位置值的差值，大于 0 表示向下拉动，并借助 CSS3 的 translateY 属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值；</li>\n<li>监听原生 touchend 事件，若此时元素滑动达到最大值，则触发 callback，同时将 translateY 重设为 0，元素回到初始位置</li>\n</ul>\n<p>举个例子：</p>\n<p><code>Html</code>结构如下：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>监听<code>touchstart</code>事件，记录初始的值</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>监听<code>touchmove</code>移动事件，记录滑动差值</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后，就是监听<code>touchend</code>离开的事件</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>从上面可以看到，在下拉到松手的过程中，经历了三个阶段：</p>\n<ul>\n<li>当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作</li>\n<li>下拉到一定值时，显示松手释放后的操作提示</li>\n<li>下拉到达设定最大值松手时，执行回调，提示正在进行更新操作</li>\n</ul>\n<h2> 三、案例</h2>\n<hr>\n<p>在实际开发中，我们更多的是使用第三方库，下面以<code>better-scroll</code>进行举例：</p>\n<p>HTML 结构</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实例化上拉下拉插件，通过 use 来注册插件</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>实例化<code>BetterScroll</code>，并传入相关的参数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意点：</p>\n<p>使用<code>better-scroll</code> 实现下拉刷新、上拉加载时要注意以下几点：</p>\n<ul>\n<li>wrapper 里必须只有一个子元素</li>\n<li>子元素的高度要比 wrapper 要高</li>\n<li>使用的时候，要确定 DOM 元素是否已经生成，必须要等到 DOM 渲染完成后，再 new BScroll()</li>\n<li>滚动区域的 DOM 元素结构有变化后，需要执行刷新 refresh()</li>\n<li>上拉或者下拉，结束后，需要执行 finishPullUp()或者 finishPullDown()，否则将不会执行下次操作</li>\n<li>better-scroll，默认会阻止浏览器的原生 click 事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置 click:true</li>\n</ul>\n<h3> 小结</h3>\n<p>下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节</p>\n",
      "date_published": "2022-03-09T11:16:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "浅拷贝和深拷贝",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/16.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/16.html",
      "summary": "浅拷贝和深拷贝 浅拷贝的实现： function shallowCopy(object) { // 只拷贝对象 if (!object || typeof object !== \"object\") return; // 根据 object 的类型判断是新建一个数组还是对象 let newObject = Array.isArray(object) ? [] : {}; // 遍历 object，并且判断是 object 的属性才拷贝 for (let key in object) { if (object.hasOwnProperty(key)) { newObject[key] = object[key]; } } return newObject; }",
      "content_html": "<h1> 浅拷贝和深拷贝</h1>\n<p>浅拷贝的实现：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>深拷贝的实现:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-03-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "函数防抖和节流",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/17.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/17.html",
      "summary": "函数防抖和节流 函数的防抖和节流在我们的工作中经常会用到，在面试中页经常出现，因此今天我们来聊聊防抖和节流 首先我们来看下面这张用竖线画成的图： \"函数防抖和节流!\" 这其中的每一条竖线都代表着一次函数调用(如鼠标 mousemove 事件,input 输入事件等)正常执行的时候,调用的频率很快.但有时,我们并不需要这么高的频率去调用这个函数.假如这是一个调用后台接口的操作,那么就容易造成网络堵塞,大大的增加服务器的压力 函数防抖的时候,每次调用事件都是在正常执行暂停后一段时间(等你歇菜了我再上) 函数节流的时候,则是每隔一定的时间间隔就触发一次(管你频率那么快,我就保持自己的节奏) 现在我们大致明白函数的防抖和节流是怎么一回事了,接下来我们就来具体的学习下它们",
      "content_html": "<h1> 函数防抖和节流</h1>\n<blockquote>\n<p>函数的防抖和节流在我们的工作中经常会用到，在面试中页经常出现，因此今天我们来聊聊防抖和节流</p>\n</blockquote>\n<p>首先我们来看下面这张用竖线画成的图：</p>\n<figure><figcaption>\"函数防抖和节流!\"</figcaption></figure>\n<p>这其中的每一条竖线都代表着一次函数调用(如鼠标 mousemove 事件,input 输入事件等)正常执行的时候,调用的频率很快.但有时,我们并不需要这么高的频率去调用这个函数.假如这是一个调用后台接口的操作,那么就容易造成网络堵塞,大大的增加服务器的压力 函数防抖的时候,每次调用事件都是在正常执行暂停后一段时间(等你歇菜了我再上) 函数节流的时候,则是每隔一定的时间间隔就触发一次(管你频率那么快,我就保持自己的节奏) 现在我们大致明白函数的防抖和节流是怎么一回事了,接下来我们就来具体的学习下它们</p>\n<h2> 防抖(debounce)</h2>\n<h3> 概念</h3>\n<p>在任务频繁触发的情况下,一个事件在被触发的一段时间后再执行回调,假如在这段时间内又被触发了,则重新开始计时。</p>\n<h3> 应用场景</h3>\n<p>防抖在我们的日常生活中,也是随处可见.就比如我们平时坐电梯的时候,总是要等到没有人进来了再一小会儿的工夫,电梯门才会关上.而在项目中,防抖的应用场景也是挺多的.当我们在一个搜索框输入内容进行远程搜索的时候,往往就是在我们停下输入的一小刻时间后.前台向服务器发起了请求来获得匹配的结果.我们甚至于可以将防抖的过程,看成一个英雄在技能读条,只有技能读条结束了,技能才能扔出来.要是中途被人打断了,那么下次又要重新读条了。</p>\n<h3> 简易版</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>我们先来看下没有防抖的效果:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>再来看一下加了防抖效果的代码:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>大家可以将代码 copy 到编辑器中运行一下看看效果,是不是加了防抖效果的用户体验会更好。</p>\n<h3> 函数版</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中<code>debounce</code>就是我们的核心防抖函数了</p>\n<h2> 节流(throttle)</h2>\n<h3> 概念</h3>\n<p>高频事件触发,但是在 n 秒内只会执行一次,会稀释函数的执行频率。</p>\n<h3> 应用场景</h3>\n<p>节流在生活中的实例,就比如看电影的时候,每秒有 24 帧.大概意思就是每一秒钟的电影,其实是给大家播放了 24 张连续的图片.帧数越高，电影看着就越流畅.但是当帧数达到一定的高度时,我们的肉眼已经是看不出区别了.而在项目当中的应用也较多,比如在滚动加载更多的时候,在监听滚动条位置的时候并不是用户每次滚动都要去监听滚动条的位置,而是例如在 1s 内不管滚动多少次,只监听一次滚动条的位置.假如将节流运用到游戏当中,那就相当于技能的 CD,CD 没到,你就是按坏了键盘,技能也放不出来。</p>\n<h3> 简易版</h3>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们先来看下普通的效果,可以看到控制台在疯狂输出:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>再来看下加了节流效果的,控制台每隔一段时间才会打印一次内容:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 定时器版本</h3>\n<p>使用定时器来达到节流的效果：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 时间戳版本</h3>\n<p>使用时间戳来达到节流的效果:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这个版本的时间戳节流当我们的鼠标移出监听区域的时候,即停止运行了</p>\n<h3> 定时器+时间戳版本</h3>\n<p>下面我们来个加强版本的,这个版本是结合了定时器和时间戳,在我们鼠标移出监听区域后,还会再执行一次函数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> react-hook 防抖和节流</h2>\n<p>防抖：</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>节流：</p>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>总结: 防抖和节流都是为了限制函数的执行频率,以优化函数触发频率过高导致的响应速度跟不上,延迟假死或卡顿的现象</p>\n<ul>\n<li>函数防抖:原理是维护一个计时器,在规定时间后执行回调.若在此期间再次触发,则重新开始计时</li>\n<li>函数节流:原理是判断是否达到规定时间</li>\n</ul>\n</blockquote>\n",
      "date_published": "2022-03-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "23个常用JavaScript知识点总结，你都会吗？",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/18.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/18.html",
      "summary": "最近重温了一遍红宝书，发现一些比较好玩的写法，很多东西日常都在用，但是发现还会有不一样的写法,结合一些日常工作中使用的方法，为大家总结一篇日常经常使用可能还不知道的点，希望对你能有所帮助： 一行代码完成结构加赋值 我们日常经常使用结构赋值，一般都是先结构，再赋值，当然我们也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！ let people = { name: null, age: null }; let result = { name: \"张三\", age: 16 }; ({ name: people.name, age: people.age } = result); console.log(people); // {\"name\":\"张三\",\"age\":16}###",
      "content_html": "<p>最近重温了一遍红宝书，发现一些比较好玩的写法，很多东西日常都在用，但是发现还会有不一样的写法,结合一些日常工作中使用的方法，为大家总结一篇日常经常使用可能还不知道的点，希望对你能有所帮助：</p>\n<h2> 一行代码完成结构加赋值</h2>\n<hr>\n<p>我们日常经常使用结构赋值，一般都是先结构，再赋值，当然我们也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 对基础数据类型进行解构</h2>\n<hr>\n<p>日常中我们应该用不到这样的场景，但是实际上我们也可以对基础数据类型解构</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 对数组解构快速拿到最后一项值</h2>\n<hr>\n<p>实际上我们是可以对数组解构赋值拿到<code>length</code>属性的，通过这个特性也可以做更多的事情。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 将下标转为中文零一二三...</h2>\n<hr>\n<p>日常可能有的列表我们需要将对应的 012345 转为中文的一、二、三、四、五...，在老的项目看到还有通过自己手动定义很多行这样的写法，于是写了一个这样的方法转换</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 判断整数的不同方法</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 通过 css 检测系统的主题色从而全局修改样式</h2>\n<hr>\n<p><code>@media</code>的属性<code>prefers-color-scheme</code>就可以知道当前的系统主题，当然使用前需要查查兼容性</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>javascript 也可以轻松做到</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 数组随机打乱顺序</h2>\n<hr>\n<p>通过<code>0.5</code>-<code>Math.random()</code>得到一个随机数，再通过两次<code>sort</code>排序打乱的更彻底,但是这个方法实际上并不够随机，如果是企业级运用，建议使用第二种洗牌算法</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 随机获取一个 Boolean 值</h2>\n<hr>\n<p>和上个原理相同，通过随机数获取，<code>Math.random()</code>的区间是<code>0-0.99</code>，用<code>0.5</code>在中间百分之五十的概率</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 把数组最后一项移到第一项</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 把数组的第一项放到最后一项</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 利用 set 数组去重</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> dom 节点平滑滚动到可是区域，顶部，底部</h2>\n<hr>\n<p>原生的<code>scrollTo</code>方法没有动画，类似于锚点跳转，比较生硬，可以通过这个方法会自带平滑的过度效果</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 获取随机颜色</h2>\n<hr>\n<p>日常我们经常会需要获取一个随机颜色，通过随机数即可完成</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 检测是否为空对象</h2>\n<hr>\n<p>通过使用 Es6 的<code>Reflect</code>静态方法判断他的长度就可以判断是否是空数组了，也可以通过<code>Object.keys()</code>来判断</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> Boolean 转换</h2>\n<hr>\n<p>一些场景下我们会将<code>boolean</code>值定义为场景，但是在 js 中非空的字符串都会被认为是<code>true</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 各种数组克隆方法</h2>\n<hr>\n<p>数组克隆的方法其实特别多了，看看有没有你没见过的！</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 比较两个时间大小</h2>\n<hr>\n<p>通过调用<code>getTime</code>获取时间戳比较就可以了</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 计算两个时间之间的月份差异</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 一步从时间中提取年月日时分秒</h2>\n<hr>\n<p>时间格式化轻松解决，一步获取到年月日时分秒毫秒，由于<code>toISOString</code>会丢失时区，导致时间差八小时，所以在格式化之前我们加上八个小时时间即可</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 判断一个参数是不是函数</h2>\n<hr>\n<p>有时候我们的方法需要传入一个函数回调，但是需要检测其类型，我们可以通过<code>Object</code>的原型方法去检测，当然这个方法可以准确检测任何类型。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 计算两个坐标之间的距离</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 检测两个 dom 节点是否覆盖重叠</h2>\n<hr>\n<p>有些场景下我们需要判断 dom 是否发生碰撞了或者重叠了，我们可以通过<code>getBoundingClientRect</code>获取到 dom 的<code>x1</code>,<code>y1</code>,<code>x2</code>,<code>y2</code>坐标然后进行坐标比对即可判断出来</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 判断是否是 NodeJs 环境</h2>\n<hr>\n<p>前端的日常开发是离不开 nodeJs 的，通过判断全局环境来检测是否是 nodeJs 环境</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 参数求和</h2>\n<hr>\n<p>之前看到有通过函数柯理化形式来求和的，通过<code>reduce</code>一行即可</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-04-09T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "this指向",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/19.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/19.html",
      "summary": "一、定义 函数的this关键字在JavaScript中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别 在绝大多数情况下，函数的调用方式决定了this的值(运行是绑定) this关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象 举个例子： function baz() { // 当前调用栈是：baz // 因此，当前调用位置是全局作用域 console.log(\"baz\"); bar(); // &lt;-- bar的调用位置 } function bar() { // 当前调用栈是：baz --&gt; bar // 因此，当前调用位置在baz中 console.log(\"bar\"); foo(); // &lt;-- foo的调用位置 } function foo() { // 当前调用栈是：baz --&gt; bar --&gt; foo // 因此，当前调用位置在bar中 console.log(\"foo\"); } baz(); // &lt;-- baz的调用位置",
      "content_html": "<h2> 一、定义</h2>\n<hr>\n<p>函数的<code>this</code>关键字在<code>JavaScript</code>中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别</p>\n<p>在绝大多数情况下，函数的调用方式决定了<code>this</code>的值(运行是绑定)</p>\n<p><code>this</code>关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象</p>\n<p>举个例子：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>同时，<code>this</code>在函数执行中，<code>this</code>一旦呗确定了，就不可以更改</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 二、绑定规则</h2>\n<hr>\n<p>根据不同的使用场景，<code>this</code>有不同的值，主要分为下面几种情况：</p>\n<ul>\n<li>默认绑定</li>\n<li>隐式绑定</li>\n<li>new 绑定</li>\n<li>显示绑定</li>\n</ul>\n<h3> 默认绑定</h3>\n<p>全局环境中定义<code>person</code>函数，内部使用<code>this</code>关键字</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述代码输出<code>Jenny</code>，原因是调用函数的对象在浏览器中为<code>window</code>,因此<code>this</code>指向<code>window</code>，所以输出<code>Jenny</code></p>\n<p>注意：</p>\n<p>严格模式下，不能将全局对象用于默认绑定，this 会绑定到<code>undefined</code>，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象</p>\n<h3> 隐式绑定</h3>\n<p>函数还可以作为某个对象的方法调用，这时<code>this</code>就指这个上级对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这个函数中包含多个对象，尽管这个函数是被最外层的对象调用，<code>this</code>指向的也只是它上一级的对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述代码中，<code>this</code>的上一级对象为<code>b</code>,<code>b</code>内部并没有<code>a</code>变量的定义，所以输出<code>undefined</code></p>\n<p>这里再举一个特殊情况</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>此时<code>this</code>指向的是<code>window</code>，这里的大家需要记住，<code>this</code>永远指向的是最后调用它的对象，虽然<code>fn</code>是对象<code>b</code>的方法，但是<code>fn</code>赋值给<code>j</code>时候并没有执行，所以最终指向<code>window</code></p>\n<h3> new 绑定</h3>\n<p>通过构建函数<code>new</code>关键字生成一个实例对象，此时<code>this</code>指向这个实例对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述代码之所以能过输出 1，是因为<code>new</code>关键字改变了<code>this</code>的指向</p>\n<p>这里在列举一些特殊情况：</p>\n<p><code>new</code>过程遇到<code>return</code>一个对象，此时<code>this</code>指向为返回的对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果返回一个简单类型的时候，则<code>this</code>指向实例对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注意的是<code>null</code>虽然也是对象，但是此时<code>new</code>仍然指向实例对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 显示修改</h3>\n<p><code>apply()、call()、bind()</code>是函数的一个方法，作用是改变函数的调用对象。它的一个参数就表示改变后的调用这个函数的对象。因此，这时<code>this</code>指的就是这第一个参数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、箭头函数</h2>\n<hr>\n<p>在 ES6 的语法中还提供了箭头函语法，让我们在代码书写时就能确定 <code>this</code> 的指向（编译时绑定）</p>\n<p>举个例子：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>虽然箭头函数的 this 能够在编译的时候就确定了<code>this</code>的指向，但也需要注意一些潜在的坑</p>\n<p>下面举个例子：</p>\n<p>绑定事件监听</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述可以看到，我们其实是想要<code>this</code>为点击的 button，但此时<code>this</code>指向了<code>window</code></p>\n<p>包括在原型上添加方法时候，此时<code>this</code>指向<code>window</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>同样的，箭头函数不能作为构建函数</p>\n<h2> 四、优先级</h2>\n<hr>\n<h3> 隐式绑定 VS 显式绑定</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>显然，显示绑定的优先级更高</p>\n<h3> new 绑定 VS 隐式绑定</h3>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看到，new 绑定的优先级&gt;隐式绑定</p>\n<p>new 绑定 VS 显式绑定</p>\n<p>因为<code>new</code>和<code>apply、call</code>无法一起使用，但硬绑定也是显式绑定的一种，可以替换测试</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>bar</code>被绑定到<code>obj1</code>上，但是<code>new bar(3)</code>并没有像我们预计的那样把<code>obj1.a</code>修改为 3。但是，<code>new</code>修改了绑定调用<code>bar()</code>中的<code>this</code></p>\n<p>我们可认为<code>new绑定优先级</code>&gt;<code>显式绑定</code></p>\n<p>综上，new 绑定优先级 &gt; 显示绑定优先级 &gt; 隐式绑定优先级 &gt; 默认绑定优先级</p>\n<h2> 五、apply、call、bind 实现</h2>\n<ul>\n<li>apply</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>call</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>bind</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 六、new 实现</h2>\n<ol>\n<li>\n<p>首先创一个新的空对象。</p>\n</li>\n<li>\n<p>根据原型链，设置空对象的 <code>__proto__</code> 为构造函数的 <code>prototype</code> 。</p>\n</li>\n<li>\n<p>构造函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）。</p>\n</li>\n<li>\n<p>判断函数的返回值类型，如果是引用类型，就返回这个引用类型的对象。</p>\n</li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-04-07T15:52:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "7个你必须知道的 JavaScript 简写技巧",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/2.html",
      "summary": "本文将介绍大量的 JavaScript 速记优化技巧，这些技巧可以帮助大家编写更好的代码。 1. 多个字符串检查 通常，如果我们需要检查字符串是否等于多个值中的一个，往往很快会觉得疲惫不堪。幸运的是，JavaScript 有一个内置的方法来帮助你解决这个问题。 // 普通写法 const isVowel = (letter) =&gt; { if ( letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\" ) { return true; } return false; }; // 简写方法 const isVowel = (letter) =&gt; [\"a\", \"e\", \"i\", \"o\", \"u\"].includes(letter);",
      "content_html": "<p>本文将介绍大量的 JavaScript 速记优化技巧，这些技巧可以帮助大家编写更好的代码。</p>\n<h2> 1. 多个字符串检查</h2>\n<hr>\n<p>通常，如果我们需要检查字符串是否等于多个值中的一个，往往很快会觉得疲惫不堪。幸运的是，JavaScript 有一个内置的方法来帮助你解决这个问题。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2. For-of 和 For-in 循环</h2>\n<hr>\n<p><code>For-of</code>和<code>For-in</code>循环是迭代<code>array</code>或<code>object</code>的好方法，因为无需手动跟踪<code>object</code>键的索引。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. Falsey（假值）检查</h2>\n<hr>\n<p>如果要检查变量是<code>null</code>、<code>undefined</code>、<code>0</code>、<code>false</code>、<code>NaN</code>还是空<code>string</code>，可以使用逻辑非 (<code>!</code>)运算符一次检查所有变量，而无需编写多个条件。这使得检查变量是否包含有效数据变得相对容易多了。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4. 三元运算符</h2>\n<hr>\n<p>作为 JavaScript 开发人员，你一定遇到过三元运算符。这是编写简洁<code>if-else</code>语句的好方法。但是，也可用来编写简洁的代码，甚至将它们链接起来来检查多个条件。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. 函数调用</h2>\n<hr>\n<p>在三元运算符的帮助下，你还可以根据条件确定要调用哪个函数。</p>\n<blockquote>\n<p>注：函数的<code>call signature</code>必须相同，否则可能会遇到错误。</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6. Switch 简写</h2>\n<hr>\n<p>通常我们可以使用以键作为<code>switch</code>条件并将值作为返回值的对象来优化长<code>switch</code>语句。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7. 回退值</h2>\n<hr>\n<p><code>||</code>运算符可以为变量设置回退值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>本文完，感谢阅读！</p>\n",
      "date_published": "2023-04-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "JavaScript数组的常用方法有哪些",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/20.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/20.html",
      "summary": "JavaScript数组的常用方法有哪些 一、操作方法 数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会 下面对数组常用的操作方法做一个归纳 增 下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生印象 push() unshift() splice() concat()",
      "content_html": "<figure><figcaption>JavaScript数组的常用方法有哪些</figcaption></figure>\n<h2> 一、操作方法</h2>\n<hr>\n<p>数组基本操作可以归纳为 增、删、改、查，需要留意的是哪些方法会对原数组产生影响，哪些方法不会</p>\n<p>下面对数组常用的操作方法做一个归纳</p>\n<p><b>增</b></p>\n<p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生印象</p>\n<ul>\n<li>push()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>concat()</li>\n</ul>\n<p>push()</p>\n<p><code>push()</code>方法接受任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>unshift()</p>\n<p><code>unshift()</code>在数组开头添加任意多个值，然后返回新的数组长度</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>splice()</p>\n<p><code>splice()</code>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>concat()</p>\n<p><code>concat()</code>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><b>删</b></p>\n<p>下面三种都会影响原数组，最后一项不影响原数组：</p>\n<ul>\n<li>pop()</li>\n<li>shift()</li>\n<li>splice()</li>\n<li>slice()</li>\n</ul>\n<p>pop()</p>\n<p><code>pop()</code>方法用于删除数组的最后一项，同时减少数组的 <code>length</code> 值，返回被删除的项</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>shift()</p>\n<p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的 <code>length</code> 值，返回被删除的项</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>splice()</p>\n<p><code>splice()</code>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>slice()</p>\n<p><code>slice()</code>用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><b>改</b></p>\n<p>即修改原来数组的内容，常用<code>splice</code></p>\n<p><code>splice()</code>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><b>查</b></p>\n<p>即查找元素，返回元素坐标或者元素值</p>\n<ul>\n<li>indexOf()</li>\n<li>includes()</li>\n<li>find()</li>\n</ul>\n<p>indexOf()</p>\n<p>返回要查找的元素在数组中的位置，如果没找到则返回-1</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>includes()</p>\n<p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>find()</p>\n<p>返回第一个匹配的元素</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 二、排序方法</h2>\n<hr>\n<p>数组有两个方法可以用来对元素重新排序：</p>\n<ul>\n<li>reverse()</li>\n<li>sort()</li>\n</ul>\n<p><b>reverse()</b></p>\n<p>顾名思义，将数组元素反向排列</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><b>sort()</b></p>\n<p>sort()方法接受一个比较函数，用于判断哪个值应该排在前面</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、转换方法</h2>\n<hr>\n<p>常见的转换方法有：</p>\n<p><b>join()</b></p>\n<p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 四、迭代方法</h2>\n<hr>\n<p>常用来迭代数组的方法（都不改变原数组）有如下：</p>\n<ul>\n<li>some()</li>\n<li>every()</li>\n<li>forEach()</li>\n<li>filter()</li>\n<li>map()</li>\n</ul>\n<p>some()</p>\n<p>对数组每一项都运行传入的函数，如果有一项函数返回 true ，则这个方法返回 true</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>every()</p>\n<p>对数组每一项都运行传入的函数，如果对每一项函数都返回 true ，则这个方法返回 true</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>forEach()</p>\n<p>对数组每一项都运行传入的函数，没有返回值</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>filter()</p>\n<p>对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>map()</p>\n<p>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-03-29T17:12:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "11个JavaScript 代码优化小技巧",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/3.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/3.html",
      "summary": "简介 主要介绍以下几点： 提炼函数 合并重复的条件片段 把条件分支语句提炼成函数 合理使用循环 提前让函数退出代替嵌套条件分支 传递对象参数代替过长的参数列表 少用三目运算符 合理使用链式调用 分解大型类 活用位操作符 纯函数 本文会不断更新，不足之处欢迎评论区补充。 1. 提炼函数 好处：",
      "content_html": "<h2> 简介</h2>\n<hr>\n<p>主要介绍以下几点：</p>\n<ul>\n<li>提炼函数</li>\n<li>合并重复的条件片段</li>\n<li>把条件分支语句提炼成函数</li>\n<li>合理使用循环</li>\n<li>提前让函数退出代替嵌套条件分支</li>\n<li>传递对象参数代替过长的参数列表</li>\n<li>少用三目运算符</li>\n<li>合理使用链式调用</li>\n<li>分解大型类</li>\n<li>活用位操作符</li>\n<li>纯函数</li>\n</ul>\n<p>本文会不断更新，不足之处欢迎评论区补充。</p>\n<h2> 1. 提炼函数</h2>\n<hr>\n<p>好处：</p>\n<ul>\n<li>避免出现超大函数。</li>\n<li>独立出来的函数有助于代码复用。</li>\n<li>独立出来的函数更容易被覆写。</li>\n<li>独立出来的函数如果拥有一个良好的命名，它本身就起到了注释的作用。</li>\n<li>语义化将多段分离的逻辑放在不同的函数中实现，可以使代码逻辑清晰，清楚的看到每一步在做什么。</li>\n</ul>\n<p><strong>代码举例：</strong></p>\n<p>实现获取数据，然后操作 dom 显示数据，最后添加事件</p>\n<p>函数提炼前</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>函数提炼后</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2. 合并重复的条件片段</h2>\n<hr>\n<p>如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散布了一些重复的代码，那么就有必要进行合并去重工作。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3. 把条件分支语句提炼成函数</h2>\n<hr>\n<p>复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致一个庞大的函数。有时可以将条件分支语句提炼成语义化的函数，使代码更加直观，逻辑清晰。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4. 合理使用循环</h2>\n<hr>\n<p>如果多段代码实际上负责的是一些重复性的工作，那么可以用循环代替，使代码量更少。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. 提前让函数退出代替嵌套条件分支</h2>\n<hr>\n<p>让函数变成<code>多出口</code>提前返回，替换<code>嵌套条件分支</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6. 传递对象参数代替过长的参数列表</h2>\n<hr>\n<p>函数参数过长那么就增加出错的风险，想保证传递的顺序正确就是一件麻烦的事，代码可读性也会变差，尽量保证函数的参数不会太长。如果必须传递多个参数的话，建议使用对象代替。</p>\n<p>一般来说，函数参数最好不要超过 3 个</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7. 少用三目运算符</h2>\n<hr>\n<p>三目运算符性能高，代码量少。</p>\n<p>但不应该滥用三目运算符，我们应该在简单逻辑分支使用，在复杂逻辑分支避免使用。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8. 合理使用链式调用</h2>\n<hr>\n<p><strong>优点：</strong></p>\n<p>链式调用使用简单，代码量少。</p>\n<p><strong>缺点：</strong></p>\n<p>链式调用带来的坏处就是在调试不方便，如果我们知道一条链中有错误出现，必须得先把这条链拆开才能加上一些调试 log 或者增加断点，这样才能定位错误出现的地方。</p>\n<p>如果该链条的结构相对稳定，后期不易发生修改，可以使用链式。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9. 分解大型类</h2>\n<hr>\n<p>大型类的分解和函数的提炼很像，类太大会出现逻辑不清晰，难以理解和维护的问题。</p>\n<p>合理的大类分解可以使类的逻辑清晰，且子模块可以方便复用。</p>\n<h2> 10. 活用位操作符</h2>\n<hr>\n<p>编程语言计算乘除的性能都不高，但是某些情况使用位操作符可以提升乘除等运算的性能。</p>\n<h2> 11. 纯函数</h2>\n<hr>\n<p>纯函数是指不依赖于且不改变它作用域之外的变量状态的函数。</p>\n<p>纯函数的返回值只由它调用时的参数决定，它的执行不依赖于系统的状态（执行上下文）。</p>\n<p>相同的输入参数，一定会得到相同的输出，也就是内部不含有会影响输出的随机变量。</p>\n<p><strong>不属于纯函数的特点：</strong></p>\n<ul>\n<li>更改文件系统</li>\n<li>往数据库插入记录</li>\n<li>发送一个 http 请求</li>\n<li>可变数据</li>\n<li>打印/log</li>\n<li>获取用户输入</li>\n<li>DOM 查询</li>\n<li>访问系统状态</li>\n</ul>\n<p><strong>纯函数的作用：</strong></p>\n<ul>\n<li>可靠性：函数返回永远和预期一致</li>\n<li>可缓存性：因为只要输入一样输出一定一样，因此可将输入作为 key，输出作为值，使用对象缓存已经计算的结果</li>\n<li>可移植性：因为没有外部依赖，所以移植到任何环境都可正确运行</li>\n<li>可测试性：方便针对函数做单元测试</li>\n<li>可并行性：对一些复杂计算，可以并行计算（例如使用 nodejs 多个子进程同时并行计算多个任务，提高计算速度）</li>\n</ul>\n<p><strong>应用场景：</strong></p>\n<ul>\n<li>工具函数最好使用纯函数</li>\n<li>多平台使用的代码（nodejs、浏览器、微信小程序、native 客户端等）</li>\n<li>相对独立的功能</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 12. 用映射代替重复逻辑分支</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-01-20T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "12 个非常实用的 JavaScript 函数",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/4.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/4.html",
      "summary": "生成随机颜色 你的网站是否需要生成随机颜色？下面一行代码就可以实现。 const generateRandomHexColor = () =&gt; `#${Math.floor(Math.random() * 0xffffff).toString(16)}`; console.log(generateRandomHexColor());",
      "content_html": "<h2> 生成随机颜色</h2>\n<hr>\n<p>你的网站是否需要生成随机颜色？下面一行代码就可以实现。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 数组重排序</h2>\n<hr>\n<p>对数组的元素进行重新排序是一项非常重要的技巧，但是原生 Array 中并没有这项功能。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 复制到剪切板</h2>\n<hr>\n<p>复制到剪切板是一项非常实用且能够提高用户便利性的功能。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 检测暗色主题</h2>\n<hr>\n<p>暗色主题日益普及，很多用的都会在设备中启用案模式，我们将应用程序切换到暗色主题可以提高用户体验度。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 滚动到顶部</h2>\n<hr>\n<p>将元素滚动到顶部最简单的方法是使用<code>scrollIntoView</code>。设置<code>block</code>为<code>start</code>可以滚动到顶部；设置<code>behavior</code>为<code>smooth</code>可以开启平滑滚动。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 滚动到底部</h2>\n<hr>\n<p>与滚动到顶部一样，滚动到底部只需要设置<code>block</code>为<code>end</code>即可。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 检测元素是否在屏幕中</h2>\n<hr>\n<p>检查元素是否在窗口中最好的方法是使用<code>IntersectionObserver</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 检测设备</h2>\n<hr>\n<p>使用<code>navigator.userAgent</code>来检测网站运行在哪种平台设备上。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 隐藏元素</h2>\n<hr>\n<p>我们可以将元素的<code>style.visibility</code>设置为<code>hidden</code>，隐藏元素的可见性，但元素的空间仍然会被占用。如果设置元素的<code>style.display</code>为<code>none</code>，会将元素从渲染流中删除。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 从 URL 中获取参数</h2>\n<hr>\n<p>JavaScript 中有一个 URL 对象，通过它可以非常方便的获取 URL 中的参数。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 深拷贝对象</h2>\n<hr>\n<p>深拷贝对象非常简单，先将对象转换为字符串，再转换成对象即可。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>除了利用 JSON 的 API，还有更新的深拷贝对象的 structuredClone API，但并不是在所有的浏览器中都支持。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 等待函数</h2>\n<hr>\n<p>JavaScript 提供了<code>setTimeout</code>函数，但是它并不返回 Promise 对象，所以我们没办法使用 <code>async</code> 作用在这个函数上，但是我们可以封装等待函数。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-04-05T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "编写干净 JavaScript 代码的15个小技巧",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/5.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/5.html",
      "summary": "我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 0. 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。",
      "content_html": "<p>我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。</p>\n<p>我们的源代码可读性越强，则：</p>\n<ul>\n<li>越容易维护</li>\n<li>新开发人员理解代码所需的时间越少</li>\n<li>越容易发现哪些代码可以重用</li>\n</ul>\n<p>在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。</p>\n<h2> 0. 命名</h2>\n<hr>\n<p>不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。</p>\n<p>如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。</p>\n<blockquote>\n<p>只有在你希望以后的开发人员需要猜测你现在的想法时，才简写或缩写名称。</p>\n</blockquote>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另外，不要在变量名或函数名中添加多余的不必要的字母。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 1. 条件句</h2>\n<hr>\n<p>避免否定条件语句。否定语句通常比肯定语句更难理解。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2. 函数应该专注做单一一件事</h2>\n<hr>\n<p>函数的平均行数不应超过 30 行（不包括空格和注释）。函数越小，则越容易理解和重构。你可以用函数修改或查询某些内容，但不能同时修改或查询。</p>\n<h2> 3. 使用默认参数</h2>\n<hr>\n<p>使用默认参数而不是短路或条件语句。</p>\n<p>默认参数通常比短路更干净。请记住，在你使用默认参数的时候，函数将只为未定义的参数提供默认值。其他虚假值，例如 ''、\"\"、false、null、0 和 NaN，不会被默认值替换。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4. 单级抽象（SLA）</h2>\n<hr>\n<p>在编写函数时，如果你有多个抽象级别，那么函数通常会做不止一件事情。将一个大的函数分成多个函数会使其更具可重用性，并且测试起来更容易。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. 不要忽略被捕获的异常</h2>\n<hr>\n<p>对捕获的异常错误不采取任何措施，即意味着不修复特定的错误也不对其做出反应。</p>\n<p>将错误记录到控制台(<code>console.log</code>)并没有好多少，因为记录经常会在控制台的其他内容中丢失。</p>\n<p>如果你在<code>try/catch</code>中包装了哪怕一点点代码，也意味着你认为那里可能会发生错误，因此你应该对何时发生错误有一个计划。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6. 尽量减少注释</h2>\n<hr>\n<p>仅注释具有业务逻辑复杂性的代码部分。</p>\n<p>注释不是必需的。好的代码大多数可以自我说明。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>“多余的注释就是谎言和错误信息的垃圾桶。” ——Robert C. Martin</p>\n</blockquote>\n<h2> 7. 移除注释掉的代码</h2>\n<hr>\n<p>不要在代码库中留下注释掉的代码，版本控制的存在是有原因的。将旧代码留在历史记录中。如果你需要的话，再从 git 历史记录中获取。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 8. 只导入你需要的</h2>\n<hr>\n<p>ES6 引入了解构。它可以将数组中的值或对象中的属性解包为不同的变量。你可以将其用于任何类型的对象或模块。</p>\n<p>例如，如果你只需要另一个模块中的<code>add()</code>和<code>subtract()</code>函数：</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>只导入需要在文件中使用的函数而不是整个模块，然后从中访问特定函数是有意义的。</p>\n<h2> 9. 保持函数参数不超过 3 个（理想情况下）</h2>\n<hr>\n<p>限制函数参数的数量非常重要，因为这样可以更轻松地测试函数。参数超过 3 个会导致需要测试大量不同的情况。</p>\n<p>1-3 个参数是最理想的情况，正常情况下，参数数量应避免任何超出此范围。</p>\n<p>通常，如果你有三个以上的参数，那么说明函数要做的事情太多了，违反 SRP（单一职责原则）。</p>\n<h2> 10. 使用数组展开来复制数组</h2>\n<hr>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 11. 写线性代码</h2>\n<hr>\n<p>嵌套的代码很难理解。所以我们应该尽可能地编写线性代码，这样的代码简单、干净、易于阅读和维护，使开发人员的工作更轻松。</p>\n<p>例如，在回调上使用<code>promise</code>可以大大提高可读性。</p>\n<h2> 12. 使用 ESLint 和 Prettier</h2>\n<hr>\n<p>始终使用<code>ESLint</code>和<code>Prettier</code>来强制跨团队和开发人员使用通用的编码风格。</p>\n<p>还可以尝试使用 JavaScript 的最新功能来编写代码，例如解构、展开运算符、异步等待、模板字面量、可选链等等。</p>\n<h2> 13. 适当使用括号</h2>\n<hr>\n<p>使用运算符时，请将它们括在括号中。唯一的例外是标准算术运算符：<code>+</code>、<code>-</code> 和 <code>**</code>，因为它们的优先级被广泛理解。强烈建议将 <code>/</code>、<code>*</code> 和 <code>%</code> 括在括号中，因为当它们一起使用时，其优先级可能会引起困惑。</p>\n<p>这不但提高了可读性，而且阐明了开发人员的意图。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>确保你的代码不会导致以下情况：</p>\n<figure><figcaption>图片</figcaption></figure>\n<h2> 14.早早地从函数中返回</h2>\n<hr>\n<p>为避免<code>if</code>语句的深层嵌套，始终尽可能早地返回函数的值。</p>\n<p>Bad 👎</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Good 👍</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这个特殊的例子甚至可以进一步改进：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>同理，同样的事情也可以应用于循环。</p>\n<p>大的循环肯定会消耗大量时间。这就是为什么你应该尽可能早地跳出循环。</p>\n<h2> 结论</h2>\n<hr>\n<p>开发社区中有一种说法，那就是我们应该在想象下一个开发人员是个连环杀手的鞭策下写代码。</p>\n<p>所以，好好学习这 15 个技巧，它们可以帮助你免于受到其他开发人员查看你的代码时会对你造成的伤害哦，哈哈。</p>\n",
      "date_published": "2023-04-10T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "19个提高工作效率的JavaScript单行代码",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/6.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/6.html",
      "summary": "1.# 生成随机字符串 当我们需要一个唯一 id 时，通过Math.random创建一个随机字符串简直不要太方便噢！！！ const randomString = () =&gt; Math.random().toString(36).slice(2); randomString(); // gi1qtdego0b randomString(); // f3qixv40mot randomString(); // eeelv1pm3ja",
      "content_html": "<h2> <strong>1.# 生成随机字符串</strong></h2>\n<hr>\n<p>当我们需要一个唯一 id 时，通过<code>Math.random</code>创建一个随机字符串简直不要太方便噢！！！</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.# 转义 HTML 特殊字符</h2>\n<hr>\n<p>解决 XSS 方法之一就是转义 HTML。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3.# 单词首字母大写</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4.# 将字符串转换为小驼峰</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5.# 删除数组中的重复值</h2>\n<hr>\n<p>得益于 ES6，使用 Set 数据类型来对数组去重太方便了。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6.# 铺平一个数组</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7.# 移除数组中的假值</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8.# 确认一个数字是奇数还是偶数</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9.# 获取两个数字之间的随机数</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 10.# 计算平均值</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 11.# 将数字截断到固定的小数点</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 12.# 计算两个日期之间天数</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 13.# 从日期中获取是一年中的哪一天</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 14.# 获取一个随机的颜色值</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 15.# 将 RGB 颜色转换为十六进制颜色值</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 16.# 清除所有的 cookie</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 17.# 检测黑暗模式</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 18.# 交换两个变量的值</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 19.# 暂停一会</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-05-23T13:42:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "20个你不可不知的 JavaScript 数组方法",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/7.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/7.html",
      "summary": "JavaScript 中的Array对象与其他编程语言中的数组一样，可以将多个项目的集合存储在单个变量名下，并具有用于执行常见数组操作的成员。 声明数组 有两种不同的方式可以声明数组。 使用 new Array 通过new Array，我们可以指定希望存在于数组中的元素，如下所示： const fruits = new Array(\"Apple\", \"Banana\"); console.log(fruits.length);",
      "content_html": "<p>JavaScript 中的<code>Array</code>对象与其他编程语言中的数组一样，可以将多个项目的集合存储在单个变量名下，并具有用于执行常见数组操作的成员。</p>\n<h2> 声明数组</h2>\n<hr>\n<p>有两种不同的方式可以声明数组。</p>\n<h3> 使用 new Array</h3>\n<p>通过<code>new Array</code>，我们可以指定希望存在于数组中的元素，如下所示：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 数组字面量表示法</h3>\n<p>使用数组字面量声明，我们可以指定数组将具有的值。如果我们不声明任何值，则数组将为空。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以下是<code>Array</code>对象的方法列表及描述。</p>\n<h2> 1. forEach</h2>\n<hr>\n<p><code>forEach()</code>方法将为每个数组元素执行一次指定的函数。</p>\n<p><code>forEach()</code>为数组中的每个元素按索引升序调用提供的<code>callbackFn</code>函数一次。它不会为已删除或未初始化的索引属性调用。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2. map</h2>\n<hr>\n<p><code>Array.map()</code>方法允许你遍历数组并使用回调函数修改其元素。然后将在数组的每个元素上执行回调函数。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>Array.map()</code>方法通常用于对元素应用一些更改，无论是像在上面代码中那样乘以特定数字，还是执行应用程序可能需要的任何其他操作。</p>\n<h2> 3. concat</h2>\n<hr>\n<p>JavaScript 中的<code>concat()</code>方法是一个字符串方法，用于将字符串连接在一起。<code>concat()</code>方法将一个或多个字符串值附加到调用字符串，然后将连接的结果作为新字符串返回。因为<code>concat()</code>方法是<code>String</code>对象的方法，所以必须通过<code>String</code>类的特定实例来调用它。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4. push</h2>\n<hr>\n<p>Javascript 数组中的<code>push()</code>方法将给定元素附加到数组最后并返回新数组的长度。</p>\n<p>如果你想在数组末尾添加一个元素，请使用<code>push()</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5. pop</h2>\n<hr>\n<p><code>pop()</code>方法将删除数组的最后一个元素并将该值返回给调用者。如果你在空数组上调用<code>pop()</code>，则返回<code>undefined</code>。</p>\n<p><code>Array.prototype.shift()</code>与<code>pop()</code>具有相似的行为，但应用于数组中的第一个元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6. splice</h2>\n<hr>\n<p><code>splice()</code>方法是一种通用方法，用于在数组的指定位置通过删除、替换或添加元素来更改数组的内容。本节将介绍如何使用此方法将元素添加到特定位置。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7. slice</h2>\n<hr>\n<p><code>slice()</code>方法将一部分数组的浅表副本返回到从开始到结束（不包括结束）选择的新数组对象中，其中开始和结束表示该数组中项目的索引。该方法不会修改原始数组。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 8. shift</h2>\n<hr>\n<p><code>shift()</code>是内置的 JavaScript 函数，用于从数组中删除第一个元素。<code>shift()</code>函数直接修改正在使用的数组。同时<code>shift()</code>返回数组中删除的项目。</p>\n<p><code>shift()</code>函数删除索引位置 0 的项目，并将索引号的值依次向下移动 1。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 9. unshift</h2>\n<hr>\n<p><code>unshift()</code>方法将插入给定值到类数组对象的开头。</p>\n<p><code>Array.prototype.push()</code>与<code>unshift()</code>具有相似的行为，但应用于数组的末尾。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 10. join</h2>\n<hr>\n<p>JavaScript 数组中的<code>join()</code>方法是一个内置方法，通过连接数组的所有元素来创建并返回新字符串。<code>join()</code>方法将连接数组的项到字符串并返回该字符串。指定的分隔符用于分隔元素数组。默认分隔符是逗号(<code>,</code>)。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 11. every</h2>\n<hr>\n<p><code>every()</code>方法测试数组中的所有元素是否都满足指定的条件。返回的是布尔值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 12. filter</h2>\n<hr>\n<p><code>filter()</code>方法创建部分给定数组的浅表副本，向下过滤到给定数组中的元素，且元素通过所提供函数实现的条件测试。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 13. indexOf</h2>\n<hr>\n<p><code>indexOf()</code>方法返回可以在数组中找到给定元素的第一个索引，如果不存在则返回-1。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 14. reduce</h2>\n<hr>\n<p><code>reduce()</code>方法按顺序对数组的每个元素执行用户提供的<code>reducer</code>回调函数，传入前一个元素的计算返回值。在数组的所有元素上运行<code>reducer</code>的最终结果是单个值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 15. reverse</h2>\n<hr>\n<p><code>reverse()</code>方法将反转数组并返回对相同数组的引用，第一个数组元素成为最后一个，最后一个数组元素成为第一个。换句话说，数组中的元素顺序将转向与之前相反的方向。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 16. sort</h2>\n<hr>\n<p><code>sort()</code>方法对数组的元素进行就地排序，并返回对同一个数组的引用，而此时数组已排序。默认排序顺序是升序，将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 17. toString</h2>\n<hr>\n<p><code>toString()</code>方法返回表示对象的字符串。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 18. at</h2>\n<hr>\n<p><code>at()</code>方法接受整数值并返回 at 索引的项目，正整数和负整数皆可。负整数从数组中的最后一项开始倒数。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 19. find</h2>\n<hr>\n<p><code>find()</code>方法返回数组中满足条件测试函数的第一个元素。如果没有值满足提供的测试函数，则返回<code>undefined</code>。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 20. some</h2>\n<hr>\n<p><code>some()</code>方法测试数组中是不是至少有一个元素通过了函数实现的条件测试。如果在数组中找到这样的元素就返回<code>true</code>；否则返回<code>false</code>。该方法不修改原数组。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>感谢大家的阅读！</p>\n",
      "date_published": "2023-04-02T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "1000个if else 一文教你如何实现分支优化",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/8.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/8.html",
      "summary": "最近在网上冲浪时看到了这样一段代码： function getUserDescribe(name) { if (name === \"小刘\") { console.log(\"刘哥哥\"); } else if (name === \"小红\") { console.log(\"小红妹妹\"); } else if (name === \"陈龙\") { console.log(\"大师\"); } else if (name === \"李龙\") { console.log(\"师傅\"); } else if (name === \"大鹏\") { console.log(\"恶人\"); } else { console.log(\"此人比较神秘！\"); } }",
      "content_html": "<p>最近在网上冲浪时看到了这样一段代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>咋一看没感觉有什么异常，但如果有 1000 个判断条件，按照这种写法难不成要写 1000 个 <code>if</code> 分支？</p>\n<p>如果写了大量的 <code>if</code> 分支，并且可能还具有<strong>分支套分支</strong>，可以想象到整个代码的可读性和可维护都会大大降低，这在实际开发中，确实是一个比较头疼的问题，那有没有什么办法能够即实现需求又能避免这些问题呢？</p>\n<h2> 1️⃣ 简单分支优化</h2>\n<hr>\n<p>这就涉及到<strong>分支优化</strong>，让我们转换思维，去优化一下上面的代码结构：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>问题代码中的判断都是简单的<strong>相等判断</strong>，那么我们就可以将这些判断条件作为一个属性写到对象<code>describeForNameMap</code> 中去，这些属性对应的值就是条件成立后的处理函数。</p>\n<p>之后我们就只需通过<code>getUserDescribe</code>函数接收到的参数去获取<code>describeForNameMap</code>对象中对应的值，如果该值存在就运行该值（因为值是一个函数）。</p>\n<p>这样一来原本的 <code>if</code> 分支判断就转换成了简单的<code>key value</code>对应值，条件与处理函数一一对应，一目了然。</p>\n<h2> 2️⃣ 复杂分支优化</h2>\n<hr>\n<p>那如果我们的 <code>if</code> 分支中的判断条件不只是简单的相等判断，还具有一些需要计算的表达式时，我们该怎么办呢？（如下所示）</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于这种结构的代码就不能引入对象来进行分支优化了，我们可以引入<strong>二维数组</strong>来进行分支优化：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面我们定义了一个<code>describeForNameMap</code>数组，数组内的每一个元素代表一个判断条件与其执行函数的集合（也是一个数组），之后我们通过数组的<code>find</code>方法查找<code>describeForNameMap</code>数组中符合判断条件的子数组即可。</p>\n<h2> 3️⃣ 抽离分支</h2>\n<hr>\n<p>上面例子中我们定义的这个<code>describeForNameMap</code>对象是一个独立的结构，我们完全可以将它抽离出去：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>通过模块化的开发也可以将这个<code>map</code>对象写进一个单独的<code>js</code>文件，之后在需要使用的地方导入即可。</p>\n</blockquote>\n<h2> 4️⃣ 争议</h2>\n<hr>\n<p>这样一来整个<code>getUserDescribe</code>函数就变得非常简洁，有的同学可能会问这有什么用呢？这不是更加麻烦了吗？如果真的嫌<code>if else</code>不好看，那我就使用<code>if return</code>不用<code>else</code>就好了：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>试想一下，如果你<code>getUserDescribe</code>函数中有 1000 个判断分支，并且还具有大量的根据判断结果来执行的处理代码，并且<code>getUserDescribe</code>函数会返回这个处理后的判断结果的值。</p>\n<p>这时<code>getUserDescribe</code>函数的<strong>重点</strong>在于<strong>对判断结果的处理</strong>，而不在于这个结果是通过什么分支获取的，例如：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果你不进行分支优化，<code>getUserDescribe</code>函数就会被大量的 <code>if</code> 分支抢占空间，使得<code>getUserDescribe</code>函数的重点迷失（<code>getUserDescribe</code>函数<strong>重点在于对判断结果的处理</strong>，而不在于这个结果是通过什么分支获取的），这时你再看一下我们优化后的代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>查看优化后的<code>getUserDescribe</code>函数我们能够知道，它从<code>describeForNameMap</code>获取了一个值赋值给了<code>str</code>（<code>describeForNameMap</code>是如何返回值的我们并不关心），之后对<code>str</code>作了一些处理。这就突出了<code>getUserDescribe</code>函数的重点（<strong>对判断结果 str 进行处理</strong>）。</p>\n<blockquote>\n<p>在这个例子中<code>describeForNameMap</code>子数组的第二个元素完全可以直接使用一个值：<code>[(name) =&gt; name.length &gt; 3, \"名字太长\"]</code>，但为了整体代码的可扩展性，推荐还是使用函数，因为函数可以接收参数，方便应对之后更复杂的场景。</p>\n</blockquote>\n<h2> 🔼 结语</h2>\n<hr>\n<p><strong>分支优化</strong>在各种语言中都有不同的实现方式和应用场景，本篇通过<code>JavaScript</code>介绍了两种代码分支优化的思想，代码的实现非常简单，重点在于这种思想的应用。</p>\n<p>其实关于分支优化这个问题一直存在争议，目前存在两种观点：</p>\n<ul>\n<li><strong>观点 1</strong>：压根不需要多此一举去优化它，并且优化后的代码因为多创建了一个<code>对象/数组</code>，对<code>对象/数组</code>进行检索反而比单纯的<code>if else</code>还是废性能。</li>\n<li><strong>观点 2</strong>：分支优化后的代码<code>可读性/可维护性</code>更好，并且引入<code>对象/数组</code>所带来的性能问题在当今时代根本不值一提。</li>\n</ul>\n",
      "date_published": "2023-02-19T16:01:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "JavaScript 复杂判断的更优雅写法",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/9.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/9.html",
      "summary": "我们编写 js 代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂，那么如何更优雅的写判断逻辑，本文带你试一下。 举个例子 先看一段代码： /** * 按钮点击事件 * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消 */ const onButtonClick = (status) =&gt; { if (status == 1) { sendLog(\"processing\"); jumpTo(\"IndexPage\"); } else if (status == 2) { sendLog(\"fail\"); jumpTo(\"FailPage\"); } else if (status == 3) { sendLog(\"fail\"); jumpTo(\"FailPage\"); } else if (status == 4) { sendLog(\"success\"); jumpTo(\"SuccessPage\"); } else if (status == 5) { sendLog(\"cancel\"); jumpTo(\"CancelPage\"); } else { sendLog(\"other\"); jumpTo(\"Index\"); } };",
      "content_html": "<p>我们编写 js 代码时经常遇到复杂逻辑判断的情况，通常大家可以用<code>if/else</code>或者<code>switch</code>来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的<code>if/else/switch</code>会变得越来越臃肿，越来越看不懂，那么如何更优雅的写判断逻辑，本文带你试一下。</p>\n<h2> 举个例子</h2>\n<hr>\n<p>先看一段代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过代码可以看到这个按钮的点击逻辑：根据不同活动状态做两件事情，发送日志埋点和跳转到对应页面，大家可以很轻易的提出这段代码的改写方案，<code>switch</code>出场：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>嗯，这样看起来比<code>if/else</code>清晰多了，细心的同学也发现了小技巧，<code>case 2</code>和<code>case 3</code>逻辑一样的时候，可以省去执行语句和<code>break</code>，则<code>case 2</code>的情况自动执行<code>case 3</code>的逻辑。</p>\n<p>这时有同学会说，还有更简单的写法：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面代码确实看起来更清爽了，这种方法的聪明之处在于：将判断条件作为对象的属性名，将处理逻辑作为对象的属性值，在按钮点击的时候，通过对象属性查找的方式来进行逻辑判断，这种写法特别适合一元条件判断的情况。</p>\n<p>是不是还有其他写法呢？有的：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样写用到了 es6 里的<code>Map</code>对象，是不是更爽了？<code>Map</code>对象和<code>Object</code>对象有什么区别呢？</p>\n<ul>\n<li>一个对象通常都有自己的原型，所以一个对象总有一个\"<code>prototype</code>\"键。</li>\n<li>一个对象的键只能是字符串或者<code>Symbols</code>，但一个<code>Map</code>的键可以是任意值。</li>\n<li>你可以通过<code>size</code>属性很容易地得到一个<code>Map</code>的键值对个数，而对象的键值对个数只能手动确认。</li>\n</ul>\n<p>我们需要把问题升级一下，以前按钮点击时候只需要判断<code>status</code>，现在还需要判断用户的身份：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>原谅我不写每个判断里的具体逻辑了，因为代码太冗长了。</p>\n<p>原谅我又用了<code>if/else</code>，因为我看到很多人依然在用<code>if/else</code>写这种大段的逻辑判断。</p>\n<p>从上面的例子我们可以看到，当你的逻辑升级为二元判断时，你的判断量会加倍，你的代码量也会加倍，这时怎么写更清爽呢？</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述代码核心逻辑是：把两个条件拼接成字符串，并通过以条件拼接字符串作为键，以处理函数作为值的<code>Map</code>对象进行查找并执行，这种写法在多元条件判断时候尤其好用。</p>\n<p>当然上述代码如果用<code>Object</code>对象来实现也是类似的：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果有些同学觉得把查询条件拼成字符串有点别扭，那还有一种方案，就是用<code>Map</code>对象，以<code>Object</code>对象作为 key：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>是不是又高级了一点点？</p>\n<p>这里也看出来<code>Map</code>与<code>Object</code>的区别，<code>Map</code>可以用任何类型的数据作为 key。</p>\n<p>我们现在再将难度升级一点点，假如<code>guest</code>情况下，<code>status1-4</code>的处理逻辑都一样怎么办，最差的情况是这样：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>好一点的写法是将处理逻辑函数进行缓存：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样写已经能满足日常需求了，但认真一点讲，上面重写了 4 次<code>functionA</code>还是有点不爽，假如判断条件变得特别复杂，比如<code>identity</code>有 3 种状态，<code>status</code>有 10 种状态，那你需要定义 30 条处理逻辑，而往往这些逻辑里面很多都是相同的，这似乎也是笔者不想接受的，那可以这样实现:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里<code>Map</code>的优势更加凸显，可以用正则类型作为 key 了，这样就有了无限可能，假如需求变成，凡是<code>guest</code>情况都要发送一个日志埋点，不同<code>status</code>情况也需要单独的逻辑处理，那我们可以这样写:</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>也就是说利用数组循环的特性，符合正则条件的逻辑都会被执行，那就可以同时执行公共逻辑和单独逻辑，因为正则的存在，你可以打开想象力解锁更多的玩法，本文就不赘述了。</p>\n<h2> 总结</h2>\n<hr>\n<p>本文已经教你了 8 种逻辑判断写法，包括：</p>\n<ul>\n<li><code>if/else</code></li>\n<li><code>switch</code></li>\n<li>一元判断时：存到<code>Object</code>里</li>\n<li>一元判断时：存到<code>Map</code>里</li>\n<li>多元判断时：将 condition 拼接成字符串存到<code>Object</code>里</li>\n<li>多元判断时：将 condition 拼接成字符串存到<code>Map</code>里</li>\n<li>多元判断时：将 condition 存为<code>Object</code>存到<code>Map</code>里</li>\n<li>多元判断时：将 condition 写作正则存到<code>Map</code>里</li>\n</ul>\n",
      "date_published": "2023-04-12T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "TypeScript程序员晋级的11个必备技巧",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/TypeScript/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/TypeScript/1.html",
      "summary": "当你学习 TypeScript 时，你的第一印象可能会欺骗你：这不就是 JavaScript 注解的一种方式吗？不就是编译器用来帮助我找到潜在 bug 的吗？ 虽然这种说法没错，但随着你对 TypeScript 不断了解，你会发现这门编程语言最不可思议的力量在于编写、推断和操作数据类型。 本文总结的一些技巧，可以帮助大家充分发挥 TypeScript 的潜力。 #1 用集合的概念思考问题 数据类型是程序员日常要处理的概念，但要简洁地定义它却出奇地困难。然而我发现集合非常适合用作概念模型。 刚开始学习 TypeScript 时，我们常常会发现用 TypeScript 编写类型的方式很不自然。举一个非常简单的例子：",
      "content_html": "<p>当你学习 TypeScript 时，你的第一印象可能会欺骗你：这不就是 JavaScript 注解的一种方式吗？不就是编译器用来帮助我找到潜在 bug 的吗？</p>\n<p>虽然这种说法没错，但随着你对 TypeScript 不断了解，你会发现这门编程语言最不可思议的力量在于编写、推断和操作数据类型。</p>\n<p>本文总结的一些技巧，可以帮助大家充分发挥 TypeScript 的潜力。</p>\n<h2> #1 用集合的概念思考问题</h2>\n<hr>\n<p>数据类型是程序员日常要处理的概念，但要简洁地定义它却出奇地困难。然而我发现集合非常适合用作概念模型。</p>\n<p>刚开始学习 TypeScript 时，我们常常会发现用 TypeScript 编写类型的方式很不自然。举一个非常简单的例子：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果你在逻辑 AND 的意义上解释运算符<code>&amp;</code>，可能会认为 Circle 是一个虚拟类型，因为它是两种类型的结合，没有任何重叠的字段。这不是 TypeScript 的工作方式。此时通过集合的概念思考更容易推断出正确的行为：</p>\n<ul>\n<li>每个类型都是一系列值的集合。</li>\n<li>有些集合是无限的：例如<code>string</code>、<code>object</code>；有些是有限的：例如<code>bool</code>，<code>undefined</code>，...</li>\n<li><code>unknown</code>是通用集（包括所有值），而<code>never</code>是空集（包括无值）。</li>\n<li>类型<code>Measure</code>是包含<code>radius</code>数字字段的所有对象的集合。<code>style</code>也是如此。</li>\n<li><code>&amp;</code>运算符创建一个交集：<code>Measure &amp; Style</code>表示包含<code>radius</code>和<code>color</code>的对象集，这实际上是一个较小的集合，字段更常用。</li>\n<li>同理，<code>|</code>运算符创建一个并集：一个较大的集合，但常用字段可能较少（如果组合两个对象类型的话）。</li>\n</ul>\n<p>集合还有助于了解可分配性：仅当值的类型是目标类型的子集时，才允许赋值：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> #2 了解声明类型和收窄类型</h2>\n<hr>\n<p>TypeScript 中一个非常强大的功能是基于控制流的自动类型收窄。这意味着变量在代码位置的任何特定点都有两种与之关联的类型：声明类型和收窄类型。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> #3 使用可区分的联合类型而不是可选字段</h2>\n<hr>\n<p>当定义一组多态类型（如<code>Shape</code>）时，很容易这样开始写代码：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>需要非空断言（访问<code>radius</code>、<code>width</code>和<code>height</code>时），因为<code>kind</code>和其他字段之间没有建立关系。相反，可区分的联合类型是一个更好的解决方案：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>从以上代码可以看出，类型收窄消除了强制类型转换的需要。</p>\n<h2> #4 使用类型谓词避免类型断言</h2>\n<hr>\n<p>如果你以正确的方式使用 TypeScript 的话，你会发现自己很少使用显式类型断言（比如 value as SomeType）；但是，有时你可能会冲动地写出诸如这样的代码：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更优雅的解决方案是将<code>isCircle</code>和<code>isRect</code>更改为返回类型谓词，这样就可以帮助 TypeScript 在<code>filter</code>调用后进一步收窄类型：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> #5 控制联合类型的分布方式</h2>\n<hr>\n<p>类型推断是 TypeScript 的特性；大多数时候，它默默地为你工作。但是有时你可能对模棱两可的细微情况进行干预。分布式条件类型就是其中一种情况。</p>\n<p>假设我们有一个<code>ToArray</code>辅助类，如果输入类型还不是数组类型，则返回数组类型：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>你认为以下类型会推断出什么？</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>答案是<code>string[] | number[]</code>。但这是模棱两可的。为什么不是<code>(string | number)[]</code>呢？</p>\n<p>默认情况下，当 TypeScript 遇到联合类型（此处为<code>string | number</code>）的泛型参数（此处为<code>T</code>）时，它会分布到每个组成部分中，这就是为什么会得到<code>string[] | number[]</code>的原因。你可以通过使用特殊语法并将<code>T</code>包装在一对<code>[]</code>中来更改此行为，例如：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在<code>Foo</code>被推断为类型<code>(string | number)[]</code>。</p>\n<h2> #6 使用详尽检查捕获在编译时未处理的情况</h2>\n<hr>\n<p>在<code>switch</code>语句中使用<code>enum</code>枚举时，一个好习惯是在没有匹配到合适值的情况下主动抛错，而不是像在其他编程语言中那样默默地忽略它们：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过使用<code>never</code>类型，静态类型检查就可以更早地查找到错误：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有了这个，在添加新的<code>shape</code>种类时，就不可能忘记更新<code>getArea</code>函数。</p>\n<p>该技术背后的基本原理是，除了<code>never</code>之外，不能为<code>never</code>类型分配任何内容。如果<code>shape.kind</code>的所有备选项都被<code>case</code>语句用尽，那么达到<code>default</code>的唯一可能类型是<code>never</code>；但是，如果未涵盖所有备选项，则将泄漏到<code>default</code>分支并导致无效分配。</p>\n<h2> #7 宁可使用 type 而不是 interface</h2>\n<hr>\n<p>在 TypeScript 中，<code>type</code>和<code>interface</code>是两种非常相似的数据结构，都可以用来构造复杂的对象的。虽然可能有争议，但我的建议是在大多数情况下始终使用 type，仅在满足以下任一条件时才使用<code>interface</code>：</p>\n<ul>\n<li>想利用 interface 的合并功能。</li>\n<li>有涉及类/接口层次结构的 OO 样式代码。</li>\n</ul>\n<p>否则，始终使用更通用的<code>type</code>构造会产生更一致的代码。</p>\n<h2> #8 只要合适宁可使用元组而不是数组</h2>\n<hr>\n<p>对象类型是构造结构化数据的常用方法，但有时你可能希望使用更简洁的表示形式，而改用简单的数组。例如，<code>Circle</code>可以定义为：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是这种构造是松散的，如果创建类似<code>['circle', '1.0']</code>的内容很容易出错。我们可以通过使用元组来使其更严格：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用元组的一个很好的例子是 React 中的<code>useState</code>。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>既紧凑又类型安全。</p>\n<h2> #9 控制推断类型的通用性或特殊性</h2>\n<hr>\n<p>TypeScript 在进行类型推断时使用合理的默认行为，旨在使常见情况下的代码编写变得容易（因此类型不需要显式注释）。有几种方法可以调整其行为。</p>\n<ul>\n<li>使用 const 缩小到最具体的类型</li>\n</ul>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>使用<code>satisfies</code>来检查类型，而不影响推断的类型</li>\n</ul>\n<p>请看以下示例：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有个错误，这是因为根据<code>circle</code>的声明类型<code>NamedCircle，name</code>字段确实可以未定义，即使变量初始值设定项提供了字符串值。当然，我们可以删除<code>:NamedCircle</code>类型注释，但这将松散对<code>circle</code>对象有效性的类型检查。进退两难。</p>\n<p>幸运的是，Typescript 4.9 引入了一个新的<code>satisfies</code>关键字，它允许你在不更改推断类型的情况下检查类型：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>修改后的版本具有两个优点：对象字面量保证符合<code>NamedCircle</code>类型，推断类型具有不可为空的名称字段。</p>\n<h2> #10 使用 infer 创建额外的泛型类型参数</h2>\n<hr>\n<p>在设计实用工具函数和类型时，你经常会觉得需要使用从给定类型参数中提取的类型。在这种情况下，<code>infer</code>关键字就可以派上用场。它可以帮助快速推断新的类型参数。下面是两个简单的例子：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>infer</code>关键字在<code>T extends Promise&lt;infer U&gt;</code>中的工作原理可以理解为：假设<code>T</code>与一些实例化的泛型 Promise 类型兼容，临时凑合一个类型参数<code>U</code>以使其工作。因此，如果<code>T</code>被实例化为<code>Promise&lt;string&gt;</code>，则<code>U</code>的解决方案将是<code>string</code>。</p>\n<h2> #11 创新类型操作以保持 DRY</h2>\n<hr>\n<p>TypeScript 提供了强大的类型操作语法和一组非常有用的实用程序，可帮助你将代码重复减少到最低限度。以下是一些简单示例：</p>\n<p>与其重复字段声明：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还不如使用<code>pick</code>实用程序提取新类型：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>与其复制函数的返回类型：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还不如使用<code>ReturnType&lt;T&gt;</code>提取：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>与其并行同步两种类型的<code>shape</code>（此处为<code>config</code>类型和<code>Factory</code>）：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还不如使用映射类型和模板字面量类型根据<code>config</code>的形状自动推断正确的<code>factory</code>类型：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<hr>\n<p>这篇文章介绍了一系列 TypeScript 语言的高级应用。在实践中，你可能会发现直接这样用并不常见；但是，这些技术被大量用于那些专门为 TypeScript 而设计的库：如 Prisma 和 tRPC。了解这些技巧可以帮助你更好地理解这些工具是发挥其威力的。</p>\n",
      "date_published": "2022-04-13T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "TypeScript"
      ]
    },
    {
      "title": "12个Typescript开发实用技巧清单",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/TypeScript/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/TypeScript/2.html",
      "summary": "Typescript 在类型检查方面非常强大，但有时某些类型是其他类型的子集并且需要为它们定义类型检查时，它会变得乏味。 举个例子，有两种响应类型： 用户配置文件响应 interface UserProfileResponse { id: number; name: string; email: string; phone: string; avatar: string; }",
      "content_html": "<p>Typescript 在类型检查方面非常强大，但有时某些类型是其他类型的子集并且需要为它们定义类型检查时，它会变得乏味。</p>\n<p>举个例子，有两种响应类型：</p>\n<h2> 用户配置文件响应</h2>\n<hr>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 登录响应</h2>\n<hr>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们可以为 UserProfileResponse 定义类型并为 LoginResponse 选择一些属性，而不是定义相同上下文 LoginResponse 和 UserProfileResponse 的类型。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>让我们了解一些可以帮助您编写更好代码的实用函数。</p>\n<h2> 01、Uppercase</h2>\n<hr>\n<p>构造一个 Type 的所有属性都设置为大写的类型。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 02、Lowercase</h2>\n<hr>\n<p>构造一个 Type 的所有属性都设置为小写的类型，与大写相反。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 03、Capitalize</h2>\n<hr>\n<p>构造一个将 Type 的所有属性设置为大写的类型。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 04、Uncapitalize</h2>\n<hr>\n<p>构造一个将 Type 的所有属性设置为 uncapitalize 的类型，与首字母大写相反。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 05、Partial</h2>\n<hr>\n<p>构造一个类型，其中 Type 的所有属性都设置为可选。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Required 构造一个类型，该类型由设置为 required 的 Type 的所有属性组成，Opposite 的对面。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 06、Readonly</h2>\n<hr>\n<p>构造一个类型，该类型由设置为只读的 Type 的所有属性组成。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 07、Record</h2>\n<hr>\n<p>构造一个具有一组类型 T 的属性 K 的类型，每个属性 K 都映射到类型 T。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 08、Pick</h2>\n<hr>\n<p>只选择键在联合类型键中的 Type 的属性。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 09、Omit</h2>\n<hr>\n<p>Omit 其键在联合类型键中的 Type 属性。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 10、Exclude</h2>\n<hr>\n<p>构造一个具有 Type 的所有属性的类型，除了键在联合类型 Excluded 中的那些。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 11、Extract</h2>\n<hr>\n<p>构造一个具有 Type 的所有属性的类型，其键在联合类型 Extract 中。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 12、NonNullable</h2>\n<hr>\n<p>构造一个类型，其中 Type 的所有属性都设置为不可为空。</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 总结</h2>\n<hr>\n<p>到这里，今天要分享的内容就全部结束了。</p>\n",
      "date_published": "2022-04-22T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "TypeScript"
      ]
    },
    {
      "title": "使用Vue3时应避免的10个错误",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/1.html",
      "summary": "Vue 3 已经稳定了相当长一段时间了。许多代码库都在生产环境中使用它，其他人最终都将不得不迁移到 Vue 3。我现在有机会使用它并记录了我的错误，下面这些错误你可能想要避免。 使用 Reactive 声明原始值 数据声明在过去都是非常直接的，但是现在有很多帮助函数供我们使用。目前的规则是： 使用reactive声明Object, Array, Map, Set 使用ref声明String, Number, Boolean",
      "content_html": "<p>Vue 3 已经稳定了相当长一段时间了。许多代码库都在生产环境中使用它，其他人最终都将不得不迁移到 Vue 3。我现在有机会使用它并记录了我的错误，下面这些错误你可能想要避免。</p>\n<h2> 使用 Reactive 声明原始值</h2>\n<hr>\n<p>数据声明在过去都是非常直接的，但是现在有很多帮助函数供我们使用。目前的规则是：</p>\n<ul>\n<li>使用<code>reactive</code>声明<code>Object, Array, Map, Set</code></li>\n<li>使用<code>ref</code>声明<code>String, Number, Boolean</code></li>\n</ul>\n<p>为一个原始值使用<code>reactive</code>会返回一个警告，并且该值不会成为可响应式数据。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>[Vue warn]: value cannot be made reactive</p>\n</blockquote>\n<p>矛盾的是，另一种方式是可行的。例如，使用<code>ref</code>来声明一个<code>Array</code>会在内部调用<code>reactive</code>。</p>\n<h2> 解构响应式数据</h2>\n<hr>\n<p>假设你有一个响应式对象拥有<code>count</code>属性，并且有一个按钮来递增<code>count</code>。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上述逻辑相当直接，而且如预期的那样工作，但你可能会利用 javascript 的解构来做以下事情：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>代码看起来是一样的，而且根据我们以前的经验应该是可行的，但事实上，Vue 的响应式跟踪是通过属性访问进行的。这意味着我们不能赋值或解构一个响应式对象，因为与第一个引用的响应式连接已经断开。这就是使用响应式帮助函数的局限性之一。</p>\n<h2> 对.value 感到困惑</h2>\n<hr>\n<p>同样的，使用<code>ref</code>的一个怪异模式可能也很难习惯。</p>\n<p><code>Ref</code>接收一个值，并返回响应式对象。该值在对象内部的<code>.value</code>属性下可用。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是<code>ref</code>在模板文件中使用时会被解包，并且不需要<code>.value</code>。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是要小心了！解包只在顶级属性中生效。下面的代码片段会生成<code>[object Object]</code>。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>正确地使用<code>.value</code>需要时间。尽管某些时候我会忘记如何使用，但是使用它的频率越来越高。</p>\n<h2> 触发事件</h2>\n<hr>\n<p>自从 Vue 的最初发布以来，子组件就可以与父组件使用<code>emit</code>来通信。你只需要添加自定义事件监听器来监听一个事件。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，<code>emit</code>需要使用<code>defineEmits</code>来进行声明。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>另一件要记住的事情是，<code>defineEmits</code>和<code>defineProps</code>都不需要被导入。它们在使用<code>script setup</code>时自动可用。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最后，由于事件现在必须被声明，所以不需要使用<code>.native</code>修饰符，事实上它已经被移除了。</p>\n<h2> 声明附加选项</h2>\n<hr>\n<p>Options API 方法有几个属性在<code>script setup</code>中是不被支持的。</p>\n<ul>\n<li><code>name</code></li>\n<li><code>inheritAttrs</code></li>\n<li>插件或库所需的自定义选项</li>\n</ul>\n<p>解决办法是按照<code>script setup</code>RFC 的<strong>定义</strong>[1]，在同一个组件中设置两个不同的脚本。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 使用响应式转换</h2>\n<hr>\n<p>Reactivity Transform 是 Vue 3 的一个<strong>实验性但有争议的功能</strong>[2]，目的是简化组件的声明方式。它的想法是利用编译时的转换来自动解包一个<code>ref</code>，并使<code>.value</code>过时。但现在它被放弃了，并将在 Vue 3.3 中被删除。它仍然可以作为一个包使用，但由于它不是 Vue 核心的一部分，所以最好不要在它身上投入时间。</p>\n<h2> 定义异步组件</h2>\n<hr>\n<p>以前的异步组件是通过将其包含在一个函数中来声明的。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>从 Vue 3 开始，异步组件需要使用<code>defineAsyncComponent</code>帮助函数来显式地定义。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 在模板中使用多余的包裹元素</h2>\n<hr>\n<p>在 Vue 2 中，组件模板需要一个单一的根元素，这有时会引入不必要的包裹元素。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在不再需要这样了，因为现在支持多个根元素。🥳</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 使用错误的生命周期</h2>\n<hr>\n<p>所有的组件生命周期事件都被重新命名，要么添加<code>on</code>前缀，要么完全改变名称。你可以在下面的图表中查看所有的变化。</p>\n<figure><figcaption>图片</figcaption></figure>\n<h2> 不看文档</h2>\n<hr>\n<p>最后，官方文档已经进行了修改以反映新的 API，并包括许多有价值的说明、指南和最佳实践。即使你是一个经验丰富的 Vue 2 工程师，你也一定会通过阅读文档学到一些新东西。</p>\n<h2> 总结</h2>\n<hr>\n<p>每个框架都有一个学习曲线，而 Vue 3 的学习曲线无疑比 Vue 2 的更陡峭。我仍然不相信两个版本之间的迁移工作是合理的，但组合式 API 要整洁得多，在你掌握了它之后会感觉很自然。</p>\n<p>最后，请记住：</p>\n<blockquote>\n<p>犯错比什么都不做要好得多。</p>\n<p>Making mistakes is a lot better than not doing anything.</p>\n</blockquote>\n<ul>\n<li>原文链接：**<a href=\"https://fadamakis.com/10-mistakes-to-avoid-when-starting-with-vue-3-1d1ced8552ae**%5B3%5D\" target=\"_blank\" rel=\"noopener noreferrer\">https://fadamakis.com/10-mistakes-to-avoid-when-starting-with-vue-3-1d1ced8552ae**[3]</a></li>\n<li>作者：Fotis Adamakis</li>\n</ul>\n<p>以上就是本文的全部内容。如果对你有所帮助，欢迎收藏、转发~</p>\n",
      "date_published": "2023-05-24T00:00:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue中动态引入图片为什么要是require，你不知道的那些事",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/10.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/10.html",
      "summary": "相信用过 vue 的小伙伴，肯定被面试官问过这样一个问题：在 vue 中动态的引入图片为什么要使用 require？ 有些小伙伴，可能会轻蔑一笑：呵，就这，因为动态添加 src 被当做静态资源处理了，没有进行编译，所以要加上 require， 我倒着都能背出来...... emmm... 乍一看好像说的很有道理啊，但是仔细一看，这句话说的到底是个啥？针对上面的回答，我不禁有如下几个疑问： 什么是静态资源？ 为什么动态添加的 src 会被当做的静态的资源？ 没有进行编译，是指为是什么没有被编译？ 加上 require 为什么能正确的引入资源，是因为加上 require 就能编译了？",
      "content_html": "<p>相信用过 vue 的小伙伴，肯定被面试官问过这样一个问题：<strong>在 vue 中动态的引入图片为什么要使用 require？</strong></p>\n<p>有些小伙伴，可能会轻蔑一笑：呵，就这，<strong>因为动态添加 src 被当做静态资源处理了，没有进行编译，所以要加上 require，</strong> 我倒着都能背出来......</p>\n<p>emmm... 乍一看好像说的很有道理啊，但是仔细一看，这句话说的到底是个啥？针对上面的回答，我不禁有如下几个疑问：</p>\n<ol>\n<li>什么是静态资源？</li>\n<li>为什么动态添加的 src 会被当做的静态的资源？</li>\n<li>没有进行编译，是指为是什么没有被编译？</li>\n<li>加上 require 为什么能正确的引入资源，是因为加上 require 就能编译了？</li>\n</ol>\n<p>当我产生最后一个疑问的时候，发现上面的答案看似说了些啥，但好像又什么都没说...... 如果各位看官老爷也有如上几个疑问，那就让我给大家一一解惑</p>\n<h2> 1.什么是静态资源</h2>\n<hr>\n<p>与静态资源相对应的还有一个动态资源，先让我们看看网上的各位大佬们怎么解释的。</p>\n<blockquote>\n<p>静态资源：一般客户端发送请求到 web 服务器，web 服务器从内存在取到相应的文件，返回给客户端，客户端解析并渲染显示出来。</p>\n<p>动态资源：一般客户端请求的动态资源，先将请求交于 web 容器，web 容器连接数据库，数据库处理数据之后，将内容交给 web 服务器，web 服务器返回给客户端解析渲染处理。</p>\n</blockquote>\n<p>其实上面的总结已经很清晰了。站在一个 vue 项目的角度，我们可以简单的理解为：</p>\n<p><strong>静态资源就是直接存放在项目中的资源，这些资源不需要我们发送专门的请求进行获取</strong>。比如 assets 目录下面的图片，视频，音频，字体文件，css 样式表等。</p>\n<p><strong>动态资源就是需要发送请求获取到的资源</strong>。比如我们刷淘宝的时候，不同的商品信息是发送的专门的请求获取到的，就可以称之为动态资源。</p>\n<h2> 2. 为什么动态添加的 src 会被当做的静态的资源？</h2>\n<hr>\n<p>回答这个问题之前，我们需要了解一下，浏览器是怎么能运行一个 vue 项目的。</p>\n<p>我们知道浏览器打开一个网页，实际上运行的是 html，css，js 三种类型的文件。当我们本地启动一个 vue 项目的时候，实际上是先将 vue 项目进行打包，打包的过程就是将项目中的一个个 vue 文件转编译成 html，css，js 文件的过程，而后再在浏览器上运行的。</p>\n<p>那动态添加的 src 如果我们没有使用 require 引入，最终会打包成什么样子呢，我带大家实验一波。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们可以看出，<strong>动态添加的 src 最终会编译成一个静态的字符串地址。程序运行的时候，会按照这个地址去项目目录中引入资源。而 去项目目录中引入资源的这种方式，就是将该资源当成了静态资源</strong>。所以这也就回答了我们的问题 2。</p>\n<p>看到这里估计就有小伙伴疑惑了，这个最终被编译的地址有什么问题吗？我项目中的图片就是这个地址，为什么无法引入？别急，我们继续往下看。</p>\n<h2> 3. 没有进行编译，是指的是什么没有被编译？</h2>\n<hr>\n<p>没有进行编译。这半句话，就听得很让人懵逼了。按照问题 2 我们知道这个动态引入的图片最终是被编译了，只是被编译之后无法正确的引入图片资源而已。所以这句话本来就是错的。针对于我们的标准答案，我在这里进行改写：</p>\n<p><strong>因为动态添加 src 被当做静态资源处理了，而被编译过后的静态路径无法正确的引入资源，所以要加上 require</strong></p>\n<p>那这里就诞生了一个新的疑问：<strong>被编译过后的静态路径为什么无法正确的引入资源？</strong></p>\n<p>想得到这个问题的答案，我们得先从正常的引入一张图片开始。在项目中我们静态的引入一张图片肯定是可以引入成功的，而引用图片所在的 vue 文件肯定也是被编译的，那静态引入图片最终会被编译成什么样呢，模拟一波：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>根据上面的测试，我们发现，使用静态的地址去引入一张图片，图片的路径和图片的名称已经发生了改变，并且编译后过后的静态地址是可以成功的引入资源的。这是因为，在默认情况下，src 目录下面的所有文件都会被打包，src 下面的图片也会被打包在新的文件夹下并生成新的文件名。编译过后的静态地址引入的是打包过后的图片地址，从而可以正确的引用资源</p>\n<p>事实确实是这样吗？我们可以执行打包命令（npm run build）进行验证</p>\n<figure><figcaption>图片</figcaption></figure>\n<p>可以发现，编译过后的静态地址确实是和 dist 下编译后图片地址是一致的，从而验证我们的想法。</p>\n<p>到这里我们其实就可以解释上面的问题了：动态添加的 src，被编译过后的静态路径为什么无法正确的引入资源？</p>\n<p><strong>因为动态的添加的 src 编译过后的地址，与图片资源编译过后的资源地址不一致， 导致无法正确的引入资源</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>那要怎么解决上述的问题呢，答案就是：require</p>\n<h2> 4. 加上 require 为什么能正确的引入资源，是因为加上 require 就能编译了？</h2>\n<hr>\n<p>针对这个问题，首先就要否定后半句，无论加不加 require，vue 文件中引入一张图片都会被编译。</p>\n<p>接着我们再来好好了解一下，require。</p>\n<h4> 4.1 require 是什么: 是一个 node 方法，用于引入模块，JSON 或本地文件</h4>\n<h4> 4.2 调用 require 方法引入一张图片之后发生了什么：</h4>\n<p>在回答这个问题之前，容我先对问题 3 中的内容进行一定的补充。其实如果真的有小伙伴跟着问题三中的操作进行验证，估计就要开喷了：为什么我静态引入的图片最终编译的地址和你的不一样，是个 base64，而且打包之后 dist 下面也没有生成新的图片。大概就是下面这样的情况。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>先别急着喷，实际上造成这种差异的原因，是因为我改了一下 webpack 中的配置。接下来涉及少量 webpack 代码，不了解 webpack 的小伙伴也没关系，了解原理即可。</p>\n<p>在上文中的我们提到，vue 项目最终会被打包成一个 dist 目录，那么是什么帮我们完成这个打包的呢，没错，就是 webpack。在 vue 项目中的引入一张图片的时候，细心的同学会发现，有的时候，浏览器上显示图片地址是一个 base64，有的时候，是一个被编译过后的文件地址。也就是上述描述的差异。</p>\n<p>之所以会造成这种差异，是 webpack 打包的时候，对图片资源进行了相关的配置。我们可以通过如下命令生成 vue 项目中的 webpack 配置文件，进行验证：</p>\n<blockquote>\n<p><em>npx vue-cli-service inspect --mode development &gt;&gt; webpack.config.development.js</em></p>\n</blockquote>\n<figure><figcaption>图片</figcaption></figure>\n<p>上图就是 vue 中 webpack 默认的图片打包规则。设置 type: 'asset'，默认的，对于小于 8k 的图片，会将图片转成 base64 直接插入图片，不会再在 dist 目录生成新图片。对于大于 8k 的图片，会打包进 dist 目录，之后将新图片地址返回给 src。</p>\n<p>而我在上述测试中使用的图片，是 vue-cli 自带的一张 logo 图片，大小是 6.69k。按照默认的打包规则，是会转成 base64，嵌入图片中的。所以为了讲述方便，我在 vue.config.js 中修改了其默认的配置，配置如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>那上面说了这么多，和 require 有啥关系，自然是有滴。</p>\n<p>我们现在知道 vue 最终是通过 webpack 打包，并且会在 webpack 配置文件中编写一系列打包规则。而 webpack 中的打包规则，针对的其实是一个一个模块，换而言之 webpack 只会对模块进行打包。那 webpack 怎么将图片当成一个模块呢，这就要用到我们的正主 require。</p>\n<p>当我们使用 require 方法引入一张图片的时候，webpack 会将这张图片当成一个模块，并根据配置文件中的规则进行打包。<strong>我们可以将 require 当成一个桥梁，使用了 require 方法引入的资源，该资源就会当成模块并根据配置文件进行打包，并返回最终的打包结果。</strong></p>\n<p>回到问题 4.2：调用 require 方法引入一张图片之后发生了什么</p>\n<p><strong>1.如果这张图片小于项目中设置的资源限制大小，则会返回图片的 base64 插入到 require 方法的调用处</strong></p>\n<p><strong>2.如果这张图片大于项目中设置的资源限制大小，则会将这个图片编译成一个新的图片资源。require 方法返回新的图片资源路径及文件名</strong></p>\n<p>回到问题 4：为什么加上 require 能正确的引入资源</p>\n<p><strong>因为通过 require 方法拿到的文件地址，是资源文件编译过后的文件地址（dist 下生成的文件或 base64 文件），因此可以找对应的文件，从而成功引入资源。</strong></p>\n<p>答案就是这么简单，来验证一波</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><figure><figcaption>图片</figcaption></figure>\n<p>有问题吗，没有问题。到这里，不妨再对我们的标准答案进行一次优化：</p>\n<p><strong>因为动态添加的 src，编译过后的文件地址和被编译过后的资源文件地址不一致，从而无法正确引入资源。而使用 require，返回的就是资源文件被编译后的文件地址，从而可以正确的引入资源</strong></p>\n<p>看到这，估计还是有一些小伙伴有一些疑问，我再扩展一波：</p>\n<h2> 5. 问题 3 中，静态的引入一张图片，没有使用 require，为什么返回的依然是编译过后的文件地址？</h2>\n<hr>\n<p>答：在 webpack 编译的 vue 文件的时候，遇见 src 等属性会默认的使用 require 引入资源路径。引用 vue-cli 官方的一段原话</p>\n<blockquote>\n<p>当你在 JavaScript、CSS 或 <code>*.vue</code> 文件中使用相对路径 (必须以 <code>.</code> 开头) 引用一个静态资源时，该资源将会被包含进入 webpack 的依赖图中。在其编译过程中，所有诸如 <code>&lt;img src=\"...\"&gt;</code>、<code>background: url(...)</code> 和 CSS <code>@import</code> 的资源 URL <strong>都会被解析为一个模块依赖</strong>。</p>\n<p>例如，<code>url(./image.png)</code> 会被翻译为 <code>require('./image.png')</code>，而：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>将会被编译到：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div></blockquote>\n<h2> 6. 按照问题 5 中所说，那么动态添加 src 的时候也会使用 require 引入，为什么 src 编译过后的地址，与图片资源编译过后的资源地址不一致</h2>\n<hr>\n<p>答：因为动态引入一张图片的时候，src 后面的属性值，实际上是一个变量。webpack 会根据 v-bind 指令去解析 src 后面的属性值。并不会通过 reuqire 引入资源路径。这也是为什么需要手动的添加 require。</p>\n<h2> 7.据说 public 下面的文件不会被编译，那我们使用静态路径去引入资源的时候，也会默认的使用 require 引入吗？</h2>\n<hr>\n<p>官方的原文是这样子的：</p>\n<blockquote>\n<p>任何放置在 <code>public</code> 文件夹的静态资源都会被简单的复制，而不经过 webpack。你需要通过绝对路径来引用它们。</p>\n</blockquote>\n<p>答：不会，使用 require 引入资源的前提的该资源是 webpack 解析的模块，而 public 下的文件压根就不会走编译，也就不会使用到 require。</p>\n<h2> 8.为什么使用 public 下的资源一定要绝对路径</h2>\n<hr>\n<p>答：因为虽然 public 文件不会被编译，但是 src 下的文件都会被编译。由于引入的是 public 下的资源，不会走 require，会直接返回代码中的定义的文件地址，该地址无法在编译后的文件目录（dist 目录）下找到对应的文件，会导致引入资源失败。</p>\n<h2> 9.上文件中提到的 webpack，为什么引入资源的时候要有 base64 和打包到 dist 目录下两种的方式，全部打包到的 dist 目录下，他不香吗？</h2>\n<hr>\n<p>答：为了减少 http 请求。页面中通过路径引入的图片，实际上都会向服务器发送一个请求拿到这张图片。对于资源较小的文件，设置成 base64，既可以减少请求，也不会影响到页面的加载性能。</p>\n<ul>\n<li>参考链接：<a href=\"http://cli.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">cli.vuejs.org/zh/</a></li>\n<li>参考链接：<a href=\"http://wjhsh.net/vickylinj-p-15599154.html\" target=\"_blank\" rel=\"noopener noreferrer\">wjhsh.net/vickylinj-p-15599154.html</a></li>\n</ul>\n",
      "date_published": "2023-04-16T00:00:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "30 道 Vue 面试题",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/2.html",
      "summary": "1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？ SPA（single-page application）仅在 Web 页面初始化时加载相应的 HTML、CSS、JavaScript。一旦页面加载完成，SPA 不会因为用户的操作二进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户交互，避免页面的重新加载。 优点： 用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染。 基于上面一点，SPA 相当于服务器压力小。 前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理。",
      "content_html": "<h2> 1、说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2>\n<hr>\n<p>SPA（single-page application）仅在 Web 页面初始化时加载相应的 HTML、CSS、JavaScript。一旦页面加载完成，SPA 不会因为用户的操作二进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户交互，避免页面的重新加载。</p>\n<p>优点：</p>\n<ul>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染。</li>\n<li>基于上面一点，SPA 相当于服务器压力小。</li>\n<li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>初次加载耗时多：为加载单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript 和 CSS 统一加载，部分页面按需加载。</li>\n<li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理。</li>\n<li>SEO 难度较大：由于所有的页面内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li>\n</ul>\n<h2> 2、v-show 与 v-if 有什么区别？</h2>\n<hr>\n<p><code>v-if</code>是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做————知道条件第一次变为真时，才会开始渲染条件块。</p>\n<p><code>v-show</code>就简单得多————不管初始条件是什么，元素都会被渲染，并且只是简单的基于 CSS 的\"display:none\"属性进行切换。</p>\n<p>所以，<code>v-if</code>适用于在运行时很少改变条件，不需要频繁切换条件的场景；<code>v-show</code>则适用于需要非常频繁切换条件的场景。</p>\n<h2> 3、Class 与 Style 如何动态绑定？</h2>\n<hr>\n<p>Class 可以通过对象语法和数组语法进行动态绑定:</p>\n<ul>\n<li>对象语法：</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>数组语法：</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Style 也可以通过对象语法和数组语法进行动态绑定：</p>\n<ul>\n<li>对象语法：</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>数组语法：</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4、怎样理解 Vue 的单向数据流？</h2>\n<hr>\n<p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来不行。这样会防止从子组件意外改变父子组件的状态，从而导致你的应用的数据流向难以理解。</p>\n<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果这样子做，Vue 会在浏览器的控制台发出警告。子组件想修改时，只能通过$emit 派发一个自定义事件，父组件接收到后，由父组件修改。</p>\n<p>有两种常见的试图改变一个 prop 的情形 :</p>\n<ul>\n<li>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>这个 prop 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 prop 的值来定义一个计算属性</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5、computed 和 watch 的区别和运用的场景？</h2>\n<hr>\n<p><b>computed：</b>是计算属性，以来其它属性值，并且 computed 的值有缓存，只有它以来的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p>\n<p><b>watch：</b>更多的是「观察」的作用，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续的操作；</p>\n<p><b>运用场景：</b></p>\n<ul>\n<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>\n<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作（访问一个 API），限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n<h2> 6、直接给一个数组赋值，Vue 能监测到变化吗？</h2>\n<hr>\n<p>由于 JavaScript 的限制，Vue 不能监测到以下数组的变动：</p>\n<ul>\n<li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem]=newValue</code></li>\n<li>当你修改数组长度时，例如：<code>vm.items.length = newLength</code></li>\n</ul>\n<p>为了解决第一个问题，Vue 提供了以下操作方法：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>为了解决第二个问题，Vue 提供了以下操作方法：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 7、谈谈你对 Vue 生命周期的理解？</h2>\n<hr>\n<h3> (1)生命周期是什么？</h3>\n<p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载 DOM-&gt;渲染、更新-&gt;渲染、卸载等一些列过程，我们称这是 Vue 的生命周期。</p>\n<h3> (2)各个生命周期的作用？</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">生命周期</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">beforeCreate</td>\n<td style=\"text-align:left\">组件实例被创建之初，组件的属性生效之前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">created</td>\n<td style=\"text-align:left\">组件实例已经完全创建，属性也绑定，但真实 DOM 还没有生成，$el 还不可用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beforeMount</td>\n<td style=\"text-align:left\">在挂载开始之前被调用：相关的 render 函数首次被调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mounted</td>\n<td style=\"text-align:left\">el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beforeUpdate</td>\n<td style=\"text-align:left\">组件数据更新之前被调用，发生在虚拟 DOM 打补丁之前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">update</td>\n<td style=\"text-align:left\">组件数据更新之后</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">activited</td>\n<td style=\"text-align:left\">keep-alive 专属，组件被激活时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deactivated</td>\n<td style=\"text-align:left\">keep-alive 专属，组件被销毁时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beforeDestory</td>\n<td style=\"text-align:left\">组件销毁前调用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">destoryed</td>\n<td style=\"text-align:left\">组件销毁后调用</td>\n</tr>\n</tbody>\n</table>\n<h3> (3)生命周期示意图</h3>\n<figure><figcaption>Vue生命周期示意图</figcaption></figure>\n<h2> 8、Vue 的父组件和子组件生命周期钩子函数执行顺序？</h2>\n<hr>\n<p>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</p>\n<ul>\n<li>加载渲染过程</li>\n</ul>\n<p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p>\n<ul>\n<li>子组件更新过程</li>\n</ul>\n<p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p>\n<ul>\n<li>父组件更新过程</li>\n</ul>\n<p>父 beforeUpdate -&gt; 父 updated</p>\n<ul>\n<li>销毁过程</li>\n</ul>\n<p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>\n<h2> 9、在哪个生命周期内调用异步请求？</h2>\n<hr>\n<p>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：</p>\n<ul>\n<li>能更快获取到服务端数据，减少页面 loading 时间；</li>\n<li>SSR 不支持 beforeMount、mounted 钩子函数，所以放在 created 中有助于一致性；</li>\n</ul>\n<h2> 10、在什么阶段才能访问操作 DOM？</h2>\n<hr>\n<p>在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。</p>\n<h2> 11、父组件可以监听到子组件的生命周期吗？</h2>\n<hr>\n<p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p>\n<h2> 12、谈谈你对 keep-alive 的了解？</h2>\n<hr>\n<p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p>\n<ul>\n<li>一般结合路由和动态组件一起使用，用于缓存组件；</li>\n<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li>\n<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li>\n</ul>\n<h2> 13、组件中 data 为什么是一个函数？</h2>\n<hr>\n<blockquote>\n<p>为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。</p>\n<h2> 14、v-model 的原理？</h2>\n<hr>\n<p>我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>\n<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>\n</ul>\n<p>以 input 表单元素为例：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件，如下所示：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 15、Vue 组件间通信有哪几种方式？</h2>\n<hr>\n<p>Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。</p>\n<h3> （1）<code>props</code> / <code>$emit</code> 适用 父子组件通信</h3>\n<h3> （2）<code>ref</code> 与 <code>$parent</code> / <code>$children</code> 适用 父子组件通信</h3>\n<ul>\n<li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>\n<li><code>$parent</code> / <code>$children</code>：访问父 / 子实例</li>\n</ul>\n<h3> （3）<code>EventBus</code> （<code>$emit</code> / <code>$on</code>） 适用于 父子、隔代、兄弟组件通信</h3>\n<p>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</p>\n<h3> （4）<code>$attrs</code>/<code>$listeners</code> 适用于 隔代组件通信</h3>\n<ul>\n<li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 v-bind=\"$attrs\" 传入内部组件。通常配合 inheritAttrs 选项一起使用。</li>\n<li><code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=\"$listeners\" 传入内部组件</li>\n</ul>\n<h3> （5）<code>provide</code> / <code>inject</code> 适用于 隔代组件通信</h3>\n<p>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p>\n<h3> （6）<code>Vuex</code> 适用于 父子、隔代、兄弟组件通信</h3>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p>\n<ul>\n<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>\n<li>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</li>\n</ul>\n<h2> 16、你使用过 Vuex 吗？</h2>\n<hr>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p>\n<p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>\n<p>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>\n<ul>\n<li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li>\n<li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li>\n<li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li>\n<li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li>\n<li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li>\n</ul>\n<h2> 17、使用过 Vue SSR 吗？说说 SSR？</h2>\n<hr>\n<blockquote>\n<p>Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记\"激活\"为客户端上完全可交互的应用程序。<br>即：SSR 大致的意思就是 vue 在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的 html 片段直接返回给客户端这个过程就叫做服务端渲染。</p>\n</blockquote>\n<p>服务端渲染 SSR 的优缺点如下：</p>\n<p>（1）服务端渲染的优点：</p>\n<ul>\n<li>更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</li>\n<li>更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</li>\n</ul>\n<p>（2) 服务端渲染的缺点：</p>\n<ul>\n<li>更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；</li>\n<li>更多的服务器负载：在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li>\n</ul>\n<h2> 18、vue-router 路由模式有几种？</h2>\n<hr>\n<p>vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，3 种路由模式的说明如下：</p>\n<ul>\n<li>hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；</li>\n<li>history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；</li>\n<li>abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.</li>\n</ul>\n<h2> 19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h2>\n<hr>\n<h3> （1）hash 模式的实现原理</h3>\n<p>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>hash 路由模式的实现主要是基于下面几个特性：</p>\n<ul>\n<li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li>\n<li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；</li>\n<li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li>\n<li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</li>\n</ul>\n<h3> （2）history 模式的实现原理</h3>\n<p>HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>history 路由模式的实现主要基于存在下面几个特性：</p>\n<ul>\n<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>\n<li>我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>\n<li>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>\n</ul>\n<h2> 20、什么是 MVVM？</h2>\n<hr>\n<p>Model–View–ViewModel （MVVM）是一种软件架构设计模式，有微软 WPF 和 Silverlight 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由 John Gossman(同样也是 WPF 和 Silverlight 的架构师)于 2005 年在他的博客发表</p>\n<p>MVVM 源自于经典的 Model-View-Controller(MVC)模式，MVVM 的出现促进了前端开发与后端业务逻辑的分离，极大的提高了前端开发效率，MVVM 的核心是 ViewModel 层，它就像是一个中转站(value converter)，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向绑定，向下与 Model 层通过接口请求进行数据交互，启呈上启下作用，如下：</p>\n<figure><figcaption>什么是 MVVM?</figcaption></figure>\n<h3> （1）View 层</h3>\n<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建。</p>\n<h3> （2）Model 层</h3>\n<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的 api 接口。</p>\n<h3> （3）ViewModel 层</h3>\n<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的，比如页面的这一块展示什么，而页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互），视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层。</p>\n<p>MVVM 框架实现了双向绑定，这样 ViewModel 的内容会实时展现在 View 层，前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图，MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。这样 View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</p>\n<p>我们以下通过一个 Vue 实例来说明 MVVM 的具体实现，有 Vue 开发经验的同学应该一目了然：</p>\n<p>（1）View 层</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>（2）ViewModel 层</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>（3） Model 层</p>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 21、Vue 是如何实现数据双向绑定的？</h2>\n<hr>\n<p>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据，如下图所示：</p>\n<figure><figcaption>Vue 是如何实现数据双向绑定的？</figcaption></figure>\n<p>即：</p>\n<ul>\n<li>输入框内容变化时，Data 中的数据同步变化。即 View =&gt; Data 的变化。</li>\n<li>Data 中的数据变化时，文本节点的内容同步变化。即 Data =&gt; View 的变化。</li>\n</ul>\n<p>其中，View 变化更新 Data ，可以通过事件监听的方式来实现，所以 Vue 的数据双向绑定的工作主要是如何根据 Data 变化更新 View。</p>\n<p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p>\n<p>实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</p>\n<p>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</p>\n<p>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。</p>\n<p>实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</p>\n<figure><figcaption>Vue 是如何实现数据双向绑定的？</figcaption></figure>\n<h3> 22、Vue 框架怎么实现对象和数组的监听？</h3>\n<hr>\n<p>如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是 Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。</p>\n<h3> 23、Proxy 与 Object.defineProperty 优劣对比</h3>\n<hr>\n<p>Proxy 的优势如下:</p>\n<ul>\n<li>Proxy 可以直接监听对象而非属性；</li>\n<li>Proxy 可以直接监听数组的变化；</li>\n<li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>\n<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li>\n<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>\n</ul>\n<p>Object.defineProperty 的优势如下:</p>\n<ul>\n<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li>\n</ul>\n<h2> 24、Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</h2>\n<hr>\n<p>受现代 JavaScript 的限制 ，Vue&nbsp; 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data&nbsp; 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value) 来实现为对象添加响应式属性，那框架本身是如何实现的呢？</p>\n<p>我们查看对应的 Vue 源码：vue/src/core/instance/index.js</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们阅读以上源码可知，vm.$set 的实现原理是：</p>\n<ul>\n<li>如果目标是数组，直接使用数组的 splice 方法触发响应式；</li>\n<li>如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</li>\n</ul>\n<h2> 25、虚拟 DOM 的优缺点？</h2>\n<hr>\n<p>优点：</p>\n<ul>\n<li>保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li>\n<li>无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>\n<li>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li>\n</ul>\n<h2> 26、虚拟 DOM 实现原理？</h2>\n<hr>\n<p>虚拟 DOM 的实现原理主要包括以下 3 部分：</p>\n<ul>\n<li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li>\n<li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li>\n<li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li>\n</ul>\n<h2> 27、Vue 中的 key 有什么作用？</h2>\n<hr>\n<p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有 4 种比较方式：newStartIndex 和 oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了 key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较。具体有无 key 的 diff 过程，可以查看作者写的另一篇详解虚拟 DOM 的文章《深入剖析：Vue 核心之虚拟 DOM》</p>\n<p>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>\n<p><b>更准确：</b>因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。</p>\n<p><b>更快速：</b>利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 28、你有对 Vue 项目进行哪些优化？</h2>\n<hr>\n<h3> （1）代码层面的优化</h3>\n<ul>\n<li>v-if 和 v-show 区分使用场景</li>\n<li>computed 和 watch 区分使用场景</li>\n<li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li>\n<li>长列表性能优化</li>\n<li>事件的销毁</li>\n<li>图片资源懒加载</li>\n<li>路由懒加载</li>\n<li>第三方插件的按需引入</li>\n<li>优化无限列表性能</li>\n<li>服务端渲染 SSR or 预渲染</li>\n</ul>\n<h3> （2）Webpack 层面的优化</h3>\n<ul>\n<li>Webpack 对图片进行压缩</li>\n<li>减少 ES6 转为 ES5 的冗余代码</li>\n<li>提取公共代码</li>\n<li>模板预编译</li>\n<li>提取组件的 CSS</li>\n<li>优化 SourceMap</li>\n<li>构建结果输出分析</li>\n<li>Vue 项目的编译优化</li>\n</ul>\n<h3> （3）基础的 Web 技术的优化</h3>\n<ul>\n<li>开启 gzip 压缩</li>\n<li>浏览器缓存</li>\n<li>CDN 的使用</li>\n<li>使用 Chrome Performance 查找性能瓶颈</li>\n</ul>\n<h2> 29、对于即将到来的 vue3.0 特性你有什么了解的吗？</h2>\n<hr>\n<p>Vue 3.0 正走在发布的路上，Vue 3.0 的目标是让 Vue 核心变得更小、更快、更强大，因此 Vue 3.0 增加以下这些新特性：</p>\n<h3> （1）监测机制的改变</h3>\n<p>3.0 将带来基于代理 Proxy 的 observer 实现，提供全语言覆盖的反应性跟踪。这消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：</p>\n<ul>\n<li>只能监测属性，不能监测对象</li>\n<li>检测属性的添加和删除</li>\n<li>检测数组索引和长度的变更</li>\n<li>支持 Map、Set、WeakMap 和 WeakSet</li>\n</ul>\n<p>新的 observer 还提供了以下特性：</p>\n<ul>\n<li>用于创建 observable 的公开 API。这为中小规模场景提供了简单轻量级的跨组件状态管理解决方案。</li>\n<li>默认采用惰性观察。在 2.x 中，不管反应式数据有多大，都会在启动时被观察到。如果你的数据集很大，这可能会在应用启动时带来明显的开销。在 3.x 中，只观察用于渲染应用程序最初可见部分的数据。</li>\n<li>更精确的变更通知。在 2.x 中，通过 Vue.set 强制添加新属性将导致依赖于该对象的 watcher 收到变更通知。在 3.x 中，只有依赖于特定属性的 watcher 才会收到通知。</li>\n<li>不可变的 observable：我们可以创建值的“不可变”版本（即使是嵌套属性），除非系统在内部暂时将其“解禁”。这个机制可用于冻结 prop 传递或 Vuex 状态树以外的变化。</li>\n<li>更好的调试功能：我们可以使用新的 renderTracked 和 renderTriggered 钩子精确地跟踪组件在什么时候以及为什么重新渲染。</li>\n</ul>\n<h3> （2）模板</h3>\n<p>模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</p>\n<p>同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</p>\n<h3> （3）对象式的组件声明方式</h3>\n<p>vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易。</p>\n<p>此外，vue 的源码也改用了 TypeScript 来写。其实当代码的功能复杂之后，必须有一个静态类型系统来做一些辅助管理。现在 vue3.0 也全面改用 TypeScript 来重写了，更是使得对外暴露的 api 更容易结合 TypeScript。静态类型系统对于复杂代码的维护确实很有必要。</p>\n<h3> （4）其它方面的更改</h3>\n<p>vue3.0 的改变是全面的，上面只涉及到主要的 3 个方面，还有一些其他的更改：</p>\n<ul>\n<li>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</li>\n<li>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</li>\n<li>基于 treeshaking 优化，提供了更多的内置功能。</li>\n</ul>\n<h2> 30、手写 Promise.all 和 Promise.race</h2>\n<hr>\n<h3> Promise.all()</h3>\n<p><b>核心思路：</b></p>\n<p>1、Promise.all 返回的肯定是一个 Promise 对象，所以可以直接写一个 return new Promise((resolve,reject)=&gt;{})(这应该是一个惯性思维)\n2、遍历传入的参数，用 Promise.resolve()将参数“包一层”，使其变成个 Promise 对象\n3、关键点是何时“决议”，也就是合适 resolve 出来，在这里做了计数器(count)，每个内部 Promise 对象决议后就将计数器加一，并判断加一后的大小是否与传入对象的数量相等，如果相等则调用 resolve，如果任何一个 promise 对象失败，则调用 reject()方法。\n4、官网规定 Promise.all()接受的参数是一个可遍历的参数，所以未必一定是一个数组，所以用 Array.from()转化一下\n5、使用 for...of 进行遍历，因为凡事可遍历的变量应该都是部署了 iterator 方法，所以用 for...of 遍历最安全</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> Promise.race()</h3>\n<p><b>核心思路：</b>\n谁先决议那么就返回谁，所以将 all 的计数器和逻辑判断全部去除掉就可以了。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-03-15T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "一份不错的Vue前端代码风格指南",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/3.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/3.html",
      "summary": "一、命名规范 市面上常用的命名规范： camelCase（小驼峰式命名法 —— 首字母小写） PascalCase（大驼峰式命名法 —— 首字母大写） kebab-case（短横线连接式） Snake（下划线连接式） 1.1 项目文件命名 1.1.1 项目名 全部采用小写方式， 以短横线分隔。例：my-project-name。",
      "content_html": "<h2> 一、命名规范</h2>\n<hr>\n<p>市面上常用的命名规范：</p>\n<ul>\n<li><code>camelCase</code>（小驼峰式命名法 —— 首字母小写）</li>\n<li><code>PascalCase</code>（大驼峰式命名法 —— 首字母大写）</li>\n<li><code>kebab-case</code>（短横线连接式）</li>\n<li><code>Snake</code>（下划线连接式）</li>\n</ul>\n<h3> 1.1 项目文件命名</h3>\n<h4> 1.1.1 项目名</h4>\n<p>全部采用小写方式， 以<strong>短横线</strong>分隔。例：<code>my-project-name</code>。</p>\n<h4> 1.1.2 目录名</h4>\n<p><strong>参照项目命名规则，有复数结构时，要采用复数命名法</strong>。例：docs、assets、components、directives、mixins、utils、views。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.1.3 图像文件名</h4>\n<p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以<strong>下划线</strong>分隔。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.1.4 HTML 文件名</h4>\n<p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以<strong>下划线</strong>分隔。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.1.5 CSS 文件名</h4>\n<p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以<strong>短横线</strong>分隔。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.1.6 JavaScript 文件名</h4>\n<p>全部采用小写方式， 优先选择单个单词命名，多个单词命名以<strong>短横线</strong>分隔。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>上述规则可以快速记忆为“静态文件下划线，编译文件短横线”。</p>\n</blockquote>\n<h3> 1.2 Vue 组件命名</h3>\n<h4> 1.2.1 单文件组件名</h4>\n<p>文件扩展名为 <code>.vue</code> 的 <code>single-file components</code> (单文件组件)。单文件组件名应该始终是<strong>单词大写开头</strong> (PascalCase)。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.2.2 单例组件名</h4>\n<p><strong>只拥有单个活跃实例的组件应该以 <code>The</code> 前缀命名，以示其唯一性。</strong></p>\n<p>这不意味着组件只可用于一个单页面，而是<em>每个页面</em>只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的。如果你发现有必要添加 prop，那就表明这实际上是一个可复用的组件，<em>只是目前</em>在每个页面里只使用一次。</p>\n<p>比如，头部和侧边栏组件几乎在每个页面都会使用，不接受 prop，该组件是专门为该应用所定制的。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.2.3 基础组件名</h4>\n<blockquote>\n<p>基础组件：不包含业务，独立、具体功能的基础组件，比如<strong>日期选择器</strong>、<strong>模态框</strong>等。这类组件作为项目的基础控件，会被大量使用，因此组件的 API 进行过高强度的抽象，可以通过不同配置实现不同的功能。</p>\n</blockquote>\n<p>应用特定样式和约定的基础组件(也就是展示类的、无逻辑的或无状态、不掺杂业务逻辑的组件) 应该全部以一个特定的前缀开头 —— Base。<strong>基础组件在一个页面内可使用多次，在不同页面内也可复用，是高可复用组件。</strong></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.2.4 业务组件</h4>\n<blockquote>\n<p>业务组件：它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。</p>\n</blockquote>\n<p><strong>掺杂了复杂业务的组件（拥有自身 <code>data</code>、<code>prop</code> 的相关处理）即业务组件</strong>应该以 <code>Custom</code> 前缀命名。业务组件在一个页面内比如：某个页面内有一个卡片列表，而样式和逻辑跟业务紧密相关的卡片就是业务组件。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.2.5 紧密耦合的组件名</h4>\n<p><strong>和父组件紧密耦合的子组件应该以父组件名作为前缀命名。</strong> 因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.2.6 组件名中单词顺序</h4>\n<p><strong>组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。</strong> 因为编辑器通常会按字母顺序组织文件，所以现在组件之间的重要关系一目了然。如下组件主要是用于搜索和设置功能。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还有另一种多级目录的方式，把所有的搜索组件放到“search”目录，把所有的设置组件放到“settings”目录。我们只推荐在非常大型 (如有 100+ 个组件) 的应用下才考虑这么做，因为在多级目录间找来找去，要比在单个 components 目录下滚动查找要花费更多的精力。</p>\n<h4> 1.2.7 完整单词的组件名</h4>\n<p><strong>组件名应该倾向于而不是缩写。</strong> 编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 1.3 代码参数命名</h3>\n<h4> 1.3.1 name</h4>\n<p><strong>组件名应该始终是多个单词，应该始终是 PascalCase 的。</strong> 根组件 App 以及 <code>&lt;transition&gt;</code>、<code>&lt;component&gt;</code> 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h4> 1.3.2 prop</h4>\n<p><strong>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case</strong>。我们单纯的遵循每个语言的约定，在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.3 router</h4>\n<p><strong>Vue Router Path 命名采用 kebab-case 格式。</strong> 用 Snake（如：<code>/user_info</code>）或 camelCase（如：<code>/userInfo</code>)的单词会被当成一个单词，搜索引擎无法区分语义。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.4 模板中组件</h4>\n<p><strong>对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的，但是在 DOM 模板中总是 kebab-case 的。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.5 自闭合组件</h4>\n<p><strong>在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.6 变量</h4>\n<ul>\n<li>命名方法：camelCase</li>\n<li>命名规范：类型 + 对象描述或属性的方式</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.7 常量</h4>\n<ul>\n<li>命名方法：全部大写下划线分割</li>\n<li>命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.8 方法</h4>\n<ul>\n<li>命名方法：camelCase</li>\n<li>命名规范：统一使用动词或者动词 + 名词形式</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">动词</th>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">can</td>\n<td style=\"text-align:left\">判断是否可执行某个动作 (权 )</td>\n<td style=\"text-align:left\">函数返回一个布尔值。true：可执行；false：不可执行；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">has</td>\n<td style=\"text-align:left\">判断是否含有某个值</td>\n<td style=\"text-align:left\">函数返回一个布尔值。true：含有此值；false：不含有此值；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">is</td>\n<td style=\"text-align:left\">判断是否为某个值</td>\n<td style=\"text-align:left\">函数返回一个布尔值。true：为某个值；false：不为某个值；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get</td>\n<td style=\"text-align:left\">获取某个值</td>\n<td style=\"text-align:left\">函数返回一个非布尔值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set</td>\n<td style=\"text-align:left\">设置某个值</td>\n<td style=\"text-align:left\">无返回值、返回是否设置成功或者返回链式对象</td>\n</tr>\n</tbody>\n</table>\n<h4> 1.3.9 自定义事件</h4>\n<p><strong>自定义事件应始终使用 kebab-case 的事件名。</strong></p>\n<p>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 <code>v-on</code> 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到。</p>\n<ul>\n<li><strong>原生事件参考列表</strong>[1]</li>\n</ul>\n<p>由原生事件可以发现其使用方式如下：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而为了区分<em>原生事件</em>和<em>自定义事件</em>在 Vue 中的使用，建议除了多单词事件名使用 kebab-case 的情况下，命名还需遵守为 <strong><code>on</code> + 动词</strong> 的形式，如下：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 1.3.10 事件方法</h4>\n<ul>\n<li>命名方法：camelCase</li>\n<li>命名规范：handle + 名称（可选）+ 动词</li>\n</ul>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 二、代码规范</h2>\n<hr>\n<h3> 2.1 Vue</h3>\n<h4> 2.1.1 代码结构</h4>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.2 data</h4>\n<p><strong>组件的 <code>data</code> 必须是一个函数。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h4> 2.1.3 prop</h4>\n<p><strong>Prop 定义应该尽量详细。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.4 computed</h4>\n<p><strong>应该把复杂计算属性分割为尽可能多的更简单的属性。</strong> 小的、专注的计算属性减少了信息使用时的假设性限制，所以需求变更时也用不着那么多重构了。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.5 为 <code>v-for</code> 设置键值</h4>\n<p><strong>在组件上必须用 <code>key</code> 搭配 <code>v-for</code></strong>，以便维护内部组件及其子树的状态。甚至在元素上维护可预测的行为，比如动画中的<strong>对象固化 (object constancy)</strong>[2]。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.6 <code>v-if</code> 和 <code>v-for</code> 互斥</h4>\n<p><strong>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>一般我们在两种常见的情况下会倾向于这样做：</p>\n<ul>\n<li>为了过滤一个列表中的项目 (比如 <code>v-for=\"user in users\" v-if=\"user.isActive\"</code>)。在这种情形下，请将 <code>users</code> 替换为一个计算属性 (比如 <code>activeUsers</code>)，让其返回过滤后的列表。</li>\n</ul>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>为了避免渲染本应该被隐藏的列表 (比如 <code>v-for=\"user in users\" v-if=\"shouldShowUsers\"</code>)。这种情形下，请将 <code>v-if</code> 移动至容器元素上 (比如 <code>ul</code>, <code>ol</code>)。</li>\n</ul>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.7 多个 attribute 的元素</h4>\n<p><strong>多个 attribute 的元素应该分多行撰写，每个 attribute 一行。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.8 模板中简单的表达式</h4>\n<p><strong>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。</strong></p>\n<p>复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的<strong>是什么</strong>，而非<strong>如何</strong>计算那个值。而且计算属性和方法使得代码可以重用。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>更好的做法：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.9 带引号的 attribute 值</h4>\n<p><strong>非空 HTML 特性值应该始终带双引号。</strong></p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.1.10 指令缩写</h4>\n<ul>\n<li><strong>用 <code>:</code> 表示 <code>v-bind:</code></strong></li>\n<li><strong>用 <code>@</code> 表示 <code>v-on:</code></strong></li>\n<li><strong>用 <code>#</code> 表示 <code>v-slot:</code></strong></li>\n</ul>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.2 HTML</h3>\n<h4> 2.2.1 文件模板</h4>\n<p>HTML5 文件模板：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>移动端：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>PC 端：</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.2.2 元素及标签闭合</h4>\n<p>HTML 元素共有以下 5 种：</p>\n<ul>\n<li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li>\n<li>原始文本元素：script、style</li>\n<li>RCDATA 元素：textarea、title</li>\n<li>外来元素：来自 MathML 命名空间和 SVG 命名空间的元素</li>\n<li>常规元素：其他 HTML 允许的元素都称为常规元素</li>\n</ul>\n<p>为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：</p>\n<ul>\n<li>所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。</li>\n<li>空元素标签都不加 “/” 字符。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.2.3 代码嵌套</h4>\n<p>元素嵌套规范，每个块状元素独立一行，内联元素可选。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>段落元素与标题元素只能嵌套内联元素。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.3 CSS</h3>\n<h4> 2.3.1 样式文件</h4>\n<p>样式文件必须写上 <code>@charset</code> 规则，并且一定要在样式文件的第一行首个字符位置开始写，编码名用 <code>“UTF-8”</code>。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.3.2 代码格式化</h4>\n<p>样式书写一般有两种：一种是紧凑格式 （Compact），一种是展开格式（Expanded）。</p>\n<ul>\n<li>推荐：展开格式（Expanded）</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：紧凑格式 （Compact）</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.3.3 代码大小写</h4>\n<p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.3.4 代码易读性</h4>\n<ol>\n<li>左括号与类名之间一个空格，冒号与属性值之间一个空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>逗号分隔的取值，逗号之后一个空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>为单个 CSS 选择器或新声明开启新行。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code> <code>hsla()</code> <code>rect()</code> 中不需有空格，且取值不要带有不必要的 0。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>属性值十六进制数值能用简写的尽量用简写。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>不要为 <code>0</code> 指明单位。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.3.5 属性值引号</h4>\n<p>CSS 属性值需要用到引号时，统一使用单引号。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.3.6 属性书写建议</h4>\n<p>建议遵循以下顺序：</p>\n<ol>\n<li>布局定位属性：display / position / float / clear / visibility / overflow</li>\n<li>自身属性：width / height / margin / padding / border / background</li>\n<li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>\n<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient …</li>\n</ol>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3.7 CSS3 浏览器私有前缀</h4>\n<p>CSS3 浏览器私有前缀在前，标准前缀在后。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 2.4 JavaScript</h3>\n<h4> 2.4.1 单行代码块</h4>\n<p>在单行代码块中使用空格。</p>\n<ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.4.2 大括号风格</h4>\n<p>在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：</p>\n<ul>\n<li><strong>【推荐】One True Brace Style</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>Stroustrup</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li><strong>Allman</strong></li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.4.3 代码中的空格</h4>\n<ol>\n<li>逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol>\n<li>代码块前要添加空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>函数声明括号前要加空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>在函数调用时，禁止使用空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>在操作符前后都需要添加空格。</li>\n</ol>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 三、注释规范</h2>\n<hr>\n<p><strong>注释的目的：</strong></p>\n<ul>\n<li><strong>提高代码的可读性，从而提高代码的可维护性</strong></li>\n</ul>\n<p><strong>注释的原则：</strong></p>\n<ul>\n<li><strong>如无必要，勿增注释 ( As short as possible )</strong></li>\n<li><strong>如有必要，尽量详尽 ( As long as necessary )</strong></li>\n</ul>\n<h3> 3.1 HTML 文件注释</h3>\n<h4> 3.1.1 单行注释</h4>\n<p><strong>一般用于简单的描述，如某些状态描述、属性描述等。</strong></p>\n<p>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.1.2 模块注释</h4>\n<p><strong>一般用于描述模块的名称以及模块开始与结束的位置。</strong></p>\n<p>注释内容前后各一个空格字符， <code>&lt;!-- S Comment Text \\--&gt;</code>表示模块开始， <code>&lt;!-- E Comment Text \\--&gt;</code>表示模块结束，模块与模块之间相隔一行。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.1.3 嵌套模块注释</h4>\n<p>当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而改用</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>注释写在模块结尾标签底部，单独一行。</p>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3.2 CSS 文件注释</h3>\n<h4> 3.2.1 单行注释</h4>\n<p>注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.2.2 模块注释</h4>\n<p>注释内容第一个字符和最后一个字符都是一个空格字符，<code>/*</code> 与 模块信息描述占一行，多个横线分隔符 <code>-</code> 与 <code>*/</code> 占一行，行与行之间相隔两行。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.2.3 文件注释</h4>\n<p>在样式文件编码声明 <code>@charset</code> 语句下面注明页面名称、作者、创建日期等信息。</p>\n<div class=\"language-css line-numbers-mode\" data-ext=\"css\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 3.3 JavaScript 文件注释</h3>\n<h4> 3.3.1 单行注释</h4>\n<p>单行注释使用 <code>//</code>，注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>注释行的上方需要有一个空行（<strong>除非注释行上方是一个块的顶部</strong>），以增加可读性。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3.2 多行注释</h4>\n<p>多行注释使用 <code>/** ... */</code>，而不是多行的 <code>//</code>。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3.3 注释空格</h4>\n<p>注释内容和注释符之间需要有一个空格，以增加可读性。eslint: <code>spaced-comment</code>。</p>\n<ul>\n<li>推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>不推荐：</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3.4 特殊标记</h4>\n<p>有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：</p>\n<ul>\n<li>\n<p><code>// FIXME</code> : 说明问题是什么</p>\n</li>\n<li>\n<ul>\n<li><code>// TODO</code> : 说明还要做什么或者问题的解决方案</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3.5 文档类注释</h4>\n<p>文档类注释，如函数、类、文件、事件等；都使用 jsdoc 规范。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.3.6 注释工具</h4>\n<p><code>ESLint</code> 是当下最流行的 JS 代码检查工具，<code>ESLint</code> 中有一些注释相关的规则，用户可选择开启：</p>\n<ul>\n<li><code>valid-jsdoc</code></li>\n<li><code>require-jsdoc</code></li>\n<li><code>no-warning-comments</code></li>\n<li><code>capitalized-comments</code></li>\n<li><code>line-comment-position</code></li>\n<li><code>lines-around-comment</code></li>\n<li><code>multiline-comment-style</code></li>\n<li><code>no-inline-comments</code></li>\n<li><code>spaced-comment</code></li>\n</ul>\n<h2> 四、其它</h2>\n<hr>\n<ul>\n<li>缩进换行请使用两个空格。</li>\n<li>大型团队多人协作项目推荐 JavaScript 代码末尾加分号。</li>\n<li>小型个人创新练手项目可尝试使用 JavaScript 代码末尾不加分号的风格，更加清爽简练。</li>\n</ul>\n",
      "date_published": "2023-04-18T00:00:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue中axios封装、配置不同开发环境变量",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/4.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/4.html",
      "summary": "项目开发中，一般都会有开发环境、测试环境、生产环境等多个环境，所以项目在打包时我们就会调用不同环境的接口，此时我们就要通过配置变量来解决这一问题。 一、配置不同环境变量 下面以开发、测试、生产这 3 个环境为例。 1、在项目根目录创建 3 个不同的文件，代表不同的环境配置 开发环境： .env.development 测试环境： .env.test 生产环境： .env.production",
      "content_html": "<p>项目开发中，一般都会有开发环境、测试环境、生产环境等多个环境，所以项目在打包时我们就会调用不同环境的接口，此时我们就要通过配置变量来解决这一问题。</p>\n<h2> 一、配置不同环境变量</h2>\n<hr>\n<p>下面以开发、测试、生产这 3 个环境为例。</p>\n<h4> 1、在项目根目录创建 3 个不同的文件，代表不同的环境配置</h4>\n<ul>\n<li>开发环境： <code>.env.development</code></li>\n<li>测试环境： <code>.env.test</code></li>\n<li>生产环境： <code>.env.production</code></li>\n</ul>\n<h4> 2、在不同文件配置变量</h4>\n<ul>\n<li>\n<p>.env.development</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>.env.test</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>.env.production</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<p>[注意]: 1、这里声明的 NODE_ENV = 'development' 就表示开发环境 2、除了 baseUrl 和 NODE_ENV ,其他环境变量使用 VUE_APP 开头 ,比如 VUE_APP_XXX 3、然后我们可以通过 process.env.VUE_APP_XXX 来取到定义好的环境变量 4、下文在封装 axios 的 js 文件中赋值 baseUrl 的时候就会通过环境变量取值</p>\n<h4> 3、配置打包命令 package.json</h4>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>[说明]: <code>npm run dev</code>表示：<code>vue-cli-service serve</code>会默认执行<code>.env.development</code>文件；<code>--mode test</code>来指定执行<code>.env.test</code>文件；<code>--mode production</code>来指定执行<code>.env.production</code>文件</p>\n<h2> 二、axios 二次封装</h2>\n<hr>\n<h4> 1、创建<code>request.js</code>文件</h4>\n<p>在<code>src</code>下创建一个<code>utils</code>文件夹，用来放一些工具类型的文件，首先在里面创建一个用来封装<code>axios</code>的文件<code>request</code>，当然文件名自定义</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>[注]: 文件中的<code>baseURL: process.env.VUE_APP_BASE_URL</code>则就是根据不同环境取不同的接口地址</p>\n<h4> 2、创建<code>common.js</code>文件</h4>\n<p>在<code>src</code>下创建一个<code>api</code>文件夹，用来放一些接口的文件,当接口过多的时候可以分类创建接口文件，目前我们先创建一个公共的文件<code>common.js</code>,然后引入刚才封装的<code>request.js</code>文件</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3、页面中使用</h4>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、vue.config.js 配置</h2>\n<hr>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样就完成了根据不同项目启动命令,来自动配置不同环境,匹配指定接口地址了\n例如：\n启动<code>npm run dev-test</code>,\n执行<code>vue-cli-service serve --mode test</code>,\n根据<code>--mode test</code>,\n查找<code>.env.test</code>文件,\n获得环境<code>NODE_ENV</code>为:<code>test环境</code>, 接口地址<code>VUE_APP_BASE_URL</code>为:<code>http://www.test.api</code>\n所以封装的 axios 中的 baseUrl 地址就是<code>http://www.test.api</code>\n调用后的地址就是:<code>http://www.test.api/book/list</code>\n大概就是这么个流程，\n接下来就可以愉快的开发了.</p>\n<figure><figcaption></figcaption></figure>\n",
      "date_published": "2023-03-15T16:09:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue",
        "Axios"
      ]
    },
    {
      "title": "用Vue开发的前端项目如何部署到window系统的Nginx服务器上,只需简单五步",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/5.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/5.html",
      "summary": "1.在 nginx 官网下载稳定版本的 nginx 地址：http://nginx.org/en/download.html 参考下图： 2.nginx 安装包解压路径中不能含有中文，否则 nginx 启动会报错",
      "content_html": "<h2> 1.在 nginx 官网下载稳定版本的 nginx 地址：<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://nginx.org/en/download.html</a> 参考下图：</h2>\n<hr>\n<figure><figcaption></figcaption></figure>\n<h2> 2.nginx 安装包解压路径中不能含有中文，否则 nginx 启动会报错</h2>\n<hr>\n<figure><figcaption></figcaption></figure>\n<h2> 3.使用 npm run build 命令，或者其他自己配置的打包命令将 vue 项目打包，打包完成之后将 vue 项目下生成的 dist 目录拷贝至 nginx/html 目录下</h2>\n<hr>\n<figure><figcaption></figcaption></figure>\n<h2> 4.最关键的一步，在 nginx 下的 conf\\nginx.conf 中修改 nginx 的配置文件，配置修改如下</h2>\n<hr>\n<p>整理后即为下图所示 ：</p>\n<figure><figcaption></figcaption></figure>\n<p>[注]: 注意注意：路由配置为 history 时，刷新会出现 404 问题，配置如上图所示即可解决 404 问题</p>\n<figure><figcaption></figcaption></figure>\n<p>完整原代码：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5.conf 配置文件修改之后，可以在 nginx 的安装目录启动 nginx.exe,也可以使用命令，start nginx 启动项目。</h2>\n<hr>\n<p>最后通过配置文件中的前端服务器地址和前端端口访问 vue 项目即可。</p>\n<p>常用命令</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-10-15T17:09:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue",
        "Nginx"
      ]
    },
    {
      "title": "Vue的nextTick源码解析",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/6.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/6.html",
      "summary": "nextTick 支持两种形式使用方式： 回调函数形式。 如果当前环节支持 Promise，还支持 Promise.then 的形式。 let pending = false, timeFunc, callbacks=[]; //cb:执行的回调函数,context:执行上下文参数 function nextTick(cb,context){ let _resolve=null; callbacks.push(()=&gt;{ if(cb){ try{ cb.call(context) }catch(e){ handleError(e,ctx,'nextTick) } }else if(_resolve){ _resolve(context) } }) if(!pending){ pending=true; timeFunc() } if(!cb&amp;&amp;typeof Promise !== \"undefind\"){ rteurn new Promise(resolve=&gt;_resolve=resolve) } } let isUsingMicroTask = false; if (typeof Promise !== 'undefined' &amp;&amp; isNative(Promise)) { //判断1：是否原生支持Promise const p = Promise.resolve() timerFunc = () =&gt; { p.then(flushCallbacks) if (isIOS) setTimeout(noop) } isUsingMicroTask = true } else if (!isIE &amp;&amp; typeof MutationObserver !== 'undefined' &amp;&amp; ( isNative(MutationObserver) || MutationObserver.toString() === '[object MutationObserverConstructor]' )) { //判断2：是否原生支持MutationObserver let counter = 1 const observer = new MutationObserver(flushCallbacks) const textNode = document.createTextNode(String(counter)) observer.observe(textNode, { characterData: true }) timerFunc = () =&gt; { counter = (counter + 1) % 2 textNode.data = String(counter) } isUsingMicroTask = true } else if (typeof setImmediate !== 'undefined' &amp;&amp; isNative(setImmediate)) { //判断3：是否原生支持setImmediate timerFunc = () =&gt; { setImmediate(flushCallbacks) } } else { //判断4：上面都不行，直接用setTimeout timerFunc = () =&gt; { setTimeout(flushCallbacks, 0) } } function flushCallbacks () { pending = false const copies = callbacks.slice(0) callbacks.length = 0 for (let i = 0; i &lt; copies.length; i++) { copies[i]() } } nextTick(()=&gt;{ console.log(\"nextTick callback\") }) nextTick().then(()=&gt;{ console.log(\"nextTick Promise\") })",
      "content_html": "<p><code>nextTick</code> 支持两种形式使用方式：</p>\n<ol>\n<li>回调函数形式。</li>\n<li>如果当前环节支持 <code>Promise</code>，还支持 <code>Promise.then</code> 的形式。</li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-02-15T16:09:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue中的响应性语法糖已废弃",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/7.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/7.html",
      "summary": "介绍 自从引入组合式 API 的概念以来，一个主要的未解决的问题就是 ref 和 reactive 到底用哪个。reactive 存在解构丢失响应性的问题，而 ref 需要到处使用 .value 则感觉很繁琐，并且在没有类型系统的帮助时很容易漏掉 .value。 例如，下面的计数器： &lt;template&gt; &lt;button @click=\"increment\"&gt;{{ count }}&lt;/button&gt; &lt;/template&gt;",
      "content_html": "<h2> 介绍</h2>\n<hr>\n<p>自从引入组合式 API 的概念以来，一个主要的未解决的问题就是 <code>ref</code> 和 <code>reactive</code> 到底用哪个。<code>reactive</code> 存在解构丢失响应性的问题，而 <code>ref</code> 需要到处使用 <code>.value</code> 则感觉很繁琐，并且在没有类型系统的帮助时很容易漏掉 <code>.value</code>。</p>\n<p>例如，下面的计数器：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用 <code>ref</code> 定义 <code>count</code> 变量和 <code>increment</code> 方法：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>而使用响应性语法糖，我们可以像这样书写代码：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>Vue 的响应性语法糖是一个编译时的转换步骤，<code>$ref()</code> 方法是一个<strong>编译时的宏命令</strong>，它不是一个真实的、在运行时会调用的方法，而是用作 Vue 编译器的标记，表明最终的 <code>count</code> 变量需要是一个<strong>响应式变量</strong>。</li>\n<li>响应式的变量可以像普通变量那样被访问和重新赋值，但这些操作在编译后都会变为带 <code>.value</code> 的 <code>ref</code>。所以上面例子中的代码也会被编译成使用 <code>ref</code> 定义的语法。</li>\n<li>每一个会返回 <code>ref</code> 的响应式 API 都有一个相对应的、以 <code>$</code> 为前缀的宏函数。包括以下这些 API：</li>\n</ol>\n<ul>\n<li>ref -&gt; $ref</li>\n<li>computed -&gt; $computed</li>\n<li>shallowRef -&gt; $shallowRef</li>\n<li>customRef -&gt; $customRef</li>\n<li>toRef -&gt; $toRef</li>\n</ul>\n<ol>\n<li>可以使用 <code>$()</code> 宏来将现存的 <code>ref</code> 转换为响应式变量。</li>\n</ol>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>可以使用 <code>$$()</code> 宏来将任何对响应式变量的引用都会保留为对相应 <code>ref</code> 的引用。</li>\n</ol>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>$$()</code> 也适用于已解构的 <code>props</code>，因为它们也是响应式的变量。编译器会高效地通过 <code>toRef</code> 来做转换：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 配置</h2>\n<hr>\n<p>响应性语法糖是 <strong>组合式 API</strong> 特有的功能，且必须通过构建步骤使用。</p>\n<ol>\n<li>必须，需要 <code>@vitejs/plugin-vue@&gt;=2.0.0</code>，将应用于 SFC 和 js(x)/ts(x) 文件。</li>\n</ol>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>注意 <code>reactivityTransform</code> 现在是一个插件的顶层选项，而不再是位于 <code>script.refSugar</code> 之中了，因为它不仅仅只对 SFC 起效。</li>\n</ul>\n<p>如果是 <code>vue-cli</code> 构建，需要 <code>vue-loader@&gt;=17.0.0</code>，目前仅对 SFC 起效。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果是 <code>webpack</code> + <code>vue-loader</code> 构建，需要 <code>vue-loader@&gt;=17.0.0</code>，目前仅对 SFC 起效。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>可选，<code>tsconfig.json</code> 文件中添加如下代码, 不然会报错 <code>TS2304: Cannot find name '$ref'.</code>，虽然不影响使用,但是会影响开发体验：</li>\n</ol>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><ol>\n<li>可选，<code>eslintrc.cjs</code> 文件中添加如下代码，不然会提示 <code>ESLint: '$ref' is not defined.(no-undef)</code>：</li>\n</ol>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>4.当启用响应性语法糖时，这些宏函数都是全局可用的、无需手动导入。也可以在 vue 文件中显式引入 <code>vue/macros</code>，这样就不用配置第二和第三步中的 <code>tsconfig.json</code> 和 <code>eslintrc</code> 了。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 已废弃的实验性功能</h2>\n<hr>\n<ol>\n<li>响应性语法糖曾经是一个实验性功能，且已被废弃，请阅读<strong>废弃原因</strong>[1]。</li>\n<li>在未来的一个小版本更新中，它将会从 Vue core 中被移除。如需继续使用，请通过 <strong>Vue Macros</strong>[2] 插件</li>\n</ol>\n<h2> 废弃原因</h2>\n<hr>\n<p>尤雨溪在 2023 年 2 月 21 日上午 10:05 GMT+8，亲自给出了废弃的原因，翻译如下：</p>\n<p>正如你们中的许多人已经知道的那样，我们在团队一致同意的情况下正式放弃了这个 RFC。</p>\n<h3> 理由</h3>\n<p>Reactivity Transform 的最初目标是通过在处理反应状态时提供更简洁的语法来改善开发人员的体验。我们将其作为实验性产品发布，以收集来自现实世界使用情况的反馈。尽管提出了这些好处，我们还是发现了以下问题：</p>\n<ol>\n<li>失去 <code>.value</code> 使得更难分辨正在跟踪的内容以及哪条线触发了反应效果。这个问题在小型 SFC 中并不那么明显，但在大型代码库中，心理开销变得更加明显，特别是如果语法也在 SFC <strong>之外使用。</strong></li>\n<li>由于 (1)，一些用户选择仅在 SFC 内部使用 Reactivity Transform，这会在不同心智模型之间造成不一致和上下文转换成本。因此，困境在于仅在 SFC 内部使用它会导致不一致，但在 SFC 外部使用它会损害可维护性。</li>\n<li>由于仍然会有外部函数期望使用原始引用，因此反应变量和原始引用之间的转换是不可避免的。这最终增加了更多的学习内容和额外的精神负担，我们注意到这比普通的 Composition API 更让初学者感到困惑。</li>\n</ol>\n<p>最重要的是，碎片化的潜在风险。尽管这是明确的选择加入，但一些用户对该提议表示强烈反对，原因是他们担心他们将不得不与不同的代码库一起工作，在这些代码库中，有些人选择了使用它，而有些人则没有。这是一个合理的担忧，因为 Reactivity Transform 需要一种不同的心智模型，它会扭曲 JavaScript 语义（变量赋值能够触发反应效果）。</p>\n<p>考虑到所有因素，我们认为将其作为一个稳定的功能使用会导致问题多于收益，因此不是一个好的权衡。</p>\n<h3> 迁移计划</h3>\n<ul>\n<li>该功能已经通过 <strong>Vue Macros</strong>[3] 以外部包的形式得到支持。</li>\n<li>3.3：该功能将被标记为已弃用。它将继续工作，但您应该在此期间迁移到 Vue Macros。</li>\n<li>3.4：该功能将从核心中删除，除非使用 Vue Macros，否则将不再有效。</li>\n</ul>\n<h3> 留言</h3>\n<ul>\n<li>虽然 Reactivity Transform 会从官方包中移除，但我认为这是一个很好的尝试。</li>\n<li>写得好。我喜欢详细的 RFC 和基于用户反馈的客观评估。最后的结论很有道理。不要让完美成为优秀的敌人。</li>\n<li>虽然我很享受这个功能带来的便利，但我在实际使用中确实发现了这个潜在的碎片问题。在未来的版本中删除此功能可能不太情愿，但工程师应该认真对待。🙂</li>\n<li>您是删除所有功能还是仅删除 <code>ref.value</code> 进行转换的部分？响应式 <code>props</code> 解构呢，它会留下来吗？</li>\n<li>我一直在将它用于中等规模的电子商务网站，没有任何问题。我理解删除它背后的基本原理，但在实践中我发现它确实是一个很大的改进。所以我的问题是：现在怎么办？</li>\n<li>是否建议那些讨厌 <code>.value</code> 的人现在尽可能避免使用 <code>ref()</code> 并像以前那样使用 <code>reactive()</code>？</li>\n<li><code>.value</code> 是必要的复杂性。就像任何其他响应式库 <code>xxx.set()</code> 一样。</li>\n<li>创建一个转换所有 Reactivity Transform 代码的包应该很容易吧？我也喜欢按照推荐的方式做事。</li>\n<li>...</li>\n</ul>\n<h3> 参考资料</h3>\n<p>[1]废弃原因: <em><a href=\"https://github.com/vuejs/rfcs/discussions/369#discussioncomment-5059028\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/vuejs/rfcs/discussions/369#discussioncomment-5059028</a></em></p>\n<p>[2]Vue Macros: <em><a href=\"https://vue-macros.sxzz.moe/features/reactivity-transform.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://vue-macros.sxzz.moe/features/reactivity-transform.html</a></em></p>\n<p>[3]Vue Macros: <em><a href=\"https://vue-macros.sxzz.moe/features/reactivity-transform.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://vue-macros.sxzz.moe/features/reactivity-transform.html</a></em></p>\n",
      "date_published": "2022-02-15T00:00:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue 前端设计模式梳理",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/8.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/8.html",
      "summary": "一、什么是设计模式？ 设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性。 设计模式实际上是“拿来主义”在软件领域的贯彻实践，它是一套现成的工具，拿来即用。下面来看一下设计模式的设计原则。 二、设计几个原则 单一职责原则、开放封闭原则、里式替换原则、接口隔离原则 、依赖反转原则 、最少知识原则。 下面我们一起来看看几种在前端领域常见的设计模式： 单例模式、工厂模式、策略模式、代理模式、适配器模式、观察者模式/发布-订阅模式",
      "content_html": "<h2> 一、什么是设计模式？</h2>\n<hr>\n<p>设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性。</p>\n<p>设计模式实际上是“拿来主义”在软件领域的贯彻实践，它是一套现成的工具，拿来即用。下面来看一下设计模式的设计原则。</p>\n<h2> 二、设计几个原则</h2>\n<hr>\n<p>单一职责原则、开放封闭原则、里式替换原则、接口隔离原则 、依赖反转原则 、最少知识原则。</p>\n<p>下面我们一起来看看几种在前端领域常见的设计模式：</p>\n<p>单例模式、工厂模式、策略模式、代理模式、适配器模式、观察者模式/发布-订阅模式</p>\n<h2> 三、常见的设计模式及实际案例</h2>\n<hr>\n<h3> 单例模式</h3>\n<hr>\n<h4> 1.什么是单例模式？</h4>\n<p>单例模式 （Singleton Pattern）又称为单体模式，保证一个类只有一个实例，并提供一个访问它的全局访问点。也就是说，第二次使用同一个类创建新对象的时候，应该得到与第一次创建的对象完全相同的对象。</p>\n<h4> Vue 中的单例模式</h4>\n<p>（1）Element UI</p>\n<p>Element UI 是使用 Vue 开发的一个前端 UI 框架。ElementUI 中的全屏 Loading 蒙层调用有两种形式：</p>\n<p>● 指令形式：Vue.use(Loading.directive)</p>\n<p>● 服务形式：Vue.prototype.$loading = service</p>\n<p>指令形式注册的使用方式 ：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>服务形式注册的使用方式 ：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>用服务方式使用全屏 Loading 是单例的，即在前一个全屏 Loading 关闭前再次调用全屏 Loading，并不会创建一个新的 Loading 实例，而是返回现有全屏 Loading 的实例。</p>\n<p>下面是 ElementUI 实现全屏 Loading 的源码：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里的单例是 fullscreenLoading，是存放在闭包中的，如果用户传的 options 的 fullscreen 为 true 且已经创建了单例，则直接返回之前创建的单例，如果之前没有创建过，则创建单例并赋值给闭包中的 fullscreenLoading 后返回新创建的单例实例。</p>\n<p>（2）Vuex</p>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。Vuex，它们都实现了一个全局的 Store 用于存储应用的所有状态。这个 Store 的实现，正是单例模式的典型应用。</p>\n<p>Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。——Vuex 官方文档</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过调用 Vue.use()方法，安装了 Vuex 插件。Vuex 插件是一个对象，它在内部实现了一个 install 方法，这个方法会在插件安装时被调用，从而把 Store 注入到 Vue 实例里去。也就是说每 install 一次，都会尝试给 Vue 实例注入一个 Store。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以保证一个 Vue 实例（即一个 Vue 应用）只会被 install 一次 Vuex 插件，所以每个 Vue 实例只会拥有一个全局的 Store。</p>\n<h3> 工厂模式</h3>\n<hr>\n<h4> 1.什么是工厂模式？</h4>\n<p>工厂模式就是根据不用的输入返回不同的实例，一般用来创建同一类对象，它的主要思想就是将对象的创建与对象的实现分离。\n在创建对象时，不暴露具体的逻辑，而是将逻辑封装在函数中，那么这个函数就可以被视为一个工厂。工厂模式根据抽象程度的不同可以分为：简单工厂、工厂方法、抽象工厂。</p>\n<h4> Vue 中的工厂模式</h4>\n<p>（1）VNode</p>\n<p>和原生的 document.createElement 类似，Vue 这种具有虚拟 DOM 树（Virtual Dom Tree）机制的框架在生成虚拟 DOM 的时候，提供了 createElement 方法用来生成 VNode，用来作为真实 DOM 节点的映射：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>createElement 函数结构大概如下：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>（2）vue-route</p>\n<p>在 Vue 在路由创建模式中，也多次用到了工厂模式：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>mode 是路由创建的模式，这里有三种 History、Hash、Abstract，其中，History 是 H5 的路由方式，Hash 是路由中带 # 的路由方式，Abstract 代表非浏览器环境中路由方式，比如 Node、weex 等；this.history 用来保存路由实例，vue-router 中使用了工厂模式的思想来获得响应路由控制类的实例。</p>\n<h3> 策略模式</h3>\n<hr>\n<h4> 1.什么是策略模式？</h4>\n<p>策略模式 （Strategy Pattern）又称政策模式，其定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。封装的策略算法一般是独立的，策略模式根据输入来调整采用哪个算法。关键是策略的实现和使用分离。</p>\n<h4> 策略模式的实际应用</h4>\n<p>（1）表格 formatter</p>\n<p>Element UI 的表格控件的 Column 接受一个 formatter 参数，用来格式化内容，其类型为函数，并且还可以接受几个特定参数，像这样：Function(row, column, cellValue, index)。</p>\n<p>以文件大小转化为例，后端经常会直接传 bit 单位的文件大小，那么前端需要根据后端的数据，根据需求转化为自己需要的单位的文件大小，比如 KB/MB。</p>\n<p>首先实现文件计算的算法：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在组件中直接使用：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>运行结果如下图</p>\n<figure><figcaption></figcaption></figure>\n<p>（2）表单验证</p>\n<p>除了表格中的 formatter 之外，策略模式也经常用在表单验证的场景。Element UI 的 Form 表单 具有表单验证功能，用来校验用户输入的表单内容。实际需求中表单验证项一般会比较复杂，所以需要给每个表单项增加 validator 自定义校验方法。</p>\n<p>实现通用的表单验证方法：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>增加一个柯里化方法，用来生成表单验证函数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>具体使用：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果如图：</p>\n<figure><figcaption></figcaption></figure>\n<h3> 代理模式</h3>\n<hr>\n<h4> 1.什么是代理模式？</h4>\n<p>代理模式 （Proxy Pattern）又称委托模式，它为目标对象创造了一个代理对象，以控制对目标对象的访问。</p>\n<p>代理模式把代理对象插入到访问者和目标对象之间，从而为访问者对目标对象的访问引入一定的间接性。正是这种间接性，给了代理对象很多操作空间，比如在调用目标对象前和调用后进行一些预操作和后操作，从而实现新的功能或者扩展目标的功能。</p>\n<h4> 代理模式在实战中的应用</h4>\n<p>（1）拦截器</p>\n<p>在项目中经常使用 Axios 的实例来进行 HTTP 的请求，使用拦截器 interceptor 可以提前对 request 请求和 response 返回进行一些预处理，比如：\n1、request 请求头的设置，和 Cookie 信息的设置；\n2、权限信息的预处理，常见的比如验权操作或者 Token 验证；\n3、数据格式的格式化，比如对组件绑定的 Date 类型的数据在请求前进行一些格式约定好的序列化操作；\n4、空字段的格式预处理，根据后端进行一些过滤操作；\n5、response 的一些通用报错处理，比如使用 Message 控件抛出错误；</p>\n<p>除了 HTTP 相关的拦截器之外，还有路由跳转的拦截器，可以进行一些路由跳转的预处理等操作。</p>\n<p>（2）前端框架的数据响应式化</p>\n<p>Vue 2.x 中通过 Object.defineProperty 来劫持各个属性的 setter/getter，在数据变动时，通过发布-订阅模式发布消息给订阅者，触发相应的监听回调，从而实现数据的响应式化，也就是数据到视图的双向绑定。</p>\n<p>为什么 Vue 2.x 到 3.x 要从 Object.defineProperty 改用 Proxy 呢，是因为前者的一些局限性，导致的以下缺陷：\n1、无法监听利用索引直接设置数组的一个项，例如：vm.items[indexOfItem] = newValue；\n2、无法监听数组的长度的修改，例如：vm.items.length = newLength；\n3、无法监听 ES6 的 Set、WeakSet、Map、WeakMap 的变化；\n4、无法监听 Class 类型的数据；\n5、无法监听对象属性的新加或者删除；</p>\n<h3> 适配器模式</h3>\n<hr>\n<h4> 1.什么是适配器模式？</h4>\n<p>适配器模式（Adapter Pattern）又称包装器模式，将一个类（对象）的接口（方法、属性）转化为用户需要的另一个接口，解决类（对象）之间接口不兼容的问题。</p>\n<p>主要功能是进行转换匹配，目的是复用已有的功能，而不是来实现新的接口。也就是说，访问者需要的功能应该是已经实现好了的，不需要适配器模式来实现，适配器模式主要是负责把不兼容的接口转换成访问者期望的格式而已。</p>\n<h4> 适配器的实际案例</h4>\n<p>（1）Vue 计算属性</p>\n<p>Vue 中的计算属性也是一个适配器模式的实例，以官网的例子为例：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对原有数据并没有改变，只改变了原有数据的表现形式。</p>\n<p>（2） 源码中的适配器模式</p>\n<p>Axios 的用来发送请求的 adapter 本质上是封装浏览器提供的 API XMLHttpRequest。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这个模块主要是对请求头、请求配置和一些回调的设置，并没有对原生的 API 有改动，所以也可以在其他地方正常使用。这个适配器可以看作是对 XMLHttpRequest 的适配，是用户对 Axios 调用层到原生 XMLHttpRequest 这个 API 之间的适配层。</p>\n<h3> 观察者模式/发布-订阅模式</h3>\n<hr>\n<p><strong>1. 什么是观察者模式？</strong></p>\n<p>观察者模式（Observer Pattern）定义了一种一对多的关系，让多个订阅者对象同时监听某一个发布者，或者叫主题对象，这个主题对象的状态发生变化时就会通知所有订阅自己的订阅者对象，使得它们能够自动更新自己。</p>\n<p>2**. 什么是发布-订阅模式？**</p>\n<p>其实它是发布订阅模式的一个别名，但两者又有所不同。这个别名非常形象地诠释了观察者模式里两个核心的角色要素——发布者和订阅者。</p>\n<p><strong>发布-订阅模式有一个调度中心</strong></p>\n<figure><figcaption></figcaption></figure>\n<p>观察者模式是由具体目标调度的，而发布-订阅模式是统一由调度中心调的</p>\n<p><strong>Vue 中的发布-订阅模式</strong></p>\n<p>（1）EventBus</p>\n<p>在 Vue 中有一套事件机制，其中一个用法是 EventBus。可以使用 EventBus 来解决组件间的数据通信问题。</p>\n<h4> 1.创建事件中心管理组件之间的通信</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 2.发送事件</h4>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>firstCom 组件中发送事件：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> 3.接收事件</h4>\n<p>在 secondCom 组件中发送事件：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>（2）Vue 源码</p>\n<p>发布-订阅模式在源码中应用很多，比如双向绑定机制的场景</p>\n<figure><figcaption></figcaption></figure>\n<p>响应式化大致就是使用 Object.defineProperty 把数据转为 getter/setter，并为每个数据添加一个订阅者列表的过程。这个列表是 getter 闭包中的属性，将会记录所有依赖这个数据的组件。也就是说，响应式化后的数据相当于发布者。</p>\n<p>每个组件都对应一个 Watcher 订阅者。当每个组件的渲染函数被执行时，都会将本组件的 Watcher 放到自己所依赖的响应式数据的订阅者列表里，这就相当于完成了订阅，一般这个过程被称为依赖收集（Dependency Collect）。\n组件渲染函数执行的结果是生成虚拟 DOM 树（Virtual DOM Tree），这个树生成后将被映射为浏览器上的真实的 DOM 树，也就是用户所看到的页面视图。\n当响应式数据发生变化的时候，也就是触发了 setter 时，setter 会负责通知（Notify）该数据的订阅者列表里的 Watcher，Watcher 会触发组件重渲染（Trigger re-render）来更新（update）视图。</p>\n<p>Vue 的源码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-04-15T16:09:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue 刷新当前页出现404解决方法之Nginx",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/9.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/9.html",
      "summary": "history模式会出现刷新页面后，页面出现 404。解决的办法是用nginx配置一下。 在nginx的配置文件中修改 方法一： location /{ root /data/nginx/html; index index.html index.htm; if (!-e $request_filename) { rewrite ^/(.*) /index.html last; break; } }",
      "content_html": "<p><code>history</code>模式会出现刷新页面后，页面出现 404。解决的办法是用<code>nginx</code>配置一下。\n在<code>nginx</code>的配置文件中修改</p>\n<h1> 方法一：</h1>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1> 方法二：</h1>\n<p>vue.js 官方教程里提到的<a href=\"https://router.vuejs.org/zh/guide/essentials/history-mode.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>两种方案的的本质是一样的，就是 rewrite 一下，将 router 写到 index.html 中，然后交由路由处理资源才可以。</p>\n<p>自己记录一下本方案，方便后续出现问题使用。</p>\n",
      "date_published": "2023-02-15T16:09:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "Vue",
        "Nginx"
      ]
    },
    {
      "title": "6个让你少写多做的 ES6 技巧",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/1.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/1.html",
      "summary": "主要想跟大家分享 6 个实用的 ES6 技巧，希望这 6 个小技巧能够帮助到你。 下面我们开始今天的内容吧。 1.Array.of 关于奇怪的 Array 函数： 众所周知，我们可以通过 Array 函数来做以下事情。 初始化一个指定长度的数组。 设置数组的初始值。 // 1. Initialize an array of the specified length const array1 = Array(3); // [ , , ] // 2. Set the initial value of the array const array2 = Array(); // [] const array3 = Array(undefined); // [ undefined ] const array4 = Array(1, 2, 3); // [ 1, 2, 3 ]",
      "content_html": "<p>主要想跟大家分享 6 个实用的 ES6 技巧，希望这 6 个小技巧能够帮助到你。</p>\n<p>下面我们开始今天的内容吧。</p>\n<h2> 1.Array.of</h2>\n<hr>\n<p>关于奇怪的 Array 函数：</p>\n<p>众所周知，我们可以通过 Array 函数来做以下事情。</p>\n<p>初始化一个指定长度的数组。</p>\n<p>设置数组的初始值。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>传递给 Array 函数的参数个数不一样，其功能也不一样。这常常让我感到困惑。</p>\n<p>幸运的是，我们可以使用 Array.of 来弥补 Array 的不足。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.Array.from</h2>\n<hr>\n<p>从方法中，我们可以通过 Array.from 方法将类数组对象、arguments 对象和 NodeList 对象转换为真正的数组。</p>\n<p><strong>1).类数组对象</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>2).节点列表</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>3).Arguments</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>4).Array.from 的第二个参数</strong></p>\n<p>我们可以像“[].map”一样使用 Array.from 方法。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 3.includes</h2>\n<hr>\n<p>我们经常会写这样的判断语句，在满足其中一个条件的情况下做某事。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其实，可以通过 include 方法来简化代码。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 4.使用“at 方法”读取数组的尾元素</h2>\n<hr>\n<p>你如何读取数组的尾部元素？是的，我们需要以“array.length-1”作为下标来读取。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还有别的办法吗？</p>\n<p>是的，“at”方法将成为您的魔法。当然，您可以读取数组中其他位置的元素。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 5.flat</h2>\n<hr>\n<p>flat() 方法创建一个新数组，其中所有子数组元素以递归方式连接到指定深度。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 6.findIndex</h2>\n<hr>\n<p>findIndex() 方法返回数组中满足提供的测试函数的第一个元素的索引。否则，它返回 -1，表示没有元素通过测试。”</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2023-04-14T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "SEO优化重要的元标签",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/10.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/10.html",
      "summary": "1.Title 标签 &lt;title&gt;页面标签&lt;/title&gt; &lt;title/&gt;标签可以说是最主要、最重要的 SEOn 优化的元素。它将直接显示在搜索引擎的接口页里面，社交媒体分享，浏览器的标签页都将直接使用这个标题。",
      "content_html": "<h2> 1.Title 标签</h2>\n<hr>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>&lt;title/&gt;</code>标签可以说是最主要、最重要的 SEOn 优化的元素。它将直接显示在搜索引擎的接口页里面，社交媒体分享，浏览器的标签页都将直接使用这个标题。</p>\n<p>标题对于让用户快速了解搜索结果的内容至关重要。这是用户对你网页的第一印象，它通常是决定点击哪个结果的重要影响因素，因此在你的网页上使用高质量的标题很重要。</p>\n<p>最佳实践：</p>\n<ul>\n<li>为每个页面写一个唯一的标题标签</li>\n<li>简短但具有描述性</li>\n<li>避免通用和模糊的标题</li>\n<li>创造一些值得点击的东西，抓住用户的好奇心</li>\n<li>去猜测搜索意图，尽量匹配上</li>\n<li>包含长尾关键字</li>\n<li>保持在 60 个字符以内，超过这个长度搜索引擎会将标题截断</li>\n</ul>\n<h2> 2.Meta Description 标签</h2>\n<hr>\n<p>该 meta 标签用于描述总结页面的内容。搜索引擎经常将其用于搜索结果的片段中，放在标题下面。它占据了搜索结果片段的很大部分的内容，内容的好坏很大程度上会影响用户是否点击这个结果，你需要设置一个引人注目的描述。谷歌不使用描述作为排名英语。</p>\n<p>最佳实践：</p>\n<ul>\n<li>给每个页面一个独特的描述，并清楚的反映内容</li>\n<li>描述必须即真实又吸引人</li>\n<li>Google 的摘要通常最多可包含 150-160 个字符(包括空格)</li>\n<li>包括你最重要的关键字，以便它们可以在搜索结果页上突出显示，但要小心避免关键字堆砌</li>\n</ul>\n<h2> 3.标题标签(h1-h6)</h2>\n<hr>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>标题标签是 HTML 标签，HTML<code>&lt;h1&gt;-&lt;h6&gt;</code>标题(Heading)元素呈现了六个不同的级别的标题，<code>&lt;h1&gt;</code> 级别最高，而<code>&lt;h6&gt;</code>级别最低。它可以用来识别内容的结果层级。</p>\n<p>现在标题标签不再是搜索引擎排名因素，标题标签中添加关键字，不一定可以使你的排名更好，但是对爬虫来说理解组织良好的内容更为容易。同时也方便用户理解页面内容。</p>\n<p>最佳实践：</p>\n<ul>\n<li>给每个页面一个独特的描述，并清楚地放映内容</li>\n<li>描述必须即真实又吸引人</li>\n<li>Google 的摘要通常最多可包含 150-160 个字符（包括空格）</li>\n<li>包括你最重要的关键字，以便它们可以在搜索结果页上上突出显示，但要小心避免关键字堆砌</li>\n</ul>\n<h2> 4.图片 Alt 属性</h2>\n<hr>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>图片的 alt 属性被添加到<code>&lt;img/&gt;</code>标签以描述其内容。</p>\n<p>Alt 属性在页面优化方面很重要，原因有两个：</p>\n<ul>\n<li>如果无法加载任何特定图像(或图像被禁用)，则会访问者显示替代文本。</li>\n<li>搜索引擎无法读取图像，你应该为图像添加适当的替代文字，以便搜索引擎知道如何解释它们</li>\n</ul>\n<p>最佳实践：</p>\n<ul>\n<li>始终使用正确的描述，切勿在此标签中填充关键字</li>\n<li>使用信息丰富的文件名，且清楚明了</li>\n<li>创建图像站点地图</li>\n<li>在替代文本中使用 50-55 个字符(最多 16 个单词)</li>\n</ul>\n<h2> 5.Robots Meta 标签</h2>\n<hr>\n<p>机器人元标记告诉搜索引擎索引或不索引你的网页。</p>\n<p>该标签对搜索引擎爬虫有四个主要值：</p>\n<ul>\n<li>follow - 搜索引擎爬虫将跟随该网页中的所有链接</li>\n<li>index – 搜索引擎爬虫会索引整个网页</li>\n<li>nofollow – 搜索引擎爬虫不会跟踪页面和该网页中的任何链接</li>\n<li>noindex – 搜索引擎爬虫不会将该网页编入索引 为你的机器人元标记使用以下语法：</li>\n</ul>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>最佳实践：</p>\n<ul>\n<li>仅当你想限制搜索引擎抓取页面时才使用 Robots meta 标签</li>\n<li>不要在 robots.txt 中屏蔽带 Robots meta 标签的页面</li>\n</ul>\n<h2> 6.Canonical 标签</h2>\n<hr>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>rel=“canonical” link 标签为类似网页或重复网页指定权威网页。 它告诉搜索引擎哪个版本的页面是主要页面并希望被搜索引擎索引。</p>\n<h2> 7.社交媒体 Meta 标签</h2>\n<hr>\n<p>现如今有两个主要标准定义如何格式化此元数据：Twitter Cards 和 Facebook Open Graph 协议。</p>\n<h3> 一、Facebook Open Graph</h3>\n<hr>\n<p>Open Graph （开放图谱协议）由 Facebook 的创建，简称 OG 协议或 OGP。它是 Facebook 在 2010 年 F8 开发者大会公布的一种网页元信息（Meta Information）标记协议，属于 Meta Tag （Meta 标签）的范畴，是一种为社交分享而生的 Meta 标签。它允许在 Facebook 上，其他网站能像 Facebook 内容一样具有丰富的媒体对象，进而促进 Facebook 和其他网站之间的集成。</p>\n<p>Open Graph 标签不仅被 Facebook 使用，也被 LinkedIn 和 Twitter 等平台使用。请注意 Twitter 也有自己的一套 Twitter Cards 定义，如果网页提供了 Twitter 自己的定义，则优先使用自己的标准。</p>\n<h4> Open Graph 常用属性</h4>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>对于 Open Graph 来说，每个页面里需要以上四个必需属性：</p>\n<ul>\n<li>og:title - 网页的标题，例如“刘星的个人网站”</li>\n<li>og:type - 网页的类型，所描述内容的类型。可以是 article，book，website, profile 等</li>\n<li>og:image - 一个图像 URL, 用于设置与页面关联的图像</li>\n<li>og:url - 对象的规范 URL</li>\n</ul>\n<p>Open Graph 协议定义了一些网页类型， 包括 article、book、website、profile 等。</p>\n<p>如果你的网页为个人主页，<code>og:type</code> 可以为 <code>profile</code>；如果你的网页是一个视频为主的网页面，则可以为<code>video</code>；如果你的网页是一篇博客文章则可以为<code>article</code>。如果你的网页没什么特殊的类别，则可将<code>og:type</code> 设置为通用的<code>website</code>。</p>\n<p>除了以上四个必需属性之外，Open Graph 还有以下常用属性：</p>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>og:site_name 你的网站的名称</li>\n<li>og:description 你的页面的描述</li>\n<li>og:audio - 网页中的音频链接</li>\n<li>og:locale - 标记语言环境。格式为 language_TERRITORY。默认为 en_US。</li>\n<li>og:video - 你网页中的视频链接</li>\n</ul>\n<p>除了以上介绍的常用内容外，Open Graph 还有很多属性。有关 Open Graph 协议的更多信息，请访问官方 Open Graph 协议网站 <a href=\"https://ogp.me/\" target=\"_blank\" rel=\"noopener noreferrer\">https://ogp.me/</a></p>\n<p>如果你的网站设置了 Open Graph 你可以使用 <a href=\"https://developers.facebook.com/tools/debug/\" target=\"_blank\" rel=\"noopener noreferrer\">facebook 的 debug 工具</a> 来调试及查看显示效果</p>\n<h3> 二、Twitter Card</h3>\n<hr>\n<p>大多数社交网站都遵循 Open Graph 协议，但是也有一些平台自己实现了一些定义，例如 Twitter。</p>\n<p>Twitter Cards 是 Twitter 使用的元数据规范，用于在 Twitter 上共享链接时显示富文本、图像和视频。</p>\n<h4> Twitter Cards 常用属性</h4>\n<p>Twitter Cards 有四种不同的类型：Summary, Summary Card With Large Image, App, 和 Player.</p>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>twitter:card : 卡片类型，将是 summary、summary_large_image、app 或 player 之一</li>\n<li>twitter:site : 用于卡片页脚中使用的网站 @username</li>\n<li>twitter:creator ：内容创建者 / 作者的 @username</li>\n<li>twitter:url : 分享对象的链接</li>\n<li>twitter:title : 分享对象的标题 （最多 70 个字符）</li>\n<li>twitter:description : 分享对象的描述 （最多 200 个字符）</li>\n<li>twitter:image : 分享对象的图片 URL, 支持的格式有 JPG、PNG、WEBP 和 GIF。只会导入 GIF 的第一帧</li>\n</ul>\n<p>上面介绍了 Twitter Cards 一些常用属性，有关其他 Twitter Card 标签和选项的更多信息，请访问『官方 Twitter Cards 文档』<a href=\"https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards\" target=\"_blank\" rel=\"noopener noreferrer\">( https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/abouts-cards)</a>。</p>\n<p>如果你的网站设置了 Open Graph 你可以使用 <a href=\"https://cards-dev.twitter.com/validator\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter Cards</a> 验证器 来调试及查看显示效果</p>\n<h4> Open Graph 与 Twitter Cards 常用属性汇总</h4>\n<p>Facebook 和 Twitter 提供了有关如何使用上述元标记的指南。在下表中，我们总结了有关它们的基本信息以及各自的建议。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">元标签</th>\n<th style=\"text-align:center\">facebook</th>\n<th style=\"text-align:center\">twitter</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">标题</td>\n<td style=\"text-align:center\">og:title 文章的标题，例如你的网站名称。</td>\n<td style=\"text-align:center\">twitter:title Twitter 卡片的必需参数，最大长度 70 个字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">图片</td>\n<td style=\"text-align:center\">og:image 当有人将内容分享到 Facebook 时显示的图像的 URL</td>\n<td style=\"text-align:center\">twitter:image 表示页面内容的唯一图像的 URL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">网站</td>\n<td style=\"text-align:center\">og:url 你页面的规范 URL</td>\n<td style=\"text-align:center\">twitter:url 你页面的规范 URL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">描述</td>\n<td style=\"text-align:center\">og:description 对内容的简要描述，通常在 2 到 4 个句子之间。这将显示在 Facebook 帖子的标题下方</td>\n<td style=\"text-align:center\">Twitter:description 简明概括内容的描述，适合在推文中呈现。你不应重复使用标题作为描述或使用此字段来描述网站提供的一般服务</td>\n</tr>\n</tbody>\n</table>\n<h2> 8. 响应式设计 viewport Meta 标签</h2>\n<hr>\n<p>视口标记允许你配置页面在任何设备上的缩放和显示方式。</p>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>视口元标记与排名没有直接关系，但与用户体验有关。</p>\n<p>同时谷歌在移动搜索结果中对移动端友好的网页的排名更高</p>\n<p>最佳实践：</p>\n<ul>\n<li>在所有网页上设置 viewport 标签</li>\n</ul>\n",
      "date_published": "2022-06-26T11:19:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "面试官：如果100个请求，你怎么用Promise去控制并发？",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/11.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/11.html",
      "summary": "作者：JetTsang https://juejin.cn/post/7219961144584552504 前言 现在面试过程当中 ，手写题必然是少不了的，其中碰到比较多的无非就是当属 请求并发控制 了。现在基本上前端项目都是通过 axios 来实现异步请求的封装，因此这其实是考你对 Promise 以及异步编程的理解了。",
      "content_html": "<blockquote>\n<p>作者：JetTsang</p>\n<p><a href=\"https://juejin.cn/post/7219961144584552504\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7219961144584552504</a></p>\n</blockquote>\n<h2> 前言</h2>\n<hr>\n<p>现在面试过程当中 ，手写题必然是少不了的，其中碰到比较多的无非就是当属 请求并发控制 了。现在基本上前端项目都是通过 axios 来实现异步请求的封装，因此这其实是考你对 Promise 以及异步编程的理解了。</p>\n<h2> 引出</h2>\n<hr>\n<p>题目：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 明确概念</h2>\n<hr>\n<p>⚠️ 这里有几个概念需要明确一下</p>\n<ul>\n<li>并发：并发是多个任务同时交替的执行（因为 cpu 执行指令的速度非常之快，它可以不必按顺序一段代码一段代码的执行，这样效率反而更加低下），这样看起来就是一起执行的，所以叫并发。</li>\n<li>并行：可以理解为多个物理 cpu 或者有分布式系统，是真正的'同时'执行</li>\n<li>并发控制：意思是多个并发的任务，一旦有任务完成，就立刻开启下一个任务</li>\n<li>切片控制：将并发任务切片的分配出来，比如 10 个任务，切成 2 个片，每片有 5 个任务，当前一片的任务执行完毕，再开始下一个片的任务，这样明显效率没并发控制那么高了</li>\n</ul>\n<h2> 思路</h2>\n<hr>\n<p>首先执行能执行的并发任务，根据并发的概念，每个任务执行完毕后，捞起下一个要执行的任务。</p>\n<p>将关键步骤拆分出合适的函数来组织代码</p>\n<ol>\n<li>循环去启动能执行的任务</li>\n<li>取出任务并且推到执行器执行</li>\n<li>执行器内更新当前的并发数，并且触发捞起任务</li>\n<li>捞起任务里面可以触发最终的回调函数和调起执行器继续执行任务</li>\n</ol>\n<h2> 实现</h2>\n<hr>\n<ol>\n<li>\n<p>定义常数和函数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>实现对应得函数</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<h2> 另一种实现</h2>\n<hr>\n<p>核心代码是判断是当你 【有任务执行完成】 ，再去判断是否有剩余还有任务可执行。可以先维护一个 pool（代表当前执行的任务），利用 await Promise.race 这个 pool，不就知道是否有任务执行完毕了吗？</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>总结一下要点：</p>\n<ol>\n<li>利用 race 的特性可以找到 并发任务 里最快结束的请求</li>\n<li>利用 for await 可以保证 for 结构体下面的代码是最后 await 后的微任务，而在最后一个微任务下，可以保证所有的 promise 已经存入 promises 里（如果没命中任何一个 await，即限制并发数&gt;任务数的时候，虽然不是在微任务当中，也可以保证所有的 promise 都在里面），最后利用 allSettled，等待所有的 promise 状态转变后，调用回调函数</li>\n<li>并发任务池 用 Set 结构存储，可以通过指针来删除对应的任务，通过闭包引用该指针从而达到 动态控制并发池数目</li>\n<li>for await 结构体里，其实 await 下面，包括结构体外 都是属于微任务（前提是有一个 await 里面的 if 被命中），至于这个微任务什么时候被加入微任务队列，要看请求的那里的在什么时候开始标记（resolve/reject ）</li>\n<li>for await 里其实 已经在此轮宏任务当中并发执行了，await 后面的代码被挂起来，等前一个 promise 转变状态--&gt;移出 pool--&gt;将下一个 promise 捞起加入 pool 当中 --&gt;下一个 await 等待最快的 promise，如此往复。</li>\n</ol>\n<p>可以想象这样一个场景，几组人 在玩百米接力赛，每一组分别在 0m,100m,200m 的地方，有几个赛道每组就有几个人。（注意，这里想象成 每个节点（比如 0m 处） 这几个人是一组），每到下一个节点的人，将棒子交给排队在最前面的下一个人，下一个人就开始跑。</p>\n<h3> 疑问</h3>\n<ol>\n<li>Promise.allSettled 和 race 传入的<code>Promise&lt;any&gt;[]</code>可以被其中的触发微任务操作增减，这样做会改变结果吗？</li>\n</ol>\n<h2> 有什么能拓展的功能呢？</h2>\n<hr>\n<p>1.想要在执行之后得到返回所需要的结果</p>\n<p>（在第二种方法当中已经实现，第一种方法下可以 通过 增加一个 task-&gt;结果 的 map 来收集，或者对所有的 task 分别包裹一层 Promise，形成一个新的 promiseList，放到 Promise.allSettled 里面，再把 resolve 以 task-&gt;resolve 的方式映射出来，在 runner 里面找到把 Promise 实例通过对应的 resolve 暴露出去）</p>\n<p>2.增加一个参数用来控制请求失败的重试次数</p>\n<h2> 结尾</h2>\n<hr>\n<p>这种题目是考验你对异步编程的理解，要想写出来，你需要具备事件循环以及 promise 的知识。</p>\n<p>👏👏 最后，有什么错误欢迎大家指出，多多交流才能变得更强！</p>\n",
      "date_published": "2023-05-11T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "Markdown 语法指南",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/12.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/12.html",
      "summary": "Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档 标题 使用#号可表示 1-6 级标题，一级标题对应一个#号，二级标题对应两个#号，以此类推。 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题",
      "content_html": "<blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档</p>\n</blockquote>\n<h2> 标题</h2>\n<p>使用<code>#</code>号可表示 1-6 级标题，一级标题对应一个<code>#</code>号，二级标题对应两个<code>#</code>号，以此类推。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果如下：</p>\n<h1> 一级标题</h1>\n<h2> 二级标题</h2>\n<h3> 三级标题</h3>\n<h4> 四级标题</h4>\n<h5> 五级标题</h5>\n<h6> 六级标题</h6>\n<p>也可以使用<code>==</code>来表示 1 级标题，<code>__</code>来表示 2 级标题</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果如下：</p>\n<h1> 一级标题</h1>\n<h2> 二级标题</h2>\n<h2> 字体</h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><em>我是斜体</em></p>\n<p><em>我是斜体</em></p>\n<p><strong>我是粗体</strong></p>\n<p><strong>我是粗体</strong></p>\n<p><strong><em>我是粗斜体</em></strong></p>\n<p><strong><em>我是粗斜体</em></strong></p>\n<h2> 线条</h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><s>我是删除</s></p>\n<p><u>这是一条下划线</u></p>\n<p>这是一条分割线</p>\n<hr>\n<p>这是一条分割线</p>\n<hr>\n<p>这是一条分割线</p>\n<hr>\n<h2> 这是一条分割线</h2>\n<p><strong>注意：</strong>三个或三个以上的<code>-</code>或<code>*</code></p>\n<h2> 列表</h2>\n<h3> 无序列表</h3>\n<p>使用<code>+</code>, <code>-</code>, <code>*</code> 其中任何一个作为标记</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>list1</li>\n<li>list2</li>\n<li>list3</li>\n</ul>\n<h3> 有序列表</h3>\n<p>使用数字 + <code>.</code>来表示</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>list1</li>\n<li>list2</li>\n<li>list3</li>\n</ol>\n<h3> 列表嵌套</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ol>\n<li>list1</li>\n</ol>\n<ul>\n<li>list1-1</li>\n<li>list1-2</li>\n</ul>\n<ol start=\"2\">\n<li>list2</li>\n</ol>\n<ul>\n<li>list2-1</li>\n<li>list2-2</li>\n</ul>\n<h3> 任务列表</h3>\n<p><strong>注：</strong>此种写法在 vuepress 中无效,可以使用原生的复选框代替</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul class=\"task-list-container\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-0\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-0\"> 吃饭</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-1\" checked=\"checked\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-1\"> 睡觉 //打 x 的表示已完成</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" id=\"task-item-2\" disabled=\"disabled\"><label class=\"task-list-item-label\" for=\"task-item-2\"> 打豆豆</label></li>\n</ul>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><label><input type=\"checkbox\">吃饭</label>\n<label><input type=\"checkbox\" checked=\"\">睡觉</label>\n<label><input type=\"checkbox\">打豆豆</label></p>\n<h3> 引用</h3>\n<p>可以无限引用,但是没什么太大的意义</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>前言:第一层引用</p>\n<blockquote>\n<p>前言:第二层引用</p>\n</blockquote>\n</blockquote>\n<h3> 链接</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener noreferrer\">百度</a></p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.baidu.com</a></p>\n<h3> 图片</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><img src=\"https://iph.href.lu/200x200\" alt=\"占位符\" loading=\"lazy\">\n</p>\n<h2> 表格</h2>\n<p>Markdown 使用 | 来分隔不同单元格,使用 - 来分隔表头和主体</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">标题 1</th>\n<th style=\"text-align:center\">标题 2</th>\n<th style=\"text-align:right\">标题 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">行 1 列 1</td>\n<td style=\"text-align:center\">行 1 列 2</td>\n<td style=\"text-align:right\">行 1 列 3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行 2 列 1</td>\n<td style=\"text-align:center\">行 2 列 2</td>\n<td style=\"text-align:right\">行 2 列 3</td>\n</tr>\n</tbody>\n</table>\n<h2> 代码</h2>\n<h3> 单行代码</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里在几个平台测试了一下,发现有的能显示,有的不能显示,所以这里在 ```外面包裹一层()只用于展示使用 效果如下:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>或者直接使用 4 个空格,也是可以展示一个代码片段</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 流程图</h2>\n<p>Markdown 还支持流程图或甘特图之类的.但是因为不同的平台对其支持都是不同的,有的支持,有的不支持,因此就不展示流程图的代码了。</p>\n<h2> 兼容 HTML</h2>\n<p>Markdown 的目标是成为一种适用于网络的书写语言.它的标签较少,只对应了 HTML 中的一部分.不在其覆盖范围内的,我们可以使用 html 标签来书写.(貌似也有的平台是不支持的)</p>\n<div class=\"language-HTML line-numbers-mode\" data-ext=\"HTML\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>效果如下:</p>\n<p><span style=\"color:orange;\">orange</span></p>\n<p>使用<code>kbd</code>来展示按键:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><kbd>Ctrl</kbd>+<kbd>S</kbd>来保存文档</p>\n<p>使用反斜杠转义特殊字符:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>** 正常显示 **</p>\n<h2> 注解</h2>\n<p>使用<code>[^]</code>来定义注解：(<span style=\"color:#ff0000;\">vuepress</span>中无效)</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>效果如下：</p>\n<p>我是一个注解<sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup><a class=\"footnote-anchor\" id=\"footnote-ref1\"><br>\n我也是一个注解<sup class=\"footnote-ref\"></sup></a><a href=\"#footnote2\">[2]</a><a class=\"footnote-anchor\" id=\"footnote-ref2\"><br>\n去</a><a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener noreferrer\">Google</a></p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"footnote1\" class=\"footnote-item\"><p>我是注解 1 <a href=\"#footnote-ref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"footnote2\" class=\"footnote-item\"><p>我是注解 2 <a href=\"#footnote-ref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
      "date_published": "2022-03-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "SPA(单页应用)首屏加载速度",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/13.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/13.html",
      "summary": "一、什么是首屏加载 首屏时间(First Contentful Paint),指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一样要全部渲染完成，但需要展示当前视窗需要的内容 首屏加载可以说是用户体验中重要的环节。 二、加载慢的原因 在页面渲染的过程，导致加载速度慢的因素可能如下： 网络延时问题 资源文件体积是否过大 资源是否重发发送请求去加载了 加载脚本的时候，渲染内容堵塞",
      "content_html": "<h2> 一、什么是首屏加载</h2>\n<hr>\n<p>首屏时间(First Contentful Paint),指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一样要全部渲染完成，但需要展示当前视窗需要的内容</p>\n<p>首屏加载可以说是用户体验中重要的环节。</p>\n<h2> 二、加载慢的原因</h2>\n<hr>\n<p>在页面渲染的过程，导致加载速度慢的因素可能如下：</p>\n<ul>\n<li>网络延时问题</li>\n<li>资源文件体积是否过大</li>\n<li>资源是否重发发送请求去加载了</li>\n<li>加载脚本的时候，渲染内容堵塞</li>\n</ul>\n<h2> 三、解决方案</h2>\n<hr>\n<p>常见的几种 SPA 首屏优化方式</p>\n<ul>\n<li>减少入口文件体积</li>\n<li>静态资源本地缓存</li>\n<li>UI 框架按需加载</li>\n<li>图片资源压缩</li>\n<li>开启 Gzip 压缩</li>\n<li>使用 SSR</li>\n</ul>\n<h3> 减少入口文件体积</h3>\n<ol>\n<li>常用的手段是路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加。</li>\n<li>还有就是使用 cdn 加速，减少文件体积，但是要是看别人的 cdn 服务器稳不稳定，也可以自己下载 cdn 放到自己服务器，但是自己服务器没有 cdn 分发的话，速度就会在下载 cdn 文件时候影响加载速度。</li>\n</ol>\n<h3> 静态资源本地缓存</h3>\n<hr>\n<p>后端返回的资源问题:</p>\n<ul>\n<li>采用<code>HTTP</code>缓存，设置<code>Cache-Control</code>，<code>Last-Modified</code>，<code>Etag</code>等响应头</li>\n<li>采用<code>Service Worker</code>离线缓存\n前端合理使用 LocalStorage</li>\n</ul>\n<h3> UI 框架按需加载</h3>\n<h3> 图片资源的压缩</h3>\n<p>图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素\n对于所有的图片资源，我们可以进行适当的压缩\n对于页面上使用到的 icon，可以使用在线字体图标，或者雪碧图，将众多小图标合并到一张图上，减少<code>HTTP</code>请求次数</p>\n<h3> 开启 Gzip 压缩</h3>\n<p>拆完包之后，我们在使用<code>Gzip</code>做一下压缩，安装<code>compression-webpack-plugin</code></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>在<code>vue.config.js</code>中引入并修改<code>webpack</code>配置</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在服务器我们也要做相应的配置，比如<code>Nginx</code></p>\n<div class=\"language-Nginx line-numbers-mode\" data-ext=\"Nginx\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 使用 SSR</h3>\n<p>SSR(Server side)，也就是服务器渲染，组件或页面通过服务器生成 html 字符串，再发送到浏览器\n从头搭建一个服务器渲染是很复杂的，<code>Vue</code>应用建议使用<code>Nuxt.js</code>实现服务器渲染</p>\n<h3> 小结</h3>\n<p>减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分，资源加载优化和页面渲染优化</p>\n<p>下图是更为全面的首屏优化的方案</p>\n<figure><figcaption>首屏优化</figcaption></figure>\n<p>大家可以根据自己项目的情况选择各种方式进行首屏渲染的优化</p>\n",
      "date_published": "2022-03-03T15:57:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "你不知道的 async、await魔鬼细节",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/14.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/14.html",
      "summary": "0、前言 关于promise、async/await的使用相信很多小伙伴都比较熟悉了，但是提到事件循环机制输出结果类似的题目，你敢说都会？ 试一试？ 🌰1： async function async1 () { await new Promise((resolve, reject) =&gt; { resolve() }) console.log('A') } async1() new Promise((resolve) =&gt; { console.log('B') resolve() }).then(() =&gt; { console.log('C') }).then(() =&gt; { console.log('D') }) // 最终结果👉: B A C D",
      "content_html": "<h2> 0、前言</h2>\n<hr>\n<p>关于<code>promise、async/await</code>的使用相信很多小伙伴都比较熟悉了，但是提到<strong>事件循环机制输出结果</strong>类似的题目，你敢说都会？</p>\n<p>试一试？</p>\n<p>🌰1：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>🌰2：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>❓ 基本一样的代码为什么会出现差别，话不多说 👇</p>\n<h2> 1、async 函数返回值</h2>\n<hr>\n<p>在讨论 <code>await</code> 之前，先聊一下 <code>async</code> 函数处理返回值的问题，它会像 <code>Promise.prototype.then</code> 一样，会对返回值的类型进行辨识。</p>\n<p>👉<strong>根据返回值的类型，引起 <code>js引擎</code> 对返回值处理方式的不同</strong></p>\n<blockquote>\n<p>📑 结论：<code>async</code>函数在抛出返回值时，会根据返回值<strong>类型</strong>开启<strong>不同数目的微任务</strong></p>\n<ul>\n<li>return 结果值：非<code>thenable</code>、非<code>promise</code>（不等待）</li>\n<li>return 结果值：<code>thenable</code>（等待 1 个<code>then</code>的时间）</li>\n<li>return 结果值：<code>promise</code>（等待 2 个<code>then</code>的时间）</li>\n</ul>\n</blockquote>\n<p>🌰1：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>🌰2：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>🌰3：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>看了这三个 🌰 是不是对<code>上面的结论</code>有了更深的认识？</p>\n<p>稍安勿躁，来试试一个经典面试题 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>👀 做错了吧？</p>\n<p>哈哈没关系</p>\n<blockquote>\n<p>步骤拆分 👇：</p>\n<ol>\n<li>\n<p>先执行同步代码，输出<code>5</code></p>\n</li>\n<li>\n<p>执行<code>setTimeout</code>，是放入宏任务异步队列中</p>\n</li>\n<li>\n<p>接着执行<code>async1</code>函数，输出<code>1</code></p>\n</li>\n<li>\n<p>执行<code>async2</code>函数，输出<code>3</code></p>\n</li>\n<li>\n<p><code>Promise</code>构造器中代码属于同步代码，输出<code>4</code></p>\n<blockquote>\n<p><code>async2</code>函数的返回值是<code>Promise</code>，等待<code>2</code>个<code>then</code>后放行，所以<code>AAA</code>暂时无法输出</p>\n</blockquote>\n</li>\n<li>\n<p><code>async1</code>函数<strong>暂时</strong>结束，继续往下走，输出<code>7</code></p>\n</li>\n<li>\n<p>同步代码，输出<code>11</code></p>\n</li>\n<li>\n<p>执行第一个<code>then</code>，输出<code>8</code></p>\n</li>\n<li>\n<p>执行第二个<code>then</code>，输出<code>9</code></p>\n</li>\n<li>\n<p>终于<strong>等</strong>到了两个<code>then</code>执行完毕，执行<code>async1</code>函数里面剩下的，输出<code>AAA</code></p>\n</li>\n<li>\n<p>再执行最后一个微任务<code>then</code>，输出<code>10</code></p>\n</li>\n<li>\n<p>执行最后的宏任务<code>setTimeout</code>，输出<code>6</code></p>\n</li>\n</ol>\n</blockquote>\n<p>❓ 是不是豁然开朗，欢迎点赞收藏！</p>\n<h2> 2、await 右值类型区别</h2>\n<hr>\n<h3> 2.1、非 <code>thenable</code></h3>\n<p>🌰1：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>🌰2：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>🌰3：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Note:</p>\n<p><code>await</code>后面接非 <code>thenable</code> 类型，会立即向微任务队列添加一个微任务<code>then</code>，<strong>但不需等待</strong></p>\n</blockquote>\n<h3> 2.2、<code>thenable</code>类型</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Note:</p>\n<p><code>await</code> 后面接 <code>thenable</code> 类型，需要<strong>等待一个 <code>then</code> 的时间之后</strong>执行</p>\n</blockquote>\n<h3> 2.3、<code>Promise</code>类型</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>❓ 为什么表现的和非 <code>thenable</code> 值一样呢？为什么不等待两个 <code>then</code> 的时间呢？</p>\n<blockquote>\n<p>Note:</p>\n<ul>\n<li>TC 39(ECMAScript 标准制定者) 对<code>await</code> 后面是 <code>promise</code> 的情况如何处理进行了一次修改，<strong>移除</strong>了额外的两个微任务，在<strong>早期版本</strong>，依然会等待两个 <code>then</code> 的时间</li>\n<li>有大佬翻译了官方解释：<strong>更快的 async 函数和 promises</strong>[1]，但在这次更新中并没有修改 <code>thenable</code> 的情况</li>\n</ul>\n</blockquote>\n<hr>\n<p>这样做可以极大的优化 <code>await</code> 等待的速度 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Note：</p>\n<p><code>await</code> 和 <code>Promise.prototype.then</code> 虽然很多时候可以在<strong>时间顺序</strong>上能等效，但是它们之间有<strong>本质的区别</strong>。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li><code>test</code> 函数中的 <code>await</code> 会等待 <code>func</code> 函数中所有的 <code>await</code> 取得 恢复函数执行 的命令并且整个函数执行完毕后才能获得取得 <strong>恢复函数执行</strong>的命令；</li>\n<li>也就是说，<code>func</code> 函数的 <code>await</code> 此时<strong>不能在时间的顺序上等效</strong> <code>then</code>，而要等待到 <code>test</code> 函数完全执行完毕；</li>\n<li>比如这里的数字<code>6</code>很晚才输出，<strong>如果</strong>单纯看成<code>then</code>的话，在下一个微任务队列执行时<code>6</code>就应该作为同步代码输出了才对。</li>\n</ul>\n</blockquote>\n<hr>\n<p>所以我们可以合并两个函数的代码 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>因为将原本的函数融合，此时的 <code>await</code> 可以等效为 <code>Promise.prototype.then</code>，又完全可以等效如下代码 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><hr>\n<p>以上三种写法在时间的顺序上完全等效，所以你 <strong>完全可以将 <code>await</code> 后面的代码可以看做在 <code>then</code> 里面执行的结果</strong>，又因为 <code>async</code> 函数会返回 <code>promise</code> 实例，所以还可以等效成 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以发现，<code>test</code> 函数全是走的同步代码...</p>\n<p>所以 👉：<strong><code>async/await</code> 是用同步的方式，执行异步操作</strong></p>\n<h2> 3、🌰</h2>\n<hr>\n<p>🌰1：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>大致思路 👇：</p>\n<ul>\n<li>首先，<strong><code>async</code>函数的整体返回值永远都是<code>Promise</code>，无论值本身是什么</strong></li>\n<li>方式一：<code>await</code>的是<code>Promise</code>，无需等待</li>\n<li>方式二：<code>await</code>的是<code>async</code>函数，但是该函数的返回值本身是<strong>非<code>thenable</code></strong>，无需等待</li>\n<li>方式三：<code>await</code>的是<code>async</code>函数，且返回值本身是<code>Promise</code>，需等待两个<code>then</code>时间</li>\n</ul>\n</blockquote>\n<p>🌰2：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>步骤拆分 👇：</p>\n<ul>\n<li>\n<p>方式一：</p>\n</li>\n<li>\n<ul>\n<li>同步代码输出<code>1、2</code>，接着将<code>log(5)</code>处的<code>then1</code>加入微任务队列，<code>await</code>拿到确切的<code>func</code>函数返回值<code>undefined</code>，将后续代码放入微任务队列（<code>then2</code>，可以这样理解）</li>\n<li>执行同步代码输出<code>4</code>，到此，所有同步代码完毕</li>\n<li>执行第一个放入的微任务<code>then1</code>输出<code>5</code>，产生<code>log(6)</code>的微任务<code>then3</code></li>\n<li>执行第二个放入的微任务<code>then2</code>输出<code>3</code></li>\n<li>然后执行微任务<code>then3</code>，输出<code>6</code>，产生<code>log(7)</code>的微任务<code>then4</code></li>\n<li>执行<code>then4</code>，输出<code>7</code></li>\n</ul>\n</li>\n<li>\n<p>方式二：</p>\n</li>\n<li>\n<ul>\n<li>同步代码输出<code>1、2</code>，<code>await</code>拿到<code>func</code>函数返回值，但是并未获得<strong>具体的结果</strong>（由<code>Promise</code>本身机制决定），暂停执行当前<code>async</code>函数内的代码（跳出、让行）</li>\n<li>输出<code>4</code>，到此，所有同步代码完毕</li>\n<li><code>await</code>一直等到<code>Promise.resolve().then...</code>执行完成，再放行输出<code>3</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>方式二没太明白 ❓</p>\n<p>继续 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>还是没懂？</p>\n<p>继续 👇</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>Note:</p>\n<p>综上，<code>await</code>一定要等到右侧的表达式有<strong>确切的值</strong>才会放行，否则将一直等待（阻塞当前<code>async</code>函数内的后续代码），不服看看这个 👇</p>\n<ul>\n<li>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n</blockquote>\n<p>🌰3：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>步骤拆分 👇：</p>\n<ul>\n<li>同步代码输出<code>1、2</code></li>\n<li><code>await</code>拿到<code>func</code>函数的具体返回值<code>thenable</code>，将当前<code>async</code>函数内的后续代码放入微任务<code>then1</code>(但是需要等待一个<code>then</code>时间)</li>\n<li>同步代码输出<code>4、B</code>，产生<code>log(C)</code>的微任务<code>then2</code></li>\n<li>由于<code>then1</code>滞后一个<code>then</code>时间，直接执行<code>then2</code>输出<code>C</code>，产生<code>log(D)</code>的微任务<code>then3</code></li>\n<li>执行原本滞后一个<code>then</code>时间的微任务<code>then1</code>，输出<code>3</code></li>\n<li>执行最后一个微任务<code>then3</code>输出<code>D</code></li>\n</ul>\n</blockquote>\n<h2> 4、总结</h2>\n<hr>\n<blockquote>\n<p><code>async</code>函数返回值</p>\n<ul>\n<li>\n<p>📑 结论：<code>async</code>函数在抛出返回值时，会根据返回值<strong>类型</strong>开启<strong>不同数目的微任务</strong></p>\n</li>\n<li>\n<ul>\n<li>return 结果值：非<code>thenable</code>、非<code>promise</code>（不等待）</li>\n<li>return 结果值：<code>thenable</code>（等待 1 个<code>then</code>的时间）</li>\n<li>return 结果值：<code>promise</code>（等待 2 个<code>then</code>的时间）</li>\n</ul>\n</li>\n</ul>\n<p><code>await</code>右值类型区别</p>\n<ul>\n<li>\n<p>接非 <code>thenable</code> 类型，会立即向微任务队列添加一个微任务<code>then</code>，<strong>但不需等待</strong></p>\n</li>\n<li>\n<p>接 <code>thenable</code> 类型，需要<strong>等待一个 <code>then</code> 的时间之后</strong>执行</p>\n</li>\n<li>\n<p>接<code>Promise</code>类型(有确定的返回值)，会立即向微任务队列添加一个微任务<code>then</code>，<strong>但不需等待</strong></p>\n</li>\n<li>\n<ul>\n<li>TC 39 对<code>await</code> 后面是 <code>promise</code> 的情况如何处理进行了一次修改，<strong>移除</strong>了额外的两个微任务，在<strong>早期版本</strong>，依然会等待两个 <code>then</code> 的时间</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3> 参考资料</h3>\n<hr>\n<p>[1]<a href=\"https://juejin.cn/post/6844903715342647310#heading-3:\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/6844903715342647310#heading-3:</a> <em><a href=\"https://juejin.cn/post/6844903715342647310#heading-3\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/6844903715342647310#heading-3</a></em></p>\n",
      "date_published": "2022-04-21T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "10大 Node.js 库可以帮助你优化代码和简化开发",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/15.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/15.html",
      "summary": "英文链接： https://mobileappcircular.com/top-10-node-js-libraries-to-optimize-your-application-performance-30cff34bcbdc",
      "content_html": "<blockquote>\n<p>英文链接：</p>\n<p><a href=\"https://mobileappcircular.com/top-10-node-js-libraries-to-optimize-your-application-performance-30cff34bcbdc\" target=\"_blank\" rel=\"noopener noreferrer\">https://mobileappcircular.com/top-10-node-js-libraries-to-optimize-your-application-performance-30cff34bcbdc</a></p>\n</blockquote>\n<p>Node.js 是一个功能强大且流行的 JavaScript 运行时环境，使开发人员能够构建高性能应用程序。Node.js 广泛用于构建服务器端 Web 应用程序和 API，以及创建命令行工具和桌面应用程序。</p>\n<p>Node.js 拥有丰富的库和模块生态系统，可以帮助开发人员提高应用程序的性能并优化代码。在这篇文中，我们将探讨在 Node.js 中用于提高应用程序性能和优化的前 10 个库。</p>\n<h2> <strong>1. Lodash</strong></h2>\n<hr>\n<p>Lodash 是一个 JavaScript 实用程序库，它提供了一组用于处理数组、对象、字符串和其他数据类型的函数。Lodash 函数旨在针对性能进行高度优化，它们可以帮助提高 Node.js 应用程序的速度和效率。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>2. Node-cache</strong></h2>\n<hr>\n<p>Node-cache 是一个缓存库，使开发人员能够在 Node.js 应用程序中缓存数据。缓存有助于减少数据库查询和 API 调用的次数，从而提高应用程序性能。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>3. Moment.js</strong></h2>\n<hr>\n<p>Moment.js 是一个用于解析、操作和格式化日期和时间的 JavaScript 库。Moment.js 使在 Node.js 应用程序中处理日期和时间变得更加容易和高效。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>4. Redis</strong></h2>\n<hr>\n<p>Redis 是一种开源内存数据结构存储，可用作数据库、缓存和消息代理。Redis 可以通过实现快速数据检索和存储来帮助提高应用程序性能。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>5. Nodemailer</strong></h2>\n<hr>\n<p>Nodemailer 是 Node.js 应用程序的一个模块，使开发人员能够发送电子邮件。Nodemailer 使从 Node.js 应用程序发送电子邮件变得更加容易和高效。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>6. Sharp</strong></h2>\n<hr>\n<p>Sharp 是用于 Node.js 应用程序的高性能图像处理库。Sharp 可用于实时调整大小、裁剪和操作图像，这有助于提高应用程序性能。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>7. Axios</strong></h2>\n<hr>\n<p>Axios 是 Node.js 应用程序的流行 HTTP 客户端。它提供了一个易于使用的 API，用于发出 HTTP 请求和处理响应。凭借其对承诺的内置支持，Axios 可以轻松处理异步请求。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>8. Morgan</strong></h2>\n<hr>\n<p>Morgan 是一个流行的 Node.js 应用程序日志记录中间件。Morgan 可用于记录 HTTP 请求和响应，这可以帮助开发人员调试和优化他们的应用程序。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>9. Node-gzip</strong></h2>\n<hr>\n<p>Node-gzip 是一个用于在 Node.js 应用程序中压缩和解压缩数据的模块。压缩可以通过减少通过网络发送的数据大小来帮助提高应用程序性能。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>10. Bcrypt</strong></h2>\n<hr>\n<p>Bcrypt 是 Node.js 应用程序中用于散列密码的流行模块。散列密码有助于提高应用程序安全性和保护用户数据。</p>\n<p>示例代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> <strong>结论</strong></h2>\n<hr>\n<p>在这篇博文中，我们分享了 10 个可以帮助提高 Node.js 应用程序性能和优化的库。</p>\n<p>这些库可用于缓存数据、操作日期、处理图像、发送电子邮件、发出 HTTP 请求、记录请求和响应、压缩数据和散列密码。通过使用这些库，开发人员可以优化他们的 Node.js 应用程序并提供更好的用户体验。</p>\n",
      "date_published": "2023-05-21T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "video鼠标移动预览",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/16.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/16.html",
      "summary": "video 鼠标移动预览 B 站图片接口 https://api.bilibili.com/x/player/videoshot?aid=14326240 { \"code\": 0, \"message\": \"0\", \"ttl\": 1, \"data\": { \"pvdata\": \"//i0.hdslb.com/bfs/videoshot/23378913.bin\", \"img_x_len\": 10, \"img_y_len\": 10, \"img_x_size\": 160, \"img_y_size\": 90, \"image\": [ \"//i0.hdslb.com/bfs/videoshot/23378913.jpg\", \"//i0.hdslb.com/bfs/videoshot/23378913-1.jpg\", \"//i0.hdslb.com/bfs/videoshot/23378913-2.jpg\" ], \"index\": [] } }",
      "content_html": "<h2> video 鼠标移动预览</h2>\n<blockquote>\n<p>B 站图片接口\n<a href=\"https://api.bilibili.com/x/player/videoshot?aid=14326240\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.bilibili.com/x/player/videoshot?aid=14326240</a></p>\n</blockquote>\n<div class=\"language-json line-numbers-mode\" data-ext=\"json\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>字段</th>\n<th>含义</th>\n<th>详细</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>缩略图</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>data.pvdata</td>\n<td>一个二进制文件</td>\n<td>缩略图，并不是每一秒都对应一张缩略图，而是每一段对应一张，这个字段应该是时间段与缩略图的对应方式</td>\n<td><a href=\"//i0.hdslb.com/bfs/videoshot/89359010.bin\" target=\"_blank\" rel=\"noopener noreferrer\">//i0.hdslb.com/bfs/videoshot/89359010.bin</a></td>\n</tr>\n<tr>\n<td>data.img_x_len</td>\n<td>每张雪碧图 x 方向图片数量</td>\n<td>雪碧图是一个 10*10 的网格</td>\n<td>10</td>\n</tr>\n<tr>\n<td>data.img_y_len</td>\n<td>每张雪碧图 y 方向图片数量</td>\n<td>雪碧图是一个 10*10 的网格</td>\n<td>10</td>\n</tr>\n<tr>\n<td>data.img_x_size</td>\n<td>单个缩略图图片的尺寸</td>\n<td>x 轴</td>\n<td>160</td>\n</tr>\n<tr>\n<td>data.img_y_size</td>\n<td>单个缩略图图片的尺寸</td>\n<td>y 轴</td>\n<td>90</td>\n</tr>\n<tr>\n<td>data.image</td>\n<td>雪碧图形式的所有缩略图</td>\n<td>是一个数组，一次拿到所有的缩略图</td>\n<td>[\"<a href=\"//i0.hdslb.com/bfs/videoshot/89359010.jpg\" target=\"_blank\" rel=\"noopener noreferrer\">//i0.hdslb.com/bfs/videoshot/89359010.jpg</a>\"]</td>\n</tr>\n</tbody>\n</table>\n<h2> 代码</h2>\n<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>参考地址\n<a href=\"https://blog.csdn.net/Mr_FenKuan/article/details/114003333?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-114003333-blog-90724799.topblog&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-114003333-blog-90724799.topblog&amp;utm_relevant_index=12\" target=\"_blank\" rel=\"noopener noreferrer\">仿 BiliBili 视屏缩略图实现</a></p>\n</blockquote>\n",
      "date_published": "2022-05-12T11:22:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "TCP为什么需要三次握手和四次挥手",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/17.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/17.html",
      "summary": "TCP三次握手和四次挥手 一、三次握手 三次握手（Three-way Handshake）其实就是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包 主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备 过程如下： 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1 作为 ACK 的值，此时服务器处于 SYN_RCVD 的状态 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的 ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接",
      "content_html": "<figure><figcaption>TCP三次握手和四次挥手</figcaption></figure>\n<h2> 一、三次握手</h2>\n<hr>\n<p>三次握手（Three-way Handshake）其实就是指建立一个 TCP 连接时，需要客户端和服务器总共发送 3 个包</p>\n<p>主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备</p>\n<p>过程如下：</p>\n<ul>\n<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态</li>\n<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1 作为 ACK 的值，此时服务器处于 SYN_RCVD 的状态</li>\n<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的 ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接</li>\n</ul>\n<figure><figcaption>TCP三次握手</figcaption></figure>\n<p>上述每一次握手的作用如下：</p>\n<ul>\n<li>\n<p>第一次握手：客户端发送网络包，服务端收到了<br>\n这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</p>\n</li>\n<li>\n<p>第二次握手：服务端发包，客户端收到了<br>\n这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常</p>\n</li>\n<li>\n<p>第三次握手：客户端发包，服务端收到了。<br>\n这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常</p>\n</li>\n</ul>\n<p>通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了</p>\n<h3> 为什么不是两次握手?</h3>\n<p>如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到</p>\n<p>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</p>\n<h2> 二、四次挥手</h2>\n<hr>\n<p><code>tcp</code>终止一个连接，需要经过四次挥手</p>\n<p>过程如下：</p>\n<ul>\n<li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认</li>\n<li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态</li>\n<li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态</li>\n<li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态</li>\n</ul>\n<figure><figcaption>TCP四次挥手</figcaption></figure>\n<p>四次挥手原因</p>\n<p>服务端在收到客户端断开连接 Fin 报文后，并不会立即关闭连接，而是先发送一个 ACK 包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送 FIN 报文断开连接，因此需要四次挥手</p>\n<h2> 总结</h2>\n<hr>\n<p>一个完整的三次握手四次挥手如下图所示：</p>\n<figure><figcaption>TCP三次握手和四次挥手</figcaption></figure>\n",
      "date_published": "2022-03-05T16:08:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "Ajax原理和实现",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/2.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/2.html",
      "summary": "一、Ajax 是什么？ AJAX 全称(Async Javascript and XML) 即异步的 JavaScript 和 XML，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页 Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用 JavaScript 来操作 DOM 而更新页面",
      "content_html": "<h2> 一、Ajax 是什么？</h2>\n<hr>\n<p><code>AJAX</code> 全称(Async Javascript and XML)</p>\n<p>即异步的 <code>JavaScript</code> 和 <code>XML</code>，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页</p>\n<p><code>Ajax</code>的原理简单来说通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用 JavaScript 来操作 DOM 而更新页面</p>\n<p>流程图如下：</p>\n<figure><figcaption>new XmlHttpRequest</figcaption></figure>\n<p>下面举个例子：</p>\n<p>领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作</p>\n<p>浏览器可以发送<code>HTTP</code>请求后，接着做其他事情，等收到 XHR 返回来的数据再进行操作</p>\n<h2> 二、实现过程</h2>\n<hr>\n<p>实现 Ajax 异步交互需要服务器逻辑进行配合，需要完成以下步骤：</p>\n<ul>\n<li>创建 Ajax 的核心对象 XMLHttpRequest 对象</li>\n<li>通过 XMLHttpRequest 对象的 open() 方法与服务端建立连接</li>\n<li>构建请求所需的数据内容，并通过 XMLHttpRequest 对象的 send() 方法发送给服务器端</li>\n<li>通过 XMLHttpRequest 对象提供的 onreadystatechange 事件监听服务器端你的通信状态</li>\n<li>接受并处理服务端向客户端响应的数据结果</li>\n<li>将处理结果更新到 HTML 页面中</li>\n</ul>\n<h3> 创建 XMLHttpRequest 对象</h3>\n<p>通过<code>XMLHttpRequest()</code> 构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 与服务器建立连接</h3>\n<p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务器建立连接</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>参数说明：</p>\n<ul>\n<li><code>method</code>：表示当前的请求方式，常见的有<code>GET</code>、<code>POST</code></li>\n<li><code>url</code>：服务端地址</li>\n<li><code>async</code>：布尔值，表示是否异步执行操作，默认为<code>true</code></li>\n<li><code>user</code>: 可选的用户名用于认证用途；默认为<code>null</code></li>\n<li><code>password</code>: 可选的密码用于认证用途，默认为<code>null</code></li>\n</ul>\n<h3> 给服务端发送数据</h3>\n<p>通过 <code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法，将客户端页面的数据发送给服务端</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p><code>body</code>: 在 XHR 请求中要发送的数据体，如果不传递数据则为 <code>null</code></p>\n<p>如果使用<code>GET</code>请求发送数据的时候，需要注意如下：</p>\n<ul>\n<li>将请求数据添加到<code>open()</code>方法中的<code>url</code>地址中</li>\n<li>发送请求数据中的<code>send()</code>方法中参数设置为<code>null</code></li>\n</ul>\n<h3> 绑定<code>onreadystatechange</code>事件</h3>\n<p><code>onreadystatechange</code> 事件用于监听服务器端的通信状态，主要监听的属性为<code>XMLHttpRequest.readyState</code>,关于<code>XMLHttpRequest.readyState</code>属性有五个状态，如下图显示</p>\n<figure><figcaption>XMLHttpRequest.readyState</figcaption></figure>\n<p>只要 <code>readyState</code> 属性值一变化，就会触发一次 <code>readystatechange</code> 事件</p>\n<p><code>XMLHttpRequest.responseText</code>属性用于接收服务器端的响应结果</p>\n<p>举个例子：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 三、封装</h2>\n<p>通过上面对<code>XMLHttpRequest</code> 对象的了解，下面来封装一个简单的<code>Ajax</code>请求</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用方式如下</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-03-08T15:43:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "CentOS8配置Nginx",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/3.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/3.html",
      "summary": "1.连接到 Linux CentOS8 的服务器 ssh -p 22 root@ip //输入完之后会要输入密码，密码是不显示的，输入完回车就行",
      "content_html": "<h2> 1.连接到 Linux CentOS8 的服务器</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 2.安装编译器</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 3.建立存放的文件夹</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 4.移动到文件夹</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 5.下载 nginx</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 6.解压 nginx.tar.gz</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 7.移动到解压的文件夹</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 8.配置文件</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 9.编译和安装</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 10.查找安装路径和移动到文件夹</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 11.启动 nginx</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h2> 12.重新加载配置</h2>\n<hr>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-03-01T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "地址栏输入 URL 敲下回车",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/4.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/4.html",
      "summary": "一、简单分析 简单的分析，从输入 URL到回车后发生的行为如下： URL 解析 DNS 查询 TCP 连接 HTTP 请求 响应请求 渲染页面 二、详细分析 URL 解析 首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作 URL的解析第过程中的第一步，一个URL的结构解析如下：",
      "content_html": "<h2> 一、简单分析</h2>\n<hr>\n<p>简单的分析，从输入 <code>URL</code>到回车后发生的行为如下：</p>\n<ul>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>HTTP 请求</li>\n<li>响应请求</li>\n<li>渲染页面</li>\n</ul>\n<h2> 二、详细分析</h2>\n<hr>\n<h3> URL 解析</h3>\n<p>首先判断你输入的是一个合法的 <code>URL</code> 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作</p>\n<p><code>URL</code>的解析第过程中的第一步，一个<code>URL</code>的结构解析如下：</p>\n<figure><figcaption>url结构解析</figcaption></figure>\n<h3> DNS 查询</h3>\n<p>在之前文章中讲过 DNS 的查询，这里就不再讲述了</p>\n<p>整个查询过程如下图所示：</p>\n<figure><figcaption>DNS的查询</figcaption></figure>\n<p>最终，获取到了域名对应的目标服务器<code>IP</code>地址</p>\n<h3> TCP 连接</h3>\n<p>在之前文章中，了解到<code>tcp</code>是一种面向有连接的传输层协议</p>\n<p>在确定目标服务器服务器的<code>IP</code>地址后，则经历三次握手建立<code>TCP</code>连接，流程如下：</p>\n<figure><figcaption>TCP的连接</figcaption></figure>\n<h3> 发送 http 请求</h3>\n<p>当建立 tcp 连接之后，就可以在这基础上进行通信，浏览器发送 http 请求到目标服务器</p>\n<p>请求的内容包括：</p>\n<ul>\n<li>请求行</li>\n<li>请求头</li>\n<li>请求主体</li>\n</ul>\n<figure><figcaption>HTTP的请求</figcaption></figure>\n<h3> 响应请求</h3>\n<p>当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个<code>HTTP</code>响应消息，包括：</p>\n<ul>\n<li>状态行</li>\n<li>响应头</li>\n<li>响应正文</li>\n</ul>\n<p>在服务器响应之后，由于现在<code>http</code>默认开始长连接<code>keep-alive</code>，当页面关闭之后，<code>tcp</code>链接则会经过四次挥手完成断开</p>\n<h3> 页面渲染</h3>\n<p>当浏览器接收到服务器响应的资源后，首先会对资源进行解析：</p>\n<ul>\n<li>查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储 cookie，解压 gzip，缓存资源等等</li>\n<li>查看响应头的 Content-Type 的值，根据不同的资源类型采用不同的解析方式</li>\n</ul>\n<p>关于页面的渲染过程如下：</p>\n<ul>\n<li>解析 HTML，构建 DOM 树</li>\n<li>解析 CSS ，生成 CSS 规则树</li>\n<li>合并 DOM 树和 CSS 规则，生成 render 树</li>\n<li>布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算</li>\n<li>绘制 render 树（ paint ），绘制页面像素信息</li>\n<li>浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上</li>\n</ul>\n<figure><figcaption>页面渲染</figcaption></figure>\n",
      "date_published": "2022-03-05T15:43:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "模糊搜索关键词高亮显示",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/5.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/5.html",
      "summary": "&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt; &lt;title&gt;auto complete&lt;/title&gt; &lt;style&gt; bdi { color: rgb(0, 136, 255); } li { list-style: none; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;input class=\"inp\" type=\"text\" /&gt; &lt;section&gt; &lt;ul class=\"container\"&gt;&lt;/ul&gt; &lt;/section&gt; &lt;/body&gt; &lt;script&gt; function debounce(fn, timeout = 300) { let t; return (...args) =&gt; { if (t) { clearTimeout(t); } t = setTimeout(() =&gt; { fn.apply(fn, args); }, timeout); }; } function memorize(fn) { const cache = new Map(); return (name) =&gt; { if (!name) { container.innerHTML = \"\"; return; } if (cache.get(name)) { container.innerHTML = cache.get(name); return; } const res = fn.call(fn, name).join(\"\"); cache.set(name, res); container.innerHTML = res; }; } function handleInput(value) { const reg = new RegExp(`\\(${value}\\)`); const search = data.reduce((res, cur) =&gt; { if (reg.test(cur)) { const match = RegExp.$1; res.push(`&lt;li&gt;${cur.replace(match, \"&lt;bdi&gt;$&amp;&lt;/bdi&gt;\")}&lt;/li&gt;`); } return res; }, []); return search; } const data = [ \"上海野生动物园\", \"上饶野生动物园\", \"北京巷子\", \"上海中心\", \"上海黄埔江\", \"迪士尼上海\", \"陆家嘴上海中心\", ]; const container = document.querySelector(\".container\"); const memorizeInput = memorize(handleInput); document.querySelector(\".inp\").addEventListener( \"input\", debounce((e) =&gt; { memorizeInput(e.target.value); }) ); &lt;/script&gt; &lt;/html&gt;",
      "content_html": "<div class=\"language-html line-numbers-mode\" data-ext=\"html\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2022-03-01T14:23:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "Git常用指令",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/6.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/6.html",
      "summary": "项目初始化 git init 提示 项目初始化之后会生成一个.git 文件，如果看不见，那就是电脑隐藏了以.开头的文件",
      "content_html": "<h2> 项目初始化</h2>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>项目初始化之后会生成一个.git 文件，如果看不见，那就是电脑隐藏了以.开头的文件</p>\n</div>\n<h2> 项目关联</h2>\n<hr>\n<h3> 克隆项目</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>表示从远程仓库拉取项目到本地</p>\n<h3> 本地项目关联远程仓库</h3>\n<hr>\n<p>如果我们本地是有项目的，我们想要的是将本地项目和远程仓库关联起来，那么有如下两种情况</p>\n<ul>\n<li>本地已有文件与 Git 仓库关联起来(空仓库)</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"highlight-lines\"><br><br><br><br><div class=\"highlight-line\">&nbsp;</div></div><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><ul>\n<li>非空仓库的情况:</li>\n</ul>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"highlight-lines\"><br><br><br><br><div class=\"highlight-line\">&nbsp;</div><br><div class=\"highlight-line\">&nbsp;</div></div><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看出来这两种情况只有在第 5 步的时候才是有区别的.</p>\n<div class=\"hint-container danger\">\n<p class=\"hint-container-title\">在上面的 commit 到本地仓库后,如果直接推送,它会报错:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>意思就是拒绝合并没有历史关系的分支,我们用下面的代码解决这个问题</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">然后添加下面这行代码:</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>我们允许拉取没有历史关系的分支,这步也就是我们代码的第 5 步</p>\n</div>\n<h2> 分支操作</h2>\n<hr>\n<h3> 查看分支</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 切换分支</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 拉去分支</h3>\n<hr>\n<p>将远程 Git 仓库里的指定分支拉取到本地(本地不存在的分支)</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><h3> 删除分支</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 创建本地新分支并推送到远程</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 暂存</h3>\n<hr>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">不想提交当前代码到远程仓库</p>\n<p>有时候,我们想要切换分支,但是又不想将当前分支代码提交到本地或远程仓库,直接切换过去的话代码会被覆盖,这时候我们可以使用暂存功能</p>\n</div>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 提交操作</h2>\n<hr>\n<h3> 代码提交</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>提交的时候,可以输入 emoji 表情,可爱又有趣,别人一眼看过来就知道你提交的是关于什么</p>\n<p>🐛 //修复 BUG 💄 //更新样式 🔒 //解决安全问题 ♻️ //重构 ✨ //添加新功能</p>\n<h3> 提交历史</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 本地代码回滚</h3>\n<hr>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3> 标签功能</h3>\n<hr>\n<p>有时候,我们的项目上线了,我们就需要标签功能,记录我们的版本</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2> 配置</h2>\n<hr>\n<h3> config 配置</h3>\n<hr>\n<p>最后我们来说一下 config 配置</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><blockquote>\n<p>配置分为全局配置和项目配置,没有对项目进行单独配置的时候,会默认使用全局的配置.如果我们在一个项目中进行了单独的配置,那么就会使用项目中配置.这个选项在你切换不同项目(比如公司和个人项目)的时候,可以起到一定的作用.</p>\n</blockquote>\n",
      "date_published": "2022-03-01T15:15:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "如何在Axios中去控制 Loading？",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/7.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/7.html",
      "summary": "loading 的展示和取消可以说是每个前端对接口的时候都要关心的一个问题。这篇文章将要帮你解决的就是如何结合 axios 更加简洁的处理 loading 展示与取消的逻辑。 首先在我们平时处理业务的时候 loading 一般分为三种：按钮 loading，局部 loading，还有全局 loading。 按钮 loading",
      "content_html": "<figure><figcaption></figcaption></figure>\n<p>loading 的展示和取消可以说是每个前端对接口的时候都要关心的一个问题。这篇文章将要帮你解决的就是<strong>如何结合 axios 更加简洁的处理 loading 展示与取消的逻辑</strong>。</p>\n<p>首先在我们平时处理业务的时候 loading 一般分为三种：<strong>按钮 loading</strong>，<strong>局部 loading</strong>，还有<strong>全局 loading</strong>。</p>\n<h2> 按钮 loading</h2>\n<hr>\n<p>其实想写这篇博客的诱因也是因为这个按钮 loading ，在大多数时候我们写按钮 loading 业务的时候是这样写的。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>或者这样的写的</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看到 我们总要处理 loading 的开始与结束状态。而且好多接口都要这么写。这样太繁琐了，那我们可不可以这样呢？</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>把 loading 的状态给 axios 统一处理。这样代码是不是就简洁多了呢？处理方式也很简单。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>我们只需要在 axios 的拦截器中改变 loading 的值就可以，注意一定要传入一个 ref 类的值。这种写法也仅适用于 vue3。vue2 是不行的。</strong></p>\n<p>在 vue2 里面我们可能会想到这样写。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是很遗憾这样是无法生效的。原因如下</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>在 axios 中我们接口调用传入的配置项 和 拦截器返回的配置项 并不是同一个内存地址。axios 做了深拷贝处理。所以传入的 loading 对象和返回的 loading 对象并不是同一个对象。所以我们在拦截器中修改是完全没有用的。</p>\n<p>可是 vue3 为什么可以呢？因为 ref 返回的对象是 RefImpl 类的实例 并不是一个普通的对象，axios 在做深拷贝的时候没有处理这种实例对象。所以我们就可以从这里出发来改造一下我们的 axios 写法。代码如下：</p>\n<p>axios 代码：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>使用方式：</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以看到实现的原理也很简单。我们在 axios 里面把出传入的 config 中的 loading 对象也变成一个实例对象就好了。在实例对象中记录我们传入的对象，也是以为这里我们会比 vue3 的写法多一个 loading,从而实现响应式。</p>\n<h2> 局部 loading</h2>\n<hr>\n<p>局部 loading 的添加有两种方式：</p>\n<ol>\n<li>使用自定义指令 传入 true 和 false 。这样的缺陷是不够灵活，组件内的元素就很难局部添加了， 只能全组件添加。值得一提的是，改变 true 和 false 的逻辑就可以用我们上述的按钮 loading 方法。具体的实现方式这里就不再讲述了，如果需要的话可以评论区留言。</li>\n<li>在 axios 中封装。每次调用接口的时候传入需要添加 loading 的 dom。接口调用完毕删除 dom。实现方法如下。</li>\n</ol>\n<p>这里是 vue3 + antdV3 技术栈的一个封装。这里用 hooks 把设置删除 loading 的逻辑给拆了出去。</p>\n<h4> axios 代码：</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4> hooks 代码</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>基础逻辑，很简单。只需要接口请求的时候的添加 loading ，接口响应完成的时候删除 loading。但是随之而来的就有一个问题，如果多个接口同时请求 或者 一个接口频繁请求需要覆盖的都是同一个 dom，这样我们添加的 loading 就会有很多个相同的，相互覆盖。因此上述代码定义了一个 loadingDom 记录当前正在 loading 的 dom 有哪些，如果有一样的进来的 就把 count 加一 ，结束后就把 count 减一。如果 count 为零则删除 loading。</p>\n<h4> 使用实例代码：</h4>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>下面简单解释下 hooks 代码中 QSpin 组件的代码。</p>\n<div class=\"language-vue line-numbers-mode\" data-ext=\"vue\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这里是对 antdv3 的 Spin 组件做了一个简单的二次封装。主要讲解的就是一个 loading 覆盖传入 dom 的方法。</p>\n<p>大多数地方使用的方式都是 relative 和 absolute 定位组合的方式，但是这里采用了 transform 和 fixed 定位组合的方式。因为我们的项目中可能出现这样一种情况</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>假如 我们要给中间的的 div 添加 loading， 使用 relative 和 absolute 定位组合的方式。那么中间的 div 就会在样式表种添加一个 position: relative 的属性，这样代码就会变成这样</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>很明显 我们第三层 div 定位的根节点就从第一层变成了第二层，这样就会有可能导致我们样式的错乱。因此笔者采用了 transform 和 fixed 定位组合的方式。虽然上述的情况可能还会出现 但是会大大减少出现的可能性。</p>\n<h2> 全局 loading</h2>\n<hr>\n<p>这个就很简单了。如果你封装好了局部的 loading 直接在配置项的 dom 中传入 document.body 即可！</p>\n",
      "date_published": "2023-03-21T14:55:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "HTTP和HTTPS的区别",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/8.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/8.html",
      "summary": "什么是 HTTP? HTTP 和 HTTPS 的区别? 一、HTTP HTTP(HyperText Transfer Protocol),即超文本运输协议，是实现网络通信的一种规范。 在计算机和网络世界有存在不同的协议，如广播协议、寻址协议、路由协议等等...... 而HTTP是一个传输协议，即将数据由 A 传到 B 或 B 传到 A，并且 A 与 B 之间能够存放很多第三方，如 A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B",
      "content_html": "<figure><figcaption>什么是 HTTP? HTTP 和 HTTPS 的区别?</figcaption></figure>\n<h2> 一、HTTP</h2>\n<hr>\n<p><code>HTTP</code>(HyperText Transfer Protocol),即超文本运输协议，是实现网络通信的一种规范。</p>\n<p>在计算机和网络世界有存在不同的协议，如广播协议、寻址协议、路由协议等等......</p>\n<p>而<code>HTTP</code>是一个传输协议，即将数据由 A 传到 B 或 B 传到 A，并且 A 与 B 之间能够存放很多第三方，如<br>\nA&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B</p>\n<p>传输的数据并不是计算机地层中的二进制包，二十完整的、有意义的数据，如 HTML 文件、图片文件、查询结果等超文本，能够被上层引用识别</p>\n<p>在实际应用中，<code>HTTP</code>常被用于<code>Web</code>浏览器和网站服务器之间传递信息，以明文方式发送内容，不提供任何方式的数据加密</p>\n<p>特点如下：</p>\n<ul>\n<li>支持客户/服务器模式</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方式和路径。由于 HTTP 协议简单，是的 HTTP 服务器的规模小，因而通信速度很快。</li>\n</ul>\n<ul>\n<li>灵活：HTTP 允许传输任意类型的数据对象，正在传输的类型由 Content-Type 加以标记</li>\n<li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并受到客户的应答后，即断开连接。采用这种方式可以节省传输时间</li>\n<li>无状态：HTTP 协议无法根据之前的状态进行本次的请求处理</li>\n</ul>\n<h2> 二、HTTPS</h2>\n<hr>\n<p>在上述介绍<code>HTTP</code>中，了解到<code>HTTP</code>传递信息是以明文的形式发送内容，这并不安全。而<code>HTTPS</code>出现正式为了解决<code>HTTP</code>不安全的特性</p>\n<p>为了保证这些隐私数据能加密传输，让<code>HTTP</code>安全运行的<code>SSL/TLS</code>协议上，即 HTTPS=HTTP+SSL/TLS，通过<code>SSL</code>证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密</p>\n<p><code>SSL</code>协议位于<code>TCP/IP</code>协议与各种应用层协议之间，浏览器和服务器之间在使用<code>SSL</code>建立连接时需要选择一组恰当的加密算法来实现安全通信，为数据通信提供安全支持</p>\n<figure><figcaption>https加密、解密</figcaption></figure>\n<p>流程图如下所示：</p>\n<figure><figcaption>https传输流程图</figcaption></figure>\n<ul>\n<li>首先客户端通过 URL 访问服务器建立 SSL 连接</li>\n<li>服务器收到客户端请求后，会将网站支持的证书信息(证书中包含公钥)传送一份给客户端</li>\n<li>客户端的服务器开始协商 SSL 连接的安全的等级，也就是信息加密的等级</li>\n<li>客户端的浏览器根据双方同意的等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送个网站</li>\n<li>服务器利用自己的私钥解密出会话密钥</li>\n<li>服务器利用会话密钥加密与客户端之间的通信</li>\n</ul>\n<h2> 三、区别</h2>\n<hr>\n<ul>\n<li>HTTPS 是 HTTP 协议的安全版本，HTTP 协议的数据传输是明文的，是不安全的，HTTPS 使用了 SSL/TLS 协议进行了加密处理，相对更安全</li>\n<li>HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP 是 80，HTTPS 是 443</li>\n<li>HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP</li>\n<li>HTTPS 需要 SSL，SSL 证书需要钱，功能越强大的证书费用越高</li>\n</ul>\n",
      "date_published": "2022-03-05T11:29:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    },
    {
      "title": "HTTP 常见的状态码",
      "url": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/9.html",
      "id": "https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/%E5%85%B6%E4%BB%96/9.html",
      "summary": "HTTP 常见的状态码 一、是什么 HTTP 状态码(英语：HTTP Status Code)，用以表示网页服务超文本传输协议响应状态的 3 为数字代码 它由 RFC2616 规范定义的，并得到RFC 2518、RFC 2817、RFC 2295、RFC 2774与 RFC 4918等规范扩展 简单来讲，http状态码的作用是服务器告诉客户端当前请求响应的状态，通过状态码就能判断和分析服务器的运行状态",
      "content_html": "<figure><figcaption>HTTP 常见的状态码</figcaption></figure>\n<h2> 一、是什么</h2>\n<hr>\n<p>HTTP 状态码(英语：HTTP Status Code)，用以表示网页服务超文本传输协议响应状态的 3 为数字代码</p>\n<p>它由 RFC2616 规范定义的，并得到<code>RFC 2518</code>、<code>RFC 2817</code>、<code>RFC 2295</code>、<code>RFC 2774</code>与 <code>RFC 4918</code>等规范扩展</p>\n<p>简单来讲，<code>http</code>状态码的作用是服务器告诉客户端当前请求响应的状态，通过状态码就能判断和分析服务器的运行状态</p>\n<h2> 二、分类</h2>\n<hr>\n<p>状态码第一位数字决定了不同的响应状态，有如下：</p>\n<ul>\n<li>1 表示消息</li>\n<li>2 表示成功</li>\n<li>3 表示重定向</li>\n<li>4 表示请求错误</li>\n<li>5 表示服务器错误</li>\n</ul>\n<h3> 1xx</h3>\n<p>代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束</p>\n<p>常见的有：</p>\n<ul>\n<li>100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li>\n<li>101：服务器根据客户端的请求切换协议，主要用于 websocket 或 http2 升级</li>\n</ul>\n<h3> 2xx</h3>\n<p>代表请求已成功被服务器接收、理解、并接受</p>\n<p>常见的有：</p>\n<ul>\n<li>200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</li>\n<li>201（已创建）：请求成功并且服务器创建了新的资源</li>\n<li>202（已创建）：服务器已经接收请求，但尚未处理</li>\n<li>203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源</li>\n<li>204（无内容）：服务器成功处理请求，但没有返回任何内容</li>\n<li>205（重置内容）：服务器成功处理请求，但没有返回任何内容</li>\n<li>206（部分内容）：服务器成功处理了部分请求</li>\n</ul>\n<h3> 3xx</h3>\n<p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向</p>\n<p>常见的有：</p>\n<ul>\n<li>300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</li>\n<li>301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li>\n<li>302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li>\n<li>303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li>\n<li>305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</li>\n<li>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li>\n</ul>\n<h3> 4xx</h3>\n<p>代表了客户端看起来可能发生了错误，妨碍了服务器的处理</p>\n<p>常见的有：</p>\n<ul>\n<li>400（错误请求）： 服务器不理解请求的语法</li>\n<li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li>\n<li>403（禁止）： 服务器拒绝请求</li>\n<li>404（未找到）： 服务器找不到请求的资源</li>\n<li>405（方法禁用）： 禁用请求中指定的方法</li>\n<li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li>\n<li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li>\n<li>408（请求超时）： 服务器等候请求时发生超时</li>\n</ul>\n<h3> 5xx</h3>\n<p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生</p>\n<p>常见的有：</p>\n<ul>\n<li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li>\n<li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li>\n<li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li>\n<li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li>\n<li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>\n<li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li>\n</ul>\n<h2> 三、适用场景</h2>\n<hr>\n<p>下面给出一些状态码的适用场景：</p>\n<ul>\n<li>100：客户端在发送 POST 数据给服务器前，征询服务器情况，看服务器是否处理 POST 的数据，如果不处理，客户端则不上传 POST 数据，如果处理，则 POST 上传数据。常用于 POST 大数据传输</li>\n<li>206：一般用来做断点续传，或者是视频文件等大文件的加载</li>\n<li>301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用 301 就重定向到新的域名</li>\n<li>302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面</li>\n<li>304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li>\n<li>400：参数有误，请求无法被服务器识别</li>\n<li>403：告诉客户端进制访问该站点或者资源，如在外网环境下，然后访问只有内网 IP 才能访问的时候则返回</li>\n<li>404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时</li>\n<li>503：服务器停机维护时，主动用 503 响应请求或 nginx 设置限速，超过限速，会返回 503</li>\n<li>504：网关超时</li>\n</ul>\n",
      "date_published": "2022-03-05T15:18:00.000Z",
      "date_modified": "2023-06-01T12:51:48.000Z",
      "authors": [
        {
          "name": "XXXWeii"
        }
      ],
      "tags": [
        "其他"
      ]
    }
  ]
}