export const data = JSON.parse("{\"key\":\"v-fcd8f164\",\"path\":\"/category/JavaScript/5.html\",\"title\":\"编写干净 JavaScript 代码的15个小技巧\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"编写干净 JavaScript 代码的15个小技巧\",\"lang\":\"zh-CN\",\"author\":\"XXXWeii\",\"date\":\"2023-04-10T14:55:00.000Z\",\"category\":[\"JavaScript\"],\"tag\":[\"JavaScript\"],\"description\":\"我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 0. 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/JavaScript/5.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"XXXWeii\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"编写干净 JavaScript 代码的15个小技巧\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。 我们的源代码可读性越强，则： 越容易维护 新开发人员理解代码所需的时间越少 越容易发现哪些代码可以重用 在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。 0. 命名 不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。 如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-01T12:51:48.000Z\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"编写干净 JavaScript 代码的15个小技巧\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"XXXWeii\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JavaScript\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-04-10T14:55:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-01T12:51:48.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"编写干净 JavaScript 代码的15个小技巧\\\",\\\"image\\\":[\\\"https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/\\\"],\\\"datePublished\\\":\\\"2023-04-10T14:55:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-01T12:51:48.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"XXXWeii\\\"}]}\"]]},\"headers\":[],\"git\":{\"createdTime\":1685623908000,\"updatedTime\":1685623908000,\"contributors\":[{\"name\":\"zjw977020546\",\"email\":\"11487928+zjw977020546@user.noreply.gitee.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":6.45,\"words\":1935},\"filePathRelative\":\"category/JavaScript/5.md\",\"localizedDate\":\"2023年4月10日\",\"excerpt\":\"<p>我们应该编写不言自明、易于理解、易于修改或易于扩展新功能的代码。因为代码常常需要被阅读，这就是为什么如此强调干净代码的原因。</p>\\n<p>我们的源代码可读性越强，则：</p>\\n<ul>\\n<li>越容易维护</li>\\n<li>新开发人员理解代码所需的时间越少</li>\\n<li>越容易发现哪些代码可以重用</li>\\n</ul>\\n<p>在这篇文章中，我将分享一些通用的干净编码原则以及一些特定于 JavaScript 的干净编码实践。</p>\\n<h2> 0. 命名</h2>\\n<hr>\\n<p>不要把命名变成猜谜游戏。变量和函数的名称最好能够揭示最初创建的意图。</p>\\n<p>如此一来，即使有新的开发人员加入团队，也不至于需要像看天书一样艰难地理解代码。</p>\",\"autoDesc\":true}")
