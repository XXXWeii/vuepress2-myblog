export const data = JSON.parse("{\"key\":\"v-4d2a22fc\",\"path\":\"/category/Vue/8.html\",\"title\":\"Vue 前端设计模式梳理\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Vue 前端设计模式梳理\",\"lang\":\"zh-CN\",\"date\":\"2023-04-15T16:09:00.000Z\",\"author\":\"XXXWeii\",\"category\":[\"Vue\"],\"tag\":[\"Vue\"],\"description\":\"一、什么是设计模式？ 设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性。 设计模式实际上是“拿来主义”在软件领域的贯彻实践，它是一套现成的工具，拿来即用。下面来看一下设计模式的设计原则。 二、设计几个原则 单一职责原则、开放封闭原则、里式替换原则、接口隔离原则 、依赖反转原则 、最少知识原则。 下面我们一起来看看几种在前端领域常见的设计模式： 单例模式、工厂模式、策略模式、代理模式、适配器模式、观察者模式/发布-订阅模式\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/XXXWeii/vuepress2-myblog/category/Vue/8.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"XXXWeii\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Vue 前端设计模式梳理\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"一、什么是设计模式？ 设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性。 设计模式实际上是“拿来主义”在软件领域的贯彻实践，它是一套现成的工具，拿来即用。下面来看一下设计模式的设计原则。 二、设计几个原则 单一职责原则、开放封闭原则、里式替换原则、接口隔离原则 、依赖反转原则 、最少知识原则。 下面我们一起来看看几种在前端领域常见的设计模式： 单例模式、工厂模式、策略模式、代理模式、适配器模式、观察者模式/发布-订阅模式\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://github.com/XXXWeii/vuepress2-myblog/\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"Vue 前端设计模式梳理\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"XXXWeii\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Vue\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-04-15T16:09:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Vue 前端设计模式梳理\\\",\\\"image\\\":[\\\"https://github.com/XXXWeii/vuepress2-myblog/\\\"],\\\"datePublished\\\":\\\"2023-04-15T16:09:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"XXXWeii\\\"}]}\"]]},\"headers\":[],\"readingTime\":{\"minutes\":14.3,\"words\":4290},\"filePathRelative\":\"category/Vue/8.md\",\"localizedDate\":\"2023年4月16日\",\"excerpt\":\"<h2> 一、什么是设计模式？</h2>\\n<hr>\\n<p>设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性。</p>\\n<p>设计模式实际上是“拿来主义”在软件领域的贯彻实践，它是一套现成的工具，拿来即用。下面来看一下设计模式的设计原则。</p>\\n<h2> 二、设计几个原则</h2>\\n<hr>\\n<p>单一职责原则、开放封闭原则、里式替换原则、接口隔离原则 、依赖反转原则 、最少知识原则。</p>\\n<p>下面我们一起来看看几种在前端领域常见的设计模式：</p>\\n<p>单例模式、工厂模式、策略模式、代理模式、适配器模式、观察者模式/发布-订阅模式</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
