export const data = JSON.parse("{\"key\":\"v-5093d43a\",\"path\":\"/category/Vue/7.html\",\"title\":\"Vue中的响应性语法糖已废弃\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Vue中的响应性语法糖已废弃\",\"lang\":\"zh-CN\",\"date\":\"2022-02-15T00:00:00.000Z\",\"author\":\"XXXWeii\",\"category\":[\"Vue\"],\"tag\":[\"Vue\"],\"description\":\"介绍 自从引入组合式 API 的概念以来，一个主要的未解决的问题就是 ref 和 reactive 到底用哪个。reactive 存在解构丢失响应性的问题，而 ref 需要到处使用 .value 则感觉很繁琐，并且在没有类型系统的帮助时很容易漏掉 .value。 例如，下面的计数器： &lt;template&gt; &lt;button @click=\\\"increment\\\"&gt;{{ count }}&lt;/button&gt; &lt;/template&gt;\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/7.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"XXXWeii\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Vue中的响应性语法糖已废弃\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"介绍 自从引入组合式 API 的概念以来，一个主要的未解决的问题就是 ref 和 reactive 到底用哪个。reactive 存在解构丢失响应性的问题，而 ref 需要到处使用 .value 则感觉很繁琐，并且在没有类型系统的帮助时很容易漏掉 .value。 例如，下面的计数器： &lt;template&gt; &lt;button @click=\\\"increment\\\"&gt;{{ count }}&lt;/button&gt; &lt;/template&gt;\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-06-01T12:51:48.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"XXXWeii\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Vue\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-02-15T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-06-01T12:51:48.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Vue中的响应性语法糖已废弃\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-02-15T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-06-01T12:51:48.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"XXXWeii\\\"}]}\"]]},\"headers\":[],\"git\":{\"createdTime\":1685623908000,\"updatedTime\":1685623908000,\"contributors\":[{\"name\":\"zjw977020546\",\"email\":\"11487928+zjw977020546@user.noreply.gitee.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":6.22,\"words\":1865},\"filePathRelative\":\"category/Vue/7.md\",\"localizedDate\":\"2022年2月15日\",\"excerpt\":\"<h2> 介绍</h2>\\n<hr>\\n<p>自从引入组合式 API 的概念以来，一个主要的未解决的问题就是 <code>ref</code> 和 <code>reactive</code> 到底用哪个。<code>reactive</code> 存在解构丢失响应性的问题，而 <code>ref</code> 需要到处使用 <code>.value</code> 则感觉很繁琐，并且在没有类型系统的帮助时很容易漏掉 <code>.value</code>。</p>\\n<p>例如，下面的计数器：</p>\\n<div class=\\\"language-text line-numbers-mode\\\" data-ext=\\\"text\\\"><pre class=\\\"language-text\\\"><code>&lt;template&gt;\\n  &lt;button @click=\\\"increment\\\"&gt;{{ count }}&lt;/button&gt;\\n&lt;/template&gt;\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")
