import{_ as n,Z as s,$ as a,a3 as e}from"./framework-6065462a.js";const p={},t=e(`<p>当你学习 TypeScript 时，你的第一印象可能会欺骗你：这不就是 JavaScript 注解的一种方式吗？不就是编译器用来帮助我找到潜在 bug 的吗？</p><p>虽然这种说法没错，但随着你对 TypeScript 不断了解，你会发现这门编程语言最不可思议的力量在于编写、推断和操作数据类型。</p><p>本文总结的一些技巧，可以帮助大家充分发挥 TypeScript 的潜力。</p><h2 id="_1-用集合的概念思考问题" tabindex="-1"><a class="header-anchor" href="#_1-用集合的概念思考问题" aria-hidden="true">#</a> #1 用集合的概念思考问题</h2><hr><p>数据类型是程序员日常要处理的概念，但要简洁地定义它却出奇地困难。然而我发现集合非常适合用作概念模型。</p><p>刚开始学习 TypeScript 时，我们常常会发现用 TypeScript 编写类型的方式很不自然。举一个非常简单的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Measure</span> <span class="token operator">=</span> <span class="token punctuation">{</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Style</span> <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// typed { radius: number; color: string }</span>
<span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> Measure <span class="token operator">&amp;</span> Style<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在逻辑 AND 的意义上解释运算符<code>&amp;</code>，可能会认为 Circle 是一个虚拟类型，因为它是两种类型的结合，没有任何重叠的字段。这不是 TypeScript 的工作方式。此时通过集合的概念思考更容易推断出正确的行为：</p><ul><li>每个类型都是一系列值的集合。</li><li>有些集合是无限的：例如<code>string</code>、<code>object</code>；有些是有限的：例如<code>bool</code>，<code>undefined</code>，...</li><li><code>unknown</code>是通用集（包括所有值），而<code>never</code>是空集（包括无值）。</li><li>类型<code>Measure</code>是包含<code>radius</code>数字字段的所有对象的集合。<code>style</code>也是如此。</li><li><code>&amp;</code>运算符创建一个交集：<code>Measure &amp; Style</code>表示包含<code>radius</code>和<code>color</code>的对象集，这实际上是一个较小的集合，字段更常用。</li><li>同理，<code>|</code>运算符创建一个并集：一个较大的集合，但常用字段可能较少（如果组合两个对象类型的话）。</li></ul><p>集合还有助于了解可分配性：仅当值的类型是目标类型的子集时，才允许赋值：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ShapeKind</span> <span class="token operator">=</span> <span class="token string">&quot;rect&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">getSomeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> shape<span class="token operator">:</span> ShapeKind <span class="token operator">=</span> <span class="token string">&quot;rect&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// disallowed because string is not subset of ShapeKind</span>
shape <span class="token operator">=</span> foo<span class="token punctuation">;</span>

<span class="token comment">// allowed because ShapeKind is subset of string</span>
foo <span class="token operator">=</span> shape<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-了解声明类型和收窄类型" tabindex="-1"><a class="header-anchor" href="#_2-了解声明类型和收窄类型" aria-hidden="true">#</a> #2 了解声明类型和收窄类型</h2><hr><p>TypeScript 中一个非常强大的功能是基于控制流的自动类型收窄。这意味着变量在代码位置的任何特定点都有两种与之关联的类型：声明类型和收窄类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// x&#39;s type is narrowed to string, so .length is valid</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// assignment respects declaration type, not narrowed type</span>
    <span class="token class-name">x</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// disallowed because x is now number</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用可区分的联合类型而不是可选字段" tabindex="-1"><a class="header-anchor" href="#_3-使用可区分的联合类型而不是可选字段" aria-hidden="true">#</a> #3 使用可区分的联合类型而不是可选字段</h2><hr><p>当定义一组多态类型（如<code>Shape</code>）时，很容易这样开始写代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;rect&quot;</span><span class="token punctuation">;</span>
  radius<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span>
    <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius<span class="token operator">!</span> <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token operator">:</span> shape<span class="token punctuation">.</span>width<span class="token operator">!</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>height<span class="token operator">!</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要非空断言（访问<code>radius</code>、<code>width</code>和<code>height</code>时），因为<code>kind</code>和其他字段之间没有建立关系。相反，可区分的联合类型是一个更好的解决方案：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Rect</span> <span class="token operator">=</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;rect&quot;</span><span class="token punctuation">;</span> width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Circle <span class="token operator">|</span> Rect<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span>
    <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token operator">:</span> shape<span class="token punctuation">.</span>width <span class="token operator">*</span> shape<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上代码可以看出，类型收窄消除了强制类型转换的需要。</p><h2 id="_4-使用类型谓词避免类型断言" tabindex="-1"><a class="header-anchor" href="#_4-使用类型谓词避免类型断言" aria-hidden="true">#</a> #4 使用类型谓词避免类型断言</h2><hr><p>如果你以正确的方式使用 TypeScript 的话，你会发现自己很少使用显式类型断言（比如 value as SomeType）；但是，有时你可能会冲动地写出诸如这样的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Rect</span> <span class="token operator">=</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;rect&quot;</span><span class="token punctuation">;</span> width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Circle <span class="token operator">|</span> Rect<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isCircle</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isRect</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&quot;rect&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myShapes<span class="token operator">:</span> Shape<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getShapes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// error because typescript doesn&#39;t know the filtering</span>
<span class="token comment">// narrows typing</span>
<span class="token keyword">const</span> circles<span class="token operator">:</span> Circle<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> myShapes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isCircle<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you may be inclined to add an assertion:</span>
<span class="token comment">// const circles = myShapes.filter(isCircle) as Circle[];</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更优雅的解决方案是将<code>isCircle</code>和<code>isRect</code>更改为返回类型谓词，这样就可以帮助 TypeScript 在<code>filter</code>调用后进一步收窄类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isCircle</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span><span class="token operator">:</span> shape <span class="token keyword">is</span> Circle <span class="token punctuation">{</span>
    <span class="token keyword">return</span> shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;circle&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isRect</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span><span class="token operator">:</span> shape <span class="token keyword">is</span> Rect <span class="token punctuation">{</span>
    <span class="token keyword">return</span> shape<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">&#39;rect&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">...</span>
<span class="token comment">// now you get Circle[] type inferred correctly</span>
<span class="token keyword">const</span> circles <span class="token operator">=</span> myShapes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isCircle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-控制联合类型的分布方式" tabindex="-1"><a class="header-anchor" href="#_5-控制联合类型的分布方式" aria-hidden="true">#</a> #5 控制联合类型的分布方式</h2><hr><p>类型推断是 TypeScript 的特性；大多数时候，它默默地为你工作。但是有时你可能对模棱两可的细微情况进行干预。分布式条件类型就是其中一种情况。</p><p>假设我们有一个<code>ToArray</code>辅助类，如果输入类型还不是数组类型，则返回数组类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ToArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你认为以下类型会推断出什么？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>答案是<code>string[] | number[]</code>。但这是模棱两可的。为什么不是<code>(string | number)[]</code>呢？</p><p>默认情况下，当 TypeScript 遇到联合类型（此处为<code>string | number</code>）的泛型参数（此处为<code>T</code>）时，它会分布到每个组成部分中，这就是为什么会得到<code>string[] | number[]</code>的原因。你可以通过使用特殊语法并将<code>T</code>包装在一对<code>[]</code>中来更改此行为，例如：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ToArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> ToArray<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在<code>Foo</code>被推断为类型<code>(string | number)[]</code>。</p><h2 id="_6-使用详尽检查捕获在编译时未处理的情况" tabindex="-1"><a class="header-anchor" href="#_6-使用详尽检查捕获在编译时未处理的情况" aria-hidden="true">#</a> #6 使用详尽检查捕获在编译时未处理的情况</h2><hr><p>在<code>switch</code>语句中使用<code>enum</code>枚举时，一个好习惯是在没有匹配到合适值的情况下主动抛错，而不是像在其他编程语言中那样默默地忽略它们：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;circle&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;rect&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> shape<span class="token punctuation">.</span>width <span class="token operator">*</span> shape<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown shape kind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用<code>never</code>类型，静态类型检查就可以更早地查找到错误：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;circle&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;rect&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> shape<span class="token punctuation">.</span>width <span class="token operator">*</span> shape<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token comment">// you&#39;ll get a type-checking error below</span>
      <span class="token comment">// if any shape.kind is not handled above</span>
      <span class="token keyword">const</span> _exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> shape<span class="token punctuation">;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown shape kind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个，在添加新的<code>shape</code>种类时，就不可能忘记更新<code>getArea</code>函数。</p><p>该技术背后的基本原理是，除了<code>never</code>之外，不能为<code>never</code>类型分配任何内容。如果<code>shape.kind</code>的所有备选项都被<code>case</code>语句用尽，那么达到<code>default</code>的唯一可能类型是<code>never</code>；但是，如果未涵盖所有备选项，则将泄漏到<code>default</code>分支并导致无效分配。</p><h2 id="_7-宁可使用-type-而不是-interface" tabindex="-1"><a class="header-anchor" href="#_7-宁可使用-type-而不是-interface" aria-hidden="true">#</a> #7 宁可使用 type 而不是 interface</h2><hr><p>在 TypeScript 中，<code>type</code>和<code>interface</code>是两种非常相似的数据结构，都可以用来构造复杂的对象的。虽然可能有争议，但我的建议是在大多数情况下始终使用 type，仅在满足以下任一条件时才使用<code>interface</code>：</p><ul><li>想利用 interface 的合并功能。</li><li>有涉及类/接口层次结构的 OO 样式代码。</li></ul><p>否则，始终使用更通用的<code>type</code>构造会产生更一致的代码。</p><h2 id="_8-只要合适宁可使用元组而不是数组" tabindex="-1"><a class="header-anchor" href="#_8-只要合适宁可使用元组而不是数组" aria-hidden="true">#</a> #8 只要合适宁可使用元组而不是数组</h2><hr><p>对象类型是构造结构化数据的常用方法，但有时你可能希望使用更简洁的表示形式，而改用简单的数组。例如，<code>Circle</code>可以定义为：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> circle<span class="token operator">:</span> Circle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;circle&quot;</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [kind, radius]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种构造是松散的，如果创建类似<code>[&#39;circle&#39;, &#39;1.0&#39;]</code>的内容很容易出错。我们可以通过使用元组来使其更严格：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Circle</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// you&#39;ll get an error below</span>
<span class="token keyword">const</span> circle<span class="token operator">:</span> Circle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;circle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用元组的一个很好的例子是 React 中的<code>useState</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>既紧凑又类型安全。</p><h2 id="_9-控制推断类型的通用性或特殊性" tabindex="-1"><a class="header-anchor" href="#_9-控制推断类型的通用性或特殊性" aria-hidden="true">#</a> #9 控制推断类型的通用性或特殊性</h2><hr><p>TypeScript 在进行类型推断时使用合理的默认行为，旨在使常见情况下的代码编写变得容易（因此类型不需要显式注释）。有几种方法可以调整其行为。</p><ul><li>使用 const 缩小到最具体的类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// typed: { name: string }</span>
<span class="token keyword">let</span> Bar <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// typed: { name: &#39;bar&#39; }</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// typed: number[]</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// typed: [1, 2]</span>

<span class="token comment">// typed { kind: &#39;circle; radius: number }</span>
<span class="token keyword">let</span> circle <span class="token operator">=</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span> radius<span class="token operator">:</span> <span class="token number">1.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// the following won&#39;t work if circle wasn&#39;t initialized</span>
<span class="token comment">// with the const keyword</span>
<span class="token keyword">let</span> shape<span class="token operator">:</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;rect&quot;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> circle<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>satisfies</code>来检查类型，而不影响推断的类型</li></ul><p>请看以下示例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NamedCircle</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> circle<span class="token operator">:</span> NamedCircle <span class="token operator">=</span> <span class="token punctuation">{</span> radius<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;yeah&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// error because circle.name can be undefined</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个错误，这是因为根据<code>circle</code>的声明类型<code>NamedCircle，name</code>字段确实可以未定义，即使变量初始值设定项提供了字符串值。当然，我们可以删除<code>:NamedCircle</code>类型注释，但这将松散对<code>circle</code>对象有效性的类型检查。进退两难。</p><p>幸运的是，Typescript 4.9 引入了一个新的<code>satisfies</code>关键字，它允许你在不更改推断类型的情况下检查类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">NamedCircle</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    radius<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// error because radius violates NamedCircle</span>
<span class="token keyword">const</span> wrongCircle <span class="token operator">=</span> <span class="token punctuation">{</span> radius<span class="token operator">:</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;ha&#39;</span> <span class="token punctuation">}</span>
    satisfies NamedCircle<span class="token punctuation">;</span>

<span class="token keyword">const</span> circle <span class="token operator">=</span> <span class="token punctuation">{</span> radius<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;yeah&#39;</span> <span class="token punctuation">}</span>
    satisfies NamedCircle<span class="token punctuation">;</span>

<span class="token comment">// circle.name can&#39;t be undefined now</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后的版本具有两个优点：对象字面量保证符合<code>NamedCircle</code>类型，推断类型具有不可为空的名称字段。</p><h2 id="_10-使用-infer-创建额外的泛型类型参数" tabindex="-1"><a class="header-anchor" href="#_10-使用-infer-创建额外的泛型类型参数" aria-hidden="true">#</a> #10 使用 infer 创建额外的泛型类型参数</h2><hr><p>在设计实用工具函数和类型时，你经常会觉得需要使用从给定类型参数中提取的类型。在这种情况下，<code>infer</code>关键字就可以派上用场。它可以帮助快速推断新的类型参数。下面是两个简单的例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// gets the unwrapped type out of a Promise;</span>
<span class="token comment">// idempotent if T is not Promise</span>
<span class="token keyword">type</span> <span class="token class-name">ResolvedPromise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">t</span> <span class="token operator">=</span> ResolvedPromise<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// t: string</span>

<span class="token comment">// gets the flattened type of array T;</span>
<span class="token comment">// idempotent if T is not array</span>
<span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">E</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> Flatten<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">e</span> <span class="token operator">=</span> Flatten<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// e: number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>infer</code>关键字在<code>T extends Promise&lt;infer U&gt;</code>中的工作原理可以理解为：假设<code>T</code>与一些实例化的泛型 Promise 类型兼容，临时凑合一个类型参数<code>U</code>以使其工作。因此，如果<code>T</code>被实例化为<code>Promise&lt;string&gt;</code>，则<code>U</code>的解决方案将是<code>string</code>。</p><h2 id="_11-创新类型操作以保持-dry" tabindex="-1"><a class="header-anchor" href="#_11-创新类型操作以保持-dry" aria-hidden="true">#</a> #11 创新类型操作以保持 DRY</h2><hr><p>TypeScript 提供了强大的类型操作语法和一组非常有用的实用程序，可帮助你将代码重复减少到最低限度。以下是一些简单示例：</p><p>与其重复字段声明：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    country<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    city<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Demographic</span> <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token operator">:</span> gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Geo</span> <span class="token operator">=</span> <span class="token punctuation">{</span> country<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还不如使用<code>pick</code>实用程序提取新类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  gender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  country<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Demographic</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;gender&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Geo</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&quot;country&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;city&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其复制函数的返回类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
        radius<span class="token operator">:</span> <span class="token number">1.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">transformCircle</span><span class="token punctuation">(</span>circle<span class="token operator">:</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span><span class="token punctuation">;</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token function">transformCircle</span><span class="token punctuation">(</span><span class="token function">createCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还不如使用<code>ReturnType&lt;T&gt;</code>提取：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        kind<span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
        radius<span class="token operator">:</span> <span class="token number">1.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">transformCircle</span><span class="token punctuation">(</span>circle<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> createCircle<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token function">transformCircle</span><span class="token punctuation">(</span><span class="token function">createCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其并行同步两种类型的<code>shape</code>（此处为<code>config</code>类型和<code>Factory</code>）：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ContentTypes</span> <span class="token operator">=</span> <span class="token string">&#39;news&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blog&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;video&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// config for indicating what content types are enabled</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> news<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> blog<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> video<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    satisfies Record<span class="token operator">&lt;</span>ContentTypes<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// factory for creating contents</span>
<span class="token keyword">type</span> <span class="token class-name">Factory</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">createNews</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Content<span class="token punctuation">;</span>
    <span class="token function-variable function">createBlog</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Content<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还不如使用映射类型和模板字面量类型根据<code>config</code>的形状自动推断正确的<code>factory</code>类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ContentTypes</span> <span class="token operator">=</span> <span class="token string">&#39;news&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blog&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;video&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// generic factory type with a inferred list of methods</span>
<span class="token comment">// based on the shape of the given Config</span>
<span class="token keyword">type</span> <span class="token class-name">ContentFactory<span class="token operator">&lt;</span>Config <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>ContentTypes<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> Config <span class="token keyword">as</span> Config<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>
        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">create</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span>k<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Content<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// config for indicating what content types are enabled</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> news<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> blog<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> video<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    satisfies Record<span class="token operator">&lt;</span>ContentTypes<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Factory</span> <span class="token operator">=</span> ContentFactory<span class="token operator">&lt;</span><span class="token keyword">typeof</span> config<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// Factory: {</span>
<span class="token comment">//     createNews: () =&gt; Content;</span>
<span class="token comment">//     createBlog: () =&gt; Content;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><hr><p>这篇文章介绍了一系列 TypeScript 语言的高级应用。在实践中，你可能会发现直接这样用并不常见；但是，这些技术被大量用于那些专门为 TypeScript 而设计的库：如 Prisma 和 tRPC。了解这些技巧可以帮助你更好地理解这些工具是发挥其威力的。</p>`,97),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","1.html.vue"]]);export{u as default};
