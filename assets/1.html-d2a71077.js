import{_ as p,C as o,Z as c,$ as l,a0 as a,a1 as n,a2 as t,a3 as e}from"./framework-6065462a.js";const i="/vuepress2-myblog/assets/202304081-fa44704f.png",u="/vuepress2-myblog/assets/202304082-eba2d068.png",d={},r=e(`<p>在本文中，将介绍一些鲜为人知但却非常有用的 API，如：</p><ul><li><code>Page Visibility API</code></li><li><code>Web Share API</code></li><li><code>Broadcast Channel API</code></li><li><code>Internationalization API</code></li></ul><p>我们将一起看看它们是什么，我们应该在哪里使用它们，以及如何使用它们。</p><h2 id="page-visibility-api" tabindex="-1"><a class="header-anchor" href="#page-visibility-api" aria-hidden="true">#</a> Page Visibility API</h2><hr><p>这是一个鲜为人知的 web API，在<strong>JS 现状调查</strong>[1]中，它的认知度排名倒数第四。它可以让你知道用户何时离开了页面。准确地说，只要页面的可见性状态发生变化，无论是用户最小化、最大化窗口还是切换标签页，该 API 都会触发一个事件。</p><p>在过去，你不得不使用一些噱头来了解用户是否切换了标签页或最小化了窗口。最流行的方式是使用<code>blur</code>和<code>focus</code>浏览器事件。使用这些事件会导致类似下面情况的发生：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;focus&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// User is back on the page</span>
  <span class="token comment">// Do Something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;blur&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// User left the page</span>
  <span class="token comment">// Do Something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的代码可以工作，但是不符合预期。因为<code>blur</code>事件是在页面失去焦点时触发的，所以当用户点击搜索栏、<code>alert</code>对话框、控制台或窗口边框时，它就会被触发。所以，<code>blur</code>和<code>focus</code>只告诉我们页面是否被激活，但不告诉我们页面的内容是否被隐藏或显示。</p><h3 id="什么时候使用" tabindex="-1"><a class="header-anchor" href="#什么时候使用" aria-hidden="true">#</a> 什么时候使用</h3><p>一般来说，我们想要使用<code>Page Visibility API</code>，是希望用来停止不必要的程序。比如说当用户没有看到页面时，或者执行后台操作时。具体的场景可以是：</p><ul><li>当用户离开页面时暂停视频、图像旋转或动画；</li><li>如果页面显示来自 API 的实时数据，在用户离开时暂时停止实时显示的行为；</li><li>发送用户分析报告。</li></ul><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用</h3><p><code>Page Visibility API</code>带来了两个属性和一个事件，用于访问页面可见性状态：</p><ul><li><p><code>document.hidden</code>：该属性是全局可见并且只读。尽量避免使用该属性，因为现在已经被废弃了。当访问该属性时，如果页面是隐藏状态则返回<code>true</code>，如果页面是可见状态则返回<code>false</code>。</p></li><li><p><code>document.visibilityState</code>：该属性是<code>document.hidden</code>更新后的版本。当访问该属性时，会根据页面的可见性状态返回四个可能的值：</p></li><li><ul><li><code>visible</code>：该页面是可见的，或者准确地说，它没有被最小化，也不在另一个标签页。</li><li><code>hidden</code>：该页面不可见，它是最小化的，或者在另一个标签页。</li><li><code>prerender</code>：这是一个可见页面在预渲染时的初始状态。一个页面的可见性状态可以从<code>prerender</code>开始，然后改变到另一个状态，但它不能从另一个状态改变到<code>prerender</code>。</li><li><code>unloaded</code>：该页面正在从内存中卸载。</li></ul></li><li><p><code>visibilitychange</code>：这是一个由<code>document</code>对象提供的事件，当页面的<code>visibilityState</code>发生变化时被触发。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;visibilitychange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&quot;visible&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// page is visible</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// page is hidden</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了了解如何使用<code>Page Visibility API</code>，让我们用该特性来实现当用户离开页面时，暂停视频以及停止从 API 获取资源。首先，我将使用<code>vite.js</code>，它是一个快速启动新项目的神奇工具：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm create vite@latest unknown-web-apis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当被要求选择一个框架时，选择<code>vanilla</code>来创建一个<code>vanilla</code>javascript 项目。完成之后，前往新文件夹，安装必要的<code>npm</code>包并启动开发服务器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd unknown-web-apis
npm install
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开<strong>localhost:3000/</strong>[2]，你将看到你的 Vite 项目启动和运行！</p><p><img src="`+i+`" alt="图片" loading="lazy">vite-new-project.png</p><p>首先，我们直接跳转到<code>/main.js</code>文件并删除所有样板代码。其次，打开<code>/index.html</code>，在<code>id</code>为<code>#app</code>的<code>div</code>标签内部添加一个<code>video</code>元素，上面可以添加你想添加的任意视频文件。这里我使用了一只正在跳舞的耀西。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>video<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./yoshi.mp4<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="图片" loading="lazy">dancing-Yoshi.png</p><p>回到<code>/main.js</code>，我们将向<code>document</code>对象添加一个事件监听器，用来监听<code>visibilitychange</code>事件。然后当页面显示或隐藏时，我们可以访问<code>document.visibilityState</code>属性的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;visibilitychange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以前往页面的控制台，当最小化窗口或者切换到另一个标签页时，查看页面可见性状态。现在，在事件监听器内部，我们可以检查<code>document.visibilityState</code>属性，当属性值为<code>hidden</code>时暂停视频，当属性值为<code>visible</code>时播放视频。当然，我们首先要使用<code>document.querySelector()</code>选择<code>video</code>元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#video&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;visibilitychange&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&quot;visible&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    video<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),k=a("code",null,"Page Visibility API",-1),v={href:"http://quotable.io",target:"_blank",rel:"noopener noreferrer"},m=a("code",null,"/index.html",-1),g=a("code",null,"div",-1),b=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>video<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./yoshi.mp4<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>quote<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=a("code",null,"/main.js",-1),q=a("strong",null,"Fetch API",-1),y=a("code",null,"quotable.io",-1),f={href:"https://api.quotable.io/random**%5B5%5D",target:"_blank",rel:"noopener noreferrer"},w=a("code",null,"quote",-1),_=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#quote&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;https://api.quotable.io/random&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> author<span class="token punctuation">,</span> dateAdded <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> parsedQuote <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> &lt;q&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/q&gt; &lt;br&gt; &lt;p&gt;- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;&lt;br&gt; &lt;p&gt;Added on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dateAdded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    quote<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> parsedQuote<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们简单地解释一下此处发生了什么。首先我们从 DOM 中选中了<code>quote</code>元素。然后声明<code>getQuote</code>函数，该函数是一个异步函数，允许我们使用<code>await</code>关键字进行等待，直到从 API 中获取到数据。获取的数据是 JSON 格式的，因此我们再次使用<code>await</code>关键字来等待，直到数据被解析为 JavaScript 对象。</p><p><code>quotable.io</code>的 API 为我们提供了<code>content</code>、<code>author</code>和<code>dateAdded</code>等属性，我们把这些属性注入并显示在<code>quote</code>div 中。这样做是没问题的，但是引用只会获取一次，因此我们可以使用<code>setInterval()</code>每 10 秒来调用一次函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#quote&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;https://api.quotable.io/random&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> author<span class="token punctuation">,</span> dateAdded <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> parsedQuote <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> &lt;q&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/q&gt; &lt;br&gt; &lt;p&gt;- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;&lt;br&gt; &lt;p&gt;Added on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dateAdded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    quote<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> parsedQuote<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">getQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span>getQuote<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用户最小化窗口或者切换标签页，该页面仍然会获取引用，创建没有必要的网络加载。为了解决这个问题，在获取引用之前我们可以检查当前页面是否可见。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&quot;visible&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;https://api.quotable.io/random&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> author<span class="token punctuation">,</span> dateAdded <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> parsedQuote <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
          &lt;q&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/q&gt; &lt;br&gt; 
          &lt;p&gt;- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;&lt;br&gt; 
          &lt;p&gt;Added on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dateAdded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      quote<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> parsedQuote<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">getQuote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span>getQuote<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们只会在页面对用户可见的情况下获取引用。</p><h3 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h3><p><strong>广泛支持</strong>[6]</p><h2 id="web-share-api" tabindex="-1"><a class="header-anchor" href="#web-share-api" aria-hidden="true">#</a> Web Share API</h2><hr><h3 id="这是什么" tabindex="-1"><a class="header-anchor" href="#这是什么" aria-hidden="true">#</a> 这是什么</h3><p><code>Web Share API</code>也是最不为人所知的 API 之一，但却非常有用。它可以让你访问操作系统的原生分享机制，这对移动端用户特别有用。有了这个 API，你可以分享文本、链接和文件，而不需要创建你自己的分享机制或使用第三方的分享机制。</p><h3 id="什么时候使用-1" tabindex="-1"><a class="header-anchor" href="#什么时候使用-1" aria-hidden="true">#</a> 什么时候使用</h3><p>用途已经不言自明。你可以用它将你的页面内容分享到社交媒体上，或将其复制到用户的剪贴板上。</p><h3 id="如何使用-1" tabindex="-1"><a class="header-anchor" href="#如何使用-1" aria-hidden="true">#</a> 如何使用</h3><p><code>Web Share API</code>赋予我们两个接口来访问用户的分享系统：</p><ol><li><p><code>navigator.canShare()</code>：接受你想分享的数据作为参数，并根据其是否可分享，来返回一个布尔参数。</p></li><li><p><code>navigator.share()</code>：返回一个<code>promise</code>，如果分享成功的话，该<code>promise</code>将会<code>resolve</code>。该接口会调用原生分享机制，并接收你想分享的数据作为参数。注意，它只能在用户按下链接或按钮时调用。也就是说，它需要<strong>transient activation</strong>[7]（瞬时激活）。分享数据是一个可以具有以下属性的对象：</p></li><li><ul><li><code>url</code>：要分享的链接</li><li><code>text</code>：要分享的文本</li><li><code>title</code>：要分享的标题</li><li><code>files</code>：表示要分享的<code>File</code>对象数组</li></ul></li></ol><p>为了了解如何使用该 API，我们将回收先前的用例，做一个选项使用<code>Web Sharing API</code>来分享我们的引用。首先，我们必须在<code>/index.html</code>新增一个分享按钮：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>video<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./yoshi.mp4<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>quote<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>share-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Share Quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前往<code>/main.js</code>从 DOM 中选择分享按钮。然后，创建<code>async</code>函数来分享想要分享的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shareButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#share-button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">shareQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">shareData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> navigator<span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span>shareData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以为<code>shareButton</code>元素添加<code>click</code>事件监听器，以此来调用<code>shareQuote</code>函数。<code>shareData.text</code>的值会是<code>quote.textContent</code>属性，<code>shareData.url</code>的值会是页面的 URL，也就是<code>location.href</code>属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shareButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#share-button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">shareQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">shareData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> navigator<span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span>shareData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

shareButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> shareData <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;A Beautiful Quote&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> quote<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> location<span class="token punctuation">.</span>href<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">shareQuote</span><span class="token punctuation">(</span>shareData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以通过你的原生操作系统与任何人分享你的引用。然而，需要注意的是，<code>Web Share API</code>只有在上下文安全的情况下才会起作用，也就是说，页面是通过<code>https://</code>或<code>wss://</code> URLs 提供的。</p><h3 id="兼容性-1" tabindex="-1"><a class="header-anchor" href="#兼容性-1" aria-hidden="true">#</a> 兼容性</h3><p><strong>基本不支持</strong>[8]</p><h2 id="broadcast-channel-api" tabindex="-1"><a class="header-anchor" href="#broadcast-channel-api" aria-hidden="true">#</a> Broadcast Channel API</h2><hr><h3 id="这是什么-1" tabindex="-1"><a class="header-anchor" href="#这是什么-1" aria-hidden="true">#</a> 这是什么</h3><p>我想谈论的另一个 API 是<code>Broadcast Channel API</code> 。它允许浏览器上下文互相发送和接收基本数据。浏览器上下文是指标签页、窗口、<code>iframe</code>等元素，或任何可以显示页面的地方。出于安全考量，浏览器上下文之间的通信是不被允许的，除非它们是同源的并使用<code>Broadcast Channel API</code>。对于两个同源的浏览器上下文，它们的 URL 必须有相同的协议（如<code>http/https</code>）、域（如<code>example.com</code>）和端口（如<code>:8080</code>）。</p><h3 id="什么时候使用-2" tabindex="-1"><a class="header-anchor" href="#什么时候使用-2" aria-hidden="true">#</a> 什么时候使用</h3><p><code>Broadcast Channel API</code>通常用于在不同的标签页和窗口之间保持页面状态同步，以提高用户体验或出于安全原因考虑。它也可以用来知道一个服务在另一个标签页或窗口中何时完成。使用场景有：</p><ul><li>在所有标签页上登录或注销用户。</li><li>检测资源何时上传，并在所有页面中展示它。</li><li>指示<code>service worker</code>做一些幕后工作。</li></ul><h3 id="如何使用-2" tabindex="-1"><a class="header-anchor" href="#如何使用-2" aria-hidden="true">#</a> 如何使用</h3><p><code>Broadcast Channel API</code>涉及一个<code>BroadcastChannel</code>对象，该对象可用于向其他上下文发送信息。构造函数只有一个参数：作为标识符的字符串，该标识符从其他上下文连接到频道。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> broadcast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;new_channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦我们在两个上下文中创建了具有相同标识符的<code>BroadcastChannel</code>对象，这个新的<code>BroadcastChannel</code>对象将有两个可用的方法来开始进行通信：</p><ul><li><p><code>BroadcastChannel.postMessage()</code>：在所有连接的上下文中发送消息。它接受任意类型的对象作为其唯一的参数，因此你可以发送各种各样的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>broadcast<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Example message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>BroadcastChannel.close()</code>：关闭通道，向浏览器表明它不会再收到任何信息，这样它就可以把这些信息收集到垃圾回收中。</p></li></ul><p>为了接受信息，<code>BroadcastChannel</code>有一个<code>message</code>事件，我们可以使用<code>addEventListener</code>或其<code>onmessage</code>属性来监听。<code>message</code>事件有一个<code>data</code>属性，包含发送的数据和其他属性，以识别发送消息的上下文，如<code>origin</code>、<code>lastEventId</code>、<code>source</code>和<code>ports</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>broadcast<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token punctuation">,</span> origin <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>origin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看如何通过使用先前的例子来使用<code>Broadcast Channel API</code>。我们的目标是制作另一个具有同源的浏览器上下文，并在两个上下文中展示相同的引用。为了做到这一点，我们将创建一个名为<code>new-origin</code>的新文件夹，里面有一个新的<code>/index.html</code>和<code>/main.js</code>文件。</p><p><code>/new-origin/index.html</code>将是一个新的 HTML 模板，里面有一个<code>#quote</code>div：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/svg+xml<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../favicon.svg<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vite App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>quote<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>/new-origin/main.js</code>文件中，我们将创建一个新的<code>broadcast channel</code>，并从 DOM 中选择<code>#quote</code>元素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> broadcast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;quote_channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> quote <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#quote&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在先前的<code>/main.js</code>文件中，我们将创建新的<code>BroadcastChannel</code>对象，并连接到<code>&quot;quote_channel&quot;</code>。我们还将修改<code>getQuote</code>函数，将引用作为消息发送到其他上下文。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> broadcast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;quote_channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//...</span>

<span class="token keyword">const</span> <span class="token function-variable function">getQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;https://api.quotable.io/random&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> author<span class="token punctuation">,</span> dateAdded <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> parsedQuote <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> &lt;q&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/q&gt; &lt;br&gt; &lt;p&gt;- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;&lt;br&gt; &lt;p&gt;Added on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dateAdded<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    quote<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> parsedQuote<span class="token punctuation">;</span>
    broadcast<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>parsedQuote<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到<code>/new-origin/main.js</code>文件，我们将监听<code>message</code>事件并在每次发送新的引用时改变<code>quote.innerHTML</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> broadcast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastChannel</span><span class="token punctuation">(</span><span class="token string">&quot;quote_channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> quote <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#quote&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

broadcast<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  quote<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以看到<code>http://localhost:3000/new-origin/</code>中的引用是如何变化为<code>http://localhost:3000</code>中的引用的。你也可以注意到，当<code>http://localhost:3000</code>标签被隐藏时，引用并没有改变，因为它只在其页面可见性状态为可见时才会去获取引用。</p><h3 id="兼容性-2" tabindex="-1"><a class="header-anchor" href="#兼容性-2" aria-hidden="true">#</a> 兼容性</h3><p><strong>广泛支持</strong>[9]</p><h2 id="internationalization-api" tabindex="-1"><a class="header-anchor" href="#internationalization-api" aria-hidden="true">#</a> Internationalization API</h2><hr><h3 id="这是什么-2" tabindex="-1"><a class="header-anchor" href="#这是什么-2" aria-hidden="true">#</a> 这是什么</h3><p>在开发一个网页或应用程序时，需要将其内容翻译成其他语言以覆盖更广泛的受众是非常常见的。然而，仅仅将你的网页文本翻译成你所需要的任何语言，并不足以使你的内容对讲该语言的人可用，因为像日期、数字、单位等东西在不同国家是不同的，可能会给你的用户带来困惑。</p><p>我们假设你想在你的网页上展示日期&quot;2022 年 11 月 8 日&quot;，就像&quot;11/8/22&quot;。根据读者所在的国家，这些数据可以用三种不同的方式来阅读：</p><ul><li>&quot;11/8/2022&quot;或美国用户的 MM/DD/YY。</li><li>&quot;8/11/2022&quot;或欧洲和拉美用户的 DD/MM/YY。</li><li>&quot;2011/8/22&quot;或日本、中国和加拿大用户的 YY/MM/DD。</li></ul><p>这就是<code>Internationalization API</code>（或<code>I18n API</code>）来解决不同语言和地区的格式问题的地方。<code>I18n API</code>是一个了不起的工具，有多种用途，但我们不会深入研究，以免使本文过于复杂。</p><h3 id="如何使用-3" tabindex="-1"><a class="header-anchor" href="#如何使用-3" aria-hidden="true">#</a> 如何使用</h3><p><code>I18n API</code>使用<code>locale</code>标识符来起作用。<code>locale</code>标识符是一个字符串，用来表示用户的语言、城市、地区、方言以及其他偏好。准确的说，<code>locale</code>标识符是一个字符串，由连字符分隔的子标签组成。子标签代表了用户偏好，比如语言、国家、地区或文字，并以以下方式格式化：</p><ol><li><code>&quot;zh&quot;</code>：中文（语言）；</li><li><code>&quot;zh-Hant&quot;</code>：用繁体字（文字）书写的中文（语言）；</li><li><code>&quot;zh-Hant-TW&quot;</code>：在台湾（地区）使用的繁体字（文字）书写的中文（语言）。</li></ol><p>还有更多的子标签来解决更多用户的偏好（如果你想了解更多，你可以查看<strong>RFC</strong>[10]对语言标签的定义），但简而言之，<code>I18n API</code>使用这些<code>locale</code>标识符来知道如何格式化所有语言敏感的数据。</p><p>更确切地说，<code>I18n API</code>提供了一个<code>Intl</code>对象，它带来了一堆专门的构造函数来处理对语言敏感的数据。在我看来，一些对国际化最有用的<code>Intl</code>构造函数是：</p><ul><li><code>Intl.DateTimeFormat()</code>：用于格式化日期和时间。</li><li><code>Intl.DisplayNames()</code>：用于格式化语言、地区和文字显示名字。</li><li><code>Intl.Locale()</code>：用于构建和操作<code>locale</code>标识符标签。</li><li><code>Intl.NumberFormat()</code>：用于格式化数字。</li><li><code>Intl.RelativeTimeFormat()</code>：用于格式化相对时间描述。</li></ul><p>在我们的例子中，我们将重点关注<code>Intl.DateTimeFormat()</code>构造函数，以根据用户的区域设置来格式化引用的<code>dateAdded</code>属性。<code>Intl.DateTimeFormat()</code>构造函数接收两个参数：定义日期格式约定的<code>locale</code>字符串和用于自定义日期格式的<code>options</code>对象。</p><p>创建的<code>Intl.DateTimeFormat()</code>对象有一个<code>format()</code>方法，它接收两个参数：我们要格式化的<code>Date</code>对象和用于自定义如何显示格式化日期的<code>options</code>对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">logDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">locale</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2022-10-24&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// YY/MM/DD</span>
  <span class="token keyword">const</span> dateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeZone</span><span class="token operator">:</span> <span class="token string">&quot;UTC&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> formatedDate <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>newDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatedDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">logDate</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10/24/2022</span>
<span class="token function">logDate</span><span class="token punctuation">(</span><span class="token string">&quot;de-DE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 24.10.2022</span>
<span class="token function">logDate</span><span class="token punctuation">(</span><span class="token string">&quot;zh-TW&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2022/10/24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在<code>Intl.DateTimeFormat</code>构造函数的<code>options</code>参数中，我们将<code>timeZone</code>属性设置为<code>&quot;UTC&quot;</code>，这样日期就不会被格式化为用户的当地时间。在我的例子中，没有<code>timeZone</code>的选项，日期被解析为 &quot;10/23/2022&quot;。</p><p>正如你所看到的，<code>dateTime.format()</code>根据<code>locale</code>的日期格式约定改变日期。我们可以使用<code>navigator.language</code>全局属性在引用的日期上实现这一行为，该全局属性具有用户的首选<code>locale</code>设置。为此，我们将创建一个新的函数，接收一个日期字符串（YYYY-MM-DD 格式），并根据用户的<code>locale</code>返回格式化的日期。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">formatDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dateString</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> locale <span class="token operator">=</span> navigator<span class="token punctuation">.</span>language<span class="token punctuation">;</span>
  <span class="token keyword">const</span> dateTimeFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>DateTimeFormat</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeZone</span><span class="token operator">:</span> <span class="token string">&quot;UTC&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> dateTimeFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在<code>getQuote()</code>函数中添加这个函数来解析<code>dateAdded</code>日期。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getQuote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>visibilityState <span class="token operator">===</span> <span class="token string">&quot;visible&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;https://api.quotable.io/random&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> author<span class="token punctuation">,</span> dateAdded <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> parsedQuote <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
            &lt;q&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/q&gt; &lt;br&gt; 
            &lt;p&gt;- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;&lt;br&gt; 
            &lt;p&gt;Added on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">formatDate</span><span class="token punctuation">(</span>dateAdded<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      quote<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> parsedQuote<span class="token punctuation">;</span>
      broadcast<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>parsedQuote<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个，我们的引用就被本地化为用户的首选语言了！在我的例子中，我的<code>navigator.language</code>值是<code>&quot;en&quot;</code>，所以我的日期被格式化为 MM/DD/YY。</p><h3 id="兼容性-3" tabindex="-1"><a class="header-anchor" href="#兼容性-3" aria-hidden="true">#</a> 兼容性</h3><p><strong>广泛支持</strong>[11]</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><hr><p>读完这篇文章后，你现在可以灵活地了解这些 API 的存在以及如何使用它们。尽管它们在 JS 现状调查中的认知度排名最后，但它们非常有用，知道如何使用它们肯定会提高你的开发经验。这些强大的 API 并不为人所知，这意味着还有一些你我都不知道的有用的 API，所以现在是探索并找到那个可以简化你的代码，并为你节省大量开发时间的 API 的最佳时机。</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3>`,81),I={href:"https://2021.stateofjs.com/en-US/features/",target:"_blank",rel:"noopener noreferrer"},j={href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer"},x={href:"http://quotable.io",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/lukePeavey/quotable",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API%5B5%5Dhttps://api.quotable.io/random:https://api.quotable.io/random",target:"_blank",rel:"noopener noreferrer"},D={href:"https://caniuse.com/pagevisibility",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/en-US/docs/Glossary/Transient_activation",target:"_blank",rel:"noopener noreferrer"},T={href:"https://caniuse.com/web-share",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://caniuse.com/mdn-api_broadcastchannel_name",target:"_blank",rel:"noopener noreferrer"},B={href:"https://datatracker.ietf.org/doc/html/rfc5646",target:"_blank",rel:"noopener noreferrer"},C={href:"https://caniuse.com/internationalization",target:"_blank",rel:"noopener noreferrer"};function M(L,F){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,a("p",null,[n("现在，只要用户离开页面，视频就会停止。另一个使用"),k,n("的场景是，当用户没有查看页面时，停止获取不必要的资源。为了看效果，我们将编写一个函数不间断地从"),a("strong",null,[a("a",v,[n("quotable.io"),t(s)])]),n("[3] API 获取随机引用，并当页面隐藏时暂停该行为。首先，我们将在"),m,n("创建一个新的"),g,n("标签来存储引用。")]),b,a("p",null,[n("回到"),h,n("，我们使用"),q,n("[4]发起对"),y,n("端点**"),a("a",f,[n("https://api.quotable.io/random**[5]"),t(s)]),n(" 的调用，然后将结果插入到"),w,n("div 中。")]),_,a("p",null,[n("[1]JS 现状调查:"),a("a",I,[n("https://2021.stateofjs.com/en-US/features/"),t(s)])]),a("p",null,[n("[2]localhost:3000/:"),a("a",j,[n("http://localhost:3000/"),t(s)])]),a("p",null,[n("[3]"),a("a",x,[n("quotable.io"),t(s)]),n(":"),a("a",A,[n("https://github.com/lukePeavey/quotable"),t(s)])]),a("p",null,[n("[4]Fetch API:"),a("a",P,[n("https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API[5]https://api.quotable.io/random:https://api.quotable.io/random"),t(s)])]),a("p",null,[n("[6]广泛支持:"),a("a",D,[n("https://caniuse.com/pagevisibility"),t(s)])]),a("p",null,[n("[7]transient activation:"),a("a",S,[n("https://developer.mozilla.org/en-US/docs/Glossary/Transient_activation"),t(s)])]),a("p",null,[n("[8]基本不支持:"),a("a",T,[n("https://caniuse.com/web-share"),t(s)])]),a("p",null,[n("[9]广泛支持:"),a("a",Q,[n("https://caniuse.com/mdn-api_broadcastchannel_name"),t(s)])]),a("p",null,[n("[10]RFC:"),a("a",B,[n("https://datatracker.ietf.org/doc/html/rfc5646"),t(s)])]),a("p",null,[n("[11]广泛支持:"),a("a",C,[n("https://caniuse.com/internationalization"),t(s)])])])}const z=p(d,[["render",M],["__file","1.html.vue"]]);export{z as default};
