const n=JSON.parse(`{"key":"v-53fd8578","path":"/category/Vue/6.html","title":"Vue的nextTick源码解析","lang":"zh-CN","frontmatter":{"title":"Vue的nextTick源码解析","lang":"zh-CN","date":"2022-02-15T16:09:00.000Z","author":"XXXWeii","category":["Vue"],"tag":["Vue"],"description":"nextTick 支持两种形式使用方式： 回调函数形式。 如果当前环节支持 Promise，还支持 Promise.then 的形式。 let pending = false, timeFunc, callbacks=[]; //cb:执行的回调函数,context:执行上下文参数 function nextTick(cb,context){ let _resolve=null; callbacks.push(()=&gt;{ if(cb){ try{ cb.call(context) }catch(e){ handleError(e,ctx,'nextTick) } }else if(_resolve){ _resolve(context) } }) if(!pending){ pending=true; timeFunc() } if(!cb&amp;&amp;typeof Promise !== \\"undefind\\"){ rteurn new Promise(resolve=&gt;_resolve=resolve) } } let isUsingMicroTask = false; if (typeof Promise !== 'undefined' &amp;&amp; isNative(Promise)) { //判断1：是否原生支持Promise const p = Promise.resolve() timerFunc = () =&gt; { p.then(flushCallbacks) if (isIOS) setTimeout(noop) } isUsingMicroTask = true } else if (!isIE &amp;&amp; typeof MutationObserver !== 'undefined' &amp;&amp; ( isNative(MutationObserver) || MutationObserver.toString() === '[object MutationObserverConstructor]' )) { //判断2：是否原生支持MutationObserver let counter = 1 const observer = new MutationObserver(flushCallbacks) const textNode = document.createTextNode(String(counter)) observer.observe(textNode, { characterData: true }) timerFunc = () =&gt; { counter = (counter + 1) % 2 textNode.data = String(counter) } isUsingMicroTask = true } else if (typeof setImmediate !== 'undefined' &amp;&amp; isNative(setImmediate)) { //判断3：是否原生支持setImmediate timerFunc = () =&gt; { setImmediate(flushCallbacks) } } else { //判断4：上面都不行，直接用setTimeout timerFunc = () =&gt; { setTimeout(flushCallbacks, 0) } } function flushCallbacks () { pending = false const copies = callbacks.slice(0) callbacks.length = 0 for (let i = 0; i &lt; copies.length; i++) { copies[i]() } } nextTick(()=&gt;{ console.log(\\"nextTick callback\\") }) nextTick().then(()=&gt;{ console.log(\\"nextTick Promise\\") })","head":[["meta",{"property":"og:url","content":"https://github.com/XXXWeii/vuepress2-myblog/vuepress2-myblog/category/Vue/6.html"}],["meta",{"property":"og:site_name","content":"XXXWeii"}],["meta",{"property":"og:title","content":"Vue的nextTick源码解析"}],["meta",{"property":"og:description","content":"nextTick 支持两种形式使用方式： 回调函数形式。 如果当前环节支持 Promise，还支持 Promise.then 的形式。 let pending = false, timeFunc, callbacks=[]; //cb:执行的回调函数,context:执行上下文参数 function nextTick(cb,context){ let _resolve=null; callbacks.push(()=&gt;{ if(cb){ try{ cb.call(context) }catch(e){ handleError(e,ctx,'nextTick) } }else if(_resolve){ _resolve(context) } }) if(!pending){ pending=true; timeFunc() } if(!cb&amp;&amp;typeof Promise !== \\"undefind\\"){ rteurn new Promise(resolve=&gt;_resolve=resolve) } } let isUsingMicroTask = false; if (typeof Promise !== 'undefined' &amp;&amp; isNative(Promise)) { //判断1：是否原生支持Promise const p = Promise.resolve() timerFunc = () =&gt; { p.then(flushCallbacks) if (isIOS) setTimeout(noop) } isUsingMicroTask = true } else if (!isIE &amp;&amp; typeof MutationObserver !== 'undefined' &amp;&amp; ( isNative(MutationObserver) || MutationObserver.toString() === '[object MutationObserverConstructor]' )) { //判断2：是否原生支持MutationObserver let counter = 1 const observer = new MutationObserver(flushCallbacks) const textNode = document.createTextNode(String(counter)) observer.observe(textNode, { characterData: true }) timerFunc = () =&gt; { counter = (counter + 1) % 2 textNode.data = String(counter) } isUsingMicroTask = true } else if (typeof setImmediate !== 'undefined' &amp;&amp; isNative(setImmediate)) { //判断3：是否原生支持setImmediate timerFunc = () =&gt; { setImmediate(flushCallbacks) } } else { //判断4：上面都不行，直接用setTimeout timerFunc = () =&gt; { setTimeout(flushCallbacks, 0) } } function flushCallbacks () { pending = false const copies = callbacks.slice(0) callbacks.length = 0 for (let i = 0; i &lt; copies.length; i++) { copies[i]() } } nextTick(()=&gt;{ console.log(\\"nextTick callback\\") }) nextTick().then(()=&gt;{ console.log(\\"nextTick Promise\\") })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-01T12:51:48.000Z"}],["meta",{"property":"article:author","content":"XXXWeii"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2022-02-15T16:09:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-01T12:51:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue的nextTick源码解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-15T16:09:00.000Z\\",\\"dateModified\\":\\"2023-06-01T12:51:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XXXWeii\\"}]}"]]},"headers":[],"git":{"createdTime":1685623908000,"updatedTime":1685623908000,"contributors":[{"name":"zjw977020546","email":"11487928+zjw977020546@user.noreply.gitee.com","commits":1}]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"category/Vue/6.md","localizedDate":"2022年2月16日","excerpt":"<p><code>nextTick</code> 支持两种形式使用方式：</p>\\n<ol>\\n<li>回调函数形式。</li>\\n<li>如果当前环节支持 <code>Promise</code>，还支持 <code>Promise.then</code> 的形式。</li>\\n</ol>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> pending <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span>\\ntimeFunc<span class=\\"token punctuation\\">,</span>\\ncallbacks<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//cb:执行的回调函数,context:执行上下文参数</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">nextTick</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">cb<span class=\\"token punctuation\\">,</span>context</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> _resolve<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  callbacks<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>cb<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">cb</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">catch</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">handleError</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">,</span>ctx<span class=\\"token punctuation\\">,</span>'nextTick<span class=\\"token punctuation\\">)</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>_resolve<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">_resolve</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>pending<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    pending<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">timeFunc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>cb<span class=\\"token operator\\">&amp;&amp;</span><span class=\\"token keyword\\">typeof</span> Promise <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">\\"undefind\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    rteurn <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Promise</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">resolve</span><span class=\\"token operator\\">=&gt;</span>_resolve<span class=\\"token operator\\">=</span>resolve<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> isUsingMicroTask <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> Promise <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'undefined'</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">isNative</span><span class=\\"token punctuation\\">(</span>Promise<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//判断1：是否原生支持Promise</span>\\n  <span class=\\"token keyword\\">const</span> p <span class=\\"token operator\\">=</span> Promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function-variable function\\">timerFunc</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span>flushCallbacks<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isIOS<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span>noop<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  isUsingMicroTask <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>isIE <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token keyword\\">typeof</span> MutationObserver <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'undefined'</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token function\\">isNative</span><span class=\\"token punctuation\\">(</span>MutationObserver<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span>\\n  MutationObserver<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'[object MutationObserverConstructor]'</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//判断2：是否原生支持MutationObserver</span>\\n  <span class=\\"token keyword\\">let</span> counter <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\n  <span class=\\"token keyword\\">const</span> observer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MutationObserver</span><span class=\\"token punctuation\\">(</span>flushCallbacks<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">const</span> textNode <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createTextNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span>counter<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  observer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">observe</span><span class=\\"token punctuation\\">(</span>textNode<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">characterData</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token function-variable function\\">timerFunc</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    counter <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>counter <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span>\\n    textNode<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> <span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span>counter<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  isUsingMicroTask <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> setImmediate <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'undefined'</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">isNative</span><span class=\\"token punctuation\\">(</span>setImmediate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//判断3：是否原生支持setImmediate</span>\\n  <span class=\\"token function-variable function\\">timerFunc</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">setImmediate</span><span class=\\"token punctuation\\">(</span>flushCallbacks<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//判断4：上面都不行，直接用setTimeout</span>\\n  <span class=\\"token function-variable function\\">timerFunc</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span>flushCallbacks<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">flushCallbacks</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  pending <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span>\\n  <span class=\\"token keyword\\">const</span> copies <span class=\\"token operator\\">=</span> callbacks<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n  callbacks<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> copies<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    copies<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">nextTick</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"nextTick callback\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">nextTick</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"nextTick Promise\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
