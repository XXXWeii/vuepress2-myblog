import{isPlainObject as h,isFunction as x,isArray as U,isString as z}from"@vuepress/shared";import{watch as Y}from"chokidar";import{fs as $,path as b,colors as n}from"@vuepress/utils";import{fromEntries as J,endsWith as K}from"vuepress-shared/node";import{C as l,d as m,c as k,l as i,a as w,v as Q,g as T,b as E,e as B,u as L,f as A,h as X,i as Z,j as ee,p as y,k as F,m as I,n as j,o as D,T as oe}from"./helpers-9f1ad683.js";import{N as Ue,P as ze,x as Ye,z as Je,X as Ke,O as Qe,A as Xe,q as Ze,r as eo,s as oo,B as ao,D as no,a0 as so,a8 as to,E as io,R as ro,S as po,Z as lo,V as go,U as mo,_ as uo,W as co,$ as fo,a1 as ho,a2 as bo,a3 as yo,a4 as Po,Q as So,a5 as $o,a6 as ko,ad as vo,aa as Co,ae as xo,af as wo,ai as To,ap as Eo,ag as Bo,aq as Lo,F as Ao,Y as Fo,a7 as Io,G as jo,t as Do,y as Mo,H as Oo,ah as No,I as Vo,J as Wo,ac as Ro,K as Go,w as Ho,am as _o,al as qo,an as Uo,ak as zo,aj as Yo,ao as Jo,L as Ko,M as Qo,a9 as Xo,ab as Zo}from"./helpers-9f1ad683.js";import{createRequire as ae}from"node:module";import"bcrypt-ts/node";import"@vuepress/plugin-external-link-icon";import"@vuepress/plugin-nprogress";import"@vuepress/plugin-theme-data";import"@vuepress/plugin-active-header-links";import"vuepress-plugin-auto-catalog";import"vuepress-plugin-comment2";import"vuepress-plugin-components";import"vuepress-plugin-copy-code2";import"vuepress-plugin-copyright2";import"vuepress-plugin-feed2";import"vuepress-plugin-md-enhance";import"vuepress-plugin-photo-swipe";import"vuepress-plugin-pwa2";import"vuepress-plugin-rtl";import"vuepress-plugin-seo2";import"vuepress-plugin-sitemap2";import"vuepress-plugin-blog2";import"vuepress-plugin-reading-time2";import"vuepress-plugin-sass-palette";import"@vuepress/plugin-git";import"@vuepress/plugin-prismjs";const v=e=>{const o=b.resolve(l,e);return $.existsSync(o)?$.readdirSync(o).filter(a=>K(a,".js")||!a.includes(".")).map(a=>[`@theme-hope/${e}/${a.replace(/\.js$/,"")}`,b.resolve(l,e,a)]):[]},M=e=>{const o=b.resolve(l,e,"index.js");return $.existsSync(o)?[`@theme-hope/${e}/index`,o]:null},O=e=>{const o=J([...v("components"),...["composables","utils"].map(M).filter(a=>a!==null),...v("layouts"),...$.readdirSync(b.resolve(l,"modules")).map(a=>`modules/${a}`).map(a=>[...v(`${a}/components`),...["composables","utils"].map(s=>`${a}/${s}`).map(M).filter(s=>s!==null),...v(`${a}/layouts`)]).flat()]);return e&&console.log("Theme alias config:",o),o},ne=e=>(m("defineNavbarConfig",'import { navbar } from "vuepress-theme-hope";'),e),se=e=>(m("defineSidebarConfig",'import { sidebar } from "vuepress-theme-hope";'),e),te=e=>(m("defineSidebarArrayConfig",'import { arraySidebar } from "vuepress-theme-hope";'),e),ie=e=>(m("defineSidebarObjectConfig",'import { objectSidebar } from "vuepress-theme-hope";'),e),re=e=>(m("defineThemeConfig",'import { hopeThemeLegacy } from "vuepress-theme-hope";'),k(e)),N=e=>(i.warn(`"${n.magenta("defineHopeConfig")}" is ${n.red("deprecated")}, please use the following code instead:

${n.magenta(`import { defineUserConfig } from "vuepress";
import { hopeThemeLegacy } from "vuepress-theme-hope";

export default {
  // site config
  // ...

  theme : hopeThemeLegacy({
    // theme config
    // ...
  }),
};
`)}
`),"themeConfig"in e&&h(e.themeConfig)&&(e.theme=C(e.themeConfig)),x(e.theme)||(e.theme=C({})),e),pe=e=>(m("navbarConfig",'import { navbar } from "vuepress-theme-hope";'),e),le=e=>(m("sidebarConfig",'import { sidebar } from "vuepress-theme-hope";'),e),de=e=>(m("themeConfig",'import { hopeThemeLegacy } from "vuepress-theme-hope";'),k(e)),ge=(e={})=>{"lineNumbers"in e&&(i.warn(`${n.magenta("markdown.lineNumbers")} is ${n.yellow("deprecated")}  in VuePress2, please use ${n.magenta("markdown.code.lineNumbers")} instead.`),e.code=e.code??{},h(e.code)&&(e.code.lineNumbers=e.lineNumbers),delete e.lineNumbers),"slugify"in e&&(i.error(`${n.magenta("markdown.slugify")} is ${n.red("no longer supported")} in VuePress2.
If you want to change the slugify function anyway, set the following options separately:
· ${n.blue("markdown.anchor.slugify")}
· ${n.blue("markdown.toc.slugify")}
· ${n.blue("markdown.extractHeaders.slugify")}
`),delete e.slugify),"pageSuffix"in e&&(i.error(`${n.magenta("markdown.pageSuffix")} is ${n.red("no longer supported")} in VuePress2.`),delete e.pageSuffix),"externalLinks"in e&&(i.error(`${n.magenta("markdown.externalLinks")} is ${n.red("no longer supported")} in VuePress2, please use ${n.magenta("markdown.links.externalAttrs")} instead.`),delete e.externalLinks),"plugins"in e&&(i.error(`${n.magenta("markdown.plugins")} is ${n.red("no longer supported")} in VuePress2, please use ${n.magenta("extendsMarkdown")} hook instead.`),delete e.plugins)},me=e=>U(e)?e.flat().filter(o=>{if(x(o))return!0;if(h(o)){const{name:a}=o;if(!z(a))return i.error(`VuePress2 requires "name" option in plugins and it should strict equal it's package name.`),!1;if(!/^(@.*\/)?vuepress-plugin-/.test(a))return i.error("VuePress2 requires plugin name to strict equal a package name, you should fix it"),!1;[["ready","onPrepared"],["updated","onWatched"],["generated","onGenerated"],["extendMarkdown","extendsMarkdown"],["extendPageData","extendsPage"],["templateSSR","templateBuild"]].forEach(([s,r])=>{s in o&&i.warn(`${n.magenta(s)} options in plugin options is ${n.yellow("deprecated")} in VuePress2, please use ${n.magenta(r)} instead.`),o[r]=o[s],delete o[s]}),["plugins","chainMarkdown","extendsCli","configureWebpack","chainWebpack","beforeDevServer","afterDevServer","additionalPages","clientDynamicModules","enhanceAppFiles","globalUIComponents","clientRootMixin","clientAppEnhanceFiles","clientAppRootComponentFiles","clientAppSetupFiles"].forEach(s=>{s in o&&i.error(`${n.magenta(s)} option in plugin options is ${n.red("no longer supported")} in VuePress2, make sure you are using a VuePress2 plugin.`),delete o[s]})}return!1}):h(e)?(i.error(`${n.magenta('object format "plugins"')} is ${n.red("no longer supported")} in VuePress2, you should import plugins and call them in an array.`),[]):[],ue=e=>{["postcss","stylus","scss","sass","less","chainWebpack","configureWebpack","beforeDevServer","afterDevServer","evergreen"].forEach(o=>{o in e&&i.error(`"${n.magenta(o)}" option in config file is ${n.red("no longer supported")} in VuePress2, you should set it in bundler options.`),delete e[o]})},ce=e=>(ge(e.markdown),ue(e),e.plugins=me(e.plugins),[["ready","onPrepared"],["updated","onWatched"],["generated","onGenerated"],["extendMarkdown","extendsMarkdown"],["extendPageData","extendsPage"],["patterns","pagePatterns"],["templateSSR","templateBuild"]].forEach(([o,a])=>{o in e&&i.warn(`"${o}" option in config file is ${n.yellow("deprecated")} in VuePress2, please use "${a}" instead.`),e[a]=e[o],delete e[o]}),[["chainMarkdown",'please use "extendsMarkdown" instead'],["extendsCli"],["configureWebpack",'please set options in "bundler" instead'],["chainWebpack",'please set options in "bundler" instead'],["additionalPages",'please use "app.pages.push(createPage())" in "onInitialized" hook'],["clientDynamicModules",'please use "app.writeTemp()" in "onPrepared" hook'],["clientAppRootComponentFiles",'please use "clientConfigFile" instead'],["clientAppSetupFiles",'please use "clientConfigFile" instead'],["clientAppEnhanceFiles",'please use "clientConfigFile" instead']].forEach(([o,a=""])=>{o in e&&i.error(`"${o}" option in config is ${n.red("no longer supported")} in VuePress2${a?`, ${a}.`:"."}`),delete e[o]}),"extraWatchFiles"in e&&(i.error(`${n.magenta("extraWatchFiles")} options is ${n.red("removed")} in VuePress2, you should use "onWatched" hook.`),delete e.extraWatchFiles),N(e)),fe=ae(import.meta.url),V=(e,{enableBlog:o,enableEncrypt:a,enableSlide:s})=>{const r=[],u=[],f=[],d=[];return o&&(r.push(`import { BlogCategory, BlogHome, BlogType, BloggerInfo, Timeline, setupBlog } from "${l}modules/blog/export.js";`,`import "${l}modules/blog/styles/layout.scss";`),u.push('app.component("BloggerInfo", BloggerInfo);'),f.push("setupBlog();"),d.push("BlogCategory,","BlogHome,","BlogType,","Timeline,")),a&&(r.push(`import { GlobalEncrypt, LocalEncrypt } from "${l}modules/encrypt/export.js";`),u.push('app.component("GlobalEncrypt", GlobalEncrypt);','app.component("LocalEncrypt", LocalEncrypt);')),s&&(r.push(`import Slide from "${b.resolve(fe.resolve("vuepress-plugin-md-enhance/SlidePage"))}";`),d.push("Slide,")),e.writeTemp("theme-hope/config.js",`import { defineClientConfig } from "@vuepress/client";

import { HopeIcon, Layout, NotFound, useScrollPromise, injectDarkmode, setupDarkmode, setupSidebarItems } from "${l}export.js";

${r.join(`
`)}

import "${l}styles/index.scss";

export default defineClientConfig({
  enhance: ({ app, router }) => {
    const { scrollBehavior } = router.options;

    router.options.scrollBehavior = async (...args) => {
      await useScrollPromise().wait();

      return scrollBehavior(...args);
    };

    // inject global properties
    injectDarkmode(app);

    // render icon for auto-catalog
    app.component("HopeIcon", HopeIcon);

${u.map(c=>`    ${c}`).join(`
`)}
  },
  setup: () => {
    setupDarkmode();
    setupSidebarItems();
${f.map(c=>`    ${c}`).join(`
`)}
  },
  layouts: {
    Layout,
    NotFound,
${d.map(c=>`    ${c}`).join(`
`)}
  }
});`)},C=(e,o=!0)=>a=>{const s=h(o)?o:o?{compact:!0,check:!0}:{},r=s.debug?a.env.isDebug=!0:!1,{favicon:u,hotReload:f=r,plugins:d={},hostname:c,iconAssets:W,iconPrefix:R,backToTop:G,sidebarSorter:P,...H}=s.compact?k(e):e;s.compact&&w(a),Q(a);const g=T(a,e),p=E(a,H,g),_=g.enableBlog?B(p):{};return L(a,p,d,f,s),r&&console.log("Theme plugin options:",d),{name:"vuepress-theme-hope",alias:O(r),define:()=>({BLOG_TYPE_INFO:g.blogType,ENABLE_BLOG:g.enableBlog,ENABLE_READING_TIME:g.enableReadingTime,HAS_MULTIPLE_LANGUAGES:g.hasMultipleLanguages,SUPPORT_PAGEVIEW:g.supportPageview}),extendsBundlerOptions:A,extendsMarkdownOptions:t=>{s.check&&X(t,p)},onInitialized:t=>{u&&Z(t,u),s.check&&ee(t)},onPrepared:t=>Promise.all([y(t,p,P),F(t,d),I(t,p),j(t,_)]).then(()=>{}),onWatched:(t,q)=>{if(f){const S=Y("pages/**/*.vue",{cwd:t.dir.temp(),ignoreInitial:!0});S.on("add",()=>{y(t,p,P)}),S.on("change",()=>{y(t,p,P)}),S.on("unlink",()=>{y(t,p,P)}),q.push(S)}},plugins:D(a,d,p,{backToTop:G,hostname:c,hotReload:f,iconAssets:W,iconPrefix:R,favicon:u},s.compact),templateBuild:`${oe}index.build.html`,clientConfigFile:t=>V(t,g)}};export{Ue as ArticleInfoType,ze as PageType,Ye as arraySidebar,Je as blog,Ke as blogFilter,w as checkLegacyStyle,B as checkSocialMediaIcons,Qe as checkTag,Xe as comment,ce as config,Ze as convertFrontmatter,eo as convertNavbarOptions,oo as convertSidebarOptions,k as convertThemeOptions,ao as copyCode,no as copyright,so as defaultPageSorter,N as defineHopeConfig,ne as defineNavbarConfig,te as defineSidebarArrayConfig,se as defineSidebarConfig,ie as defineSidebarObjectConfig,re as defineThemeConfig,A as extendsBundlerOptions,to as extendsPagePlugin,io as feed,ro as getActiveHeaderLinksPlugin,O as getAlias,po as getAutoCatalogPlugin,lo as getBlogArticleType,go as getBlogCategoryCategory,mo as getBlogPlugin,uo as getBlogStarType,co as getBlogTagCategory,fo as getBlogTimelineType,ho as getCommentPlugin,bo as getComponentsPlugin,yo as getCopyCodePlugin,Po as getCopyrightPlugin,So as getEncryptConfig,$o as getFeedPlugin,ko as getMdEnhancePlugin,vo as getPWAPlugin,Co as getPhotoSwipePlugin,D as getPluginConfig,xo as getRtlPlugin,wo as getSEOPlugin,To as getSidebarData,Eo as getSidebarSorter,Bo as getSitemapPlugin,T as getStatus,Lo as getStructureInfo,E as getThemeData,Ao as git,C as hope,C as hopeTheme,Fo as injectBlogBasicInfo,Io as injectPageInfo,jo as mdEnhance,Do as navbar,pe as navbarConfig,Mo as objectSidebar,Oo as photoSwipe,V as prepareConfigFile,F as prepareHighLighterScss,No as preparePerformanceConfigFile,y as prepareSidebarData,j as prepareSocialMediaIcons,I as prepareThemeColorScss,Vo as pwa,Wo as readingTime,Ro as removePrismPlugin,Go as seo,Ho as sidebar,le as sidebarConfig,_o as sidebarDateDescSorter,qo as sidebarDateSorter,Uo as sidebarFilenameSorter,zo as sidebarOrderSorter,Yo as sidebarReadmeSorter,Jo as sidebarTitleSorter,Ko as sitemap,de as themeConfig,Qo as themeLocalesData,Xo as useExtendsPagePlugin,L as usePlugin,Zo as usePrismPlugin};
//# sourceMappingURL=index.js.map
